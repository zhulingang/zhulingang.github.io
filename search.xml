<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Go函数</title>
      <link href="/2021/11/18/gofunc/"/>
      <url>/2021/11/18/gofunc/</url>
      
        <content type="html"><![CDATA[<h1 id="Go函数"><a href="#Go函数" class="headerlink" title="Go函数"></a>Go函数</h1><h2 id="Go函数-1"><a href="#Go函数-1" class="headerlink" title="Go函数"></a>Go函数</h2><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">name</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">return</span> params<span class="token punctuation">)</span><span class="token punctuation">{</span>function body<span class="token punctuation">}</span><span class="token comment" spellcheck="true">//eg,如果相邻的参数类型是相同的，则可以省略前一个类型</span><span class="token keyword">func</span> <span class="token function">cal</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//可以对返回值进行命名，注意需要显式调用return语句进行返回</span><span class="token keyword">func</span> <span class="token function">div</span><span class="token punctuation">(</span>dividend<span class="token punctuation">,</span>divsor <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>quotient<span class="token punctuation">,</span>remainder <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  quotient<span class="token operator">=</span>dividend<span class="token operator">/</span>divsor  remainder<span class="token operator">=</span>dividend<span class="token operator">%</span>divsor  <span class="token keyword">return</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//注意返回参数不能一个命名，一个不命名，只能选一种方式</span><span class="token keyword">func</span> <span class="token function">div2</span><span class="token punctuation">(</span>dividend<span class="token punctuation">,</span> divsor <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    quotient <span class="token operator">:=</span> dividend <span class="token operator">/</span> divsor    remainder <span class="token operator">:=</span> dividend <span class="token operator">%</span> divsor    <span class="token keyword">return</span> quotient<span class="token punctuation">,</span> remainder<span class="token punctuation">}</span><span class="token comment" spellcheck="true">//报错，error前没有返回参数名</span><span class="token comment" spellcheck="true">//func myFunc(x,y int)(sum int,error){</span><span class="token comment" spellcheck="true">//    return x+y,nil</span><span class="token comment" spellcheck="true">//}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h4><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">//在声明之后可以直接调用    </span><span class="token keyword">func</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token string">"ss"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//赋值给给函数类型的变量</span>namePrint<span class="token operator">:=</span><span class="token keyword">func</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">namePrint</span><span class="token punctuation">(</span><span class="token string">"ss"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>使用匿名函数作为回调函数</strong></p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">proc</span><span class="token punctuation">(</span>input <span class="token builtin">string</span><span class="token punctuation">,</span>processor <span class="token keyword">func</span><span class="token punctuation">(</span>str <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">processor</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">proc</span><span class="token punctuation">(</span><span class="token string">"王小二"</span><span class="token punctuation">,</span><span class="token keyword">func</span><span class="token punctuation">(</span>str <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><p>闭包是携带状态的函数，它是将函数内部和函数外部连接起来的桥梁。通过闭包，我们可以读取函数内部的变量。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">createCounter</span><span class="token punctuation">(</span>ini <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token punctuation">{</span>    ini<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ini<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  c1<span class="token operator">:=</span><span class="token function">createCounter</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token function">c1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//2</span>  c2<span class="token operator">:=</span><span class="token function">createCounter</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token function">c2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//11</span>  fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token function">c1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//3</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 后端 </tag>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go内存逃逸</title>
      <link href="/2021/11/18/gomemory-escape/"/>
      <url>/2021/11/18/gomemory-escape/</url>
      
        <content type="html"><![CDATA[<h1 id="Go内存逃逸"><a href="#Go内存逃逸" class="headerlink" title="Go内存逃逸"></a>Go内存逃逸</h1><h2 id="Go内存逃逸-1"><a href="#Go内存逃逸-1" class="headerlink" title="Go内存逃逸"></a>Go内存逃逸</h2><p>简单来说就是原本应在栈上分配内存的对象，逃逸到了堆上进行分配。如果能在栈上进行分配，那么只需要两个指令，入栈和出栈，GC压力也小了。所以相比之下，在栈上分配代价会小很多。</p><p>go语言编译器会自动决定把一个变量放在栈还是放在堆，编译器会做<strong>逃逸分析(escape analysis)</strong>，<strong>当发现变量的作用域没有跑出函数范围，就可以在栈上，反之则必须分配在堆</strong>。</p><h3 id="指针逃逸"><a href="#指针逃逸" class="headerlink" title="指针逃逸"></a>指针逃逸</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">func</span> <span class="token function">foo</span><span class="token punctuation">(</span>arg_val <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> foo_val <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>foo_val<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    main_val <span class="token operator">:=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">666</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">*</span>main_val<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">type</span> Student <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Name <span class="token builtin">string</span>    Age  <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">StudentRegister</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">,</span> age <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>Student <span class="token punctuation">{</span>    s <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>Student<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//局部变量s逃逸到堆</span>    s<span class="token punctuation">.</span>Name <span class="token operator">=</span> name    s<span class="token punctuation">.</span>Age <span class="token operator">=</span> age    <span class="token keyword">return</span> s<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">StudentRegister</span><span class="token punctuation">(</span><span class="token string">"Jim"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="栈空间不足逃逸（空间开辟过大）"><a href="#栈空间不足逃逸（空间开辟过大）" class="headerlink" title="栈空间不足逃逸（空间开辟过大）"></a>栈空间不足逃逸（空间开辟过大）</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">func</span> <span class="token function">Slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    s <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span>  <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> index<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> <span class="token keyword">range</span> s <span class="token punctuation">{</span>        s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> index    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">Slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="动态类型逃逸（不确定长度大小）"><a href="#动态类型逃逸（不确定长度大小）" class="headerlink" title="动态类型逃逸（不确定长度大小）"></a>动态类型逃逸（不确定长度大小）</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    s <span class="token operator">:=</span> <span class="token string">"Escape"</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>又或者像前面提到的例子：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    a <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// 栈 空间小</span>    b <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20000</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 堆 空间过大 逃逸</span>    l <span class="token operator">:=</span> <span class="token number">20</span>    c <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> l<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 堆 动态分配不定空间 逃逸</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    data <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">}</span>    data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//结果</span>aceld<span class="token punctuation">:</span>test ldb$ <span class="token keyword">go</span> tool compile <span class="token operator">-</span>m <span class="token number">1</span><span class="token punctuation">.</span><span class="token keyword">go</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span> can inline main<span class="token number">1</span><span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">23</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span> does not escape<span class="token number">1</span><span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">24</span><span class="token punctuation">:</span> <span class="token number">100</span> does not escape<span class="token number">1</span><span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">29</span><span class="token punctuation">:</span> <span class="token number">200</span> does not escape<span class="token number">1</span><span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">:</span> <span class="token number">100</span> escapes to heap<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    data <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    data<span class="token punctuation">[</span><span class="token string">"key"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">}</span>aceld<span class="token punctuation">:</span>test ldb$ <span class="token keyword">go</span> tool compile <span class="token operator">-</span>m <span class="token number">2</span><span class="token punctuation">.</span><span class="token keyword">go</span><span class="token number">2</span><span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span> can inline main<span class="token number">2</span><span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">14</span><span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> does not escape<span class="token number">2</span><span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">14</span><span class="token punctuation">:</span> <span class="token number">200</span> escapes to heap<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    data <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    data<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//</span>aceld<span class="token punctuation">:</span>test ldb$ <span class="token keyword">go</span> tool compile <span class="token operator">-</span>m <span class="token number">3</span><span class="token punctuation">.</span><span class="token keyword">go</span><span class="token number">3</span><span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span> can inline main<span class="token number">3</span><span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">14</span><span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token keyword">interface</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">interface</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> does not escape<span class="token number">3</span><span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span> <span class="token number">100</span> escapes to heap<span class="token number">3</span><span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">:</span> <span class="token number">200</span> escapes to heap<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="闭包引用对象逃逸"><a href="#闭包引用对象逃逸" class="headerlink" title="闭包引用对象逃逸"></a>闭包引用对象逃逸</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Fibonacci</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    a<span class="token punctuation">,</span> b <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>    <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>        a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a<span class="token operator">+</span>b        <span class="token keyword">return</span> a    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    f <span class="token operator">:=</span> <span class="token function">Fibonacci</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Fibonacci: %d\n"</span><span class="token punctuation">,</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="引用对象逃逸"><a href="#引用对象逃逸" class="headerlink" title="引用对象逃逸"></a>引用对象逃逸</h4><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    data <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span>    data<span class="token punctuation">[</span><span class="token string">"key"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"value"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们通过编译看看逃逸结果</p><pre class="line-numbers language-go"><code class="language-go">aceld<span class="token punctuation">:</span>test ldb$ <span class="token keyword">go</span> tool compile <span class="token operator">-</span>m <span class="token number">4</span><span class="token punctuation">.</span><span class="token keyword">go</span><span class="token number">4</span><span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span> can inline main<span class="token number">4</span><span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">14</span><span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> does not escape<span class="token number">4</span><span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">24</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span> escapes to heap<span class="token comment" spellcheck="true">//因为map的值为[]string切片，由于切片为引用值类型，所以一开始编译不确定</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    a <span class="token operator">:=</span> <span class="token number">10</span>    data <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token boolean">nil</span><span class="token punctuation">}</span>    data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们通过编译看看逃逸结果</p><pre class="line-numbers language-go"><code class="language-go"> aceld<span class="token punctuation">:</span>test ldb$ <span class="token keyword">go</span> tool compile <span class="token operator">-</span>m <span class="token number">5</span><span class="token punctuation">.</span><span class="token keyword">go</span><span class="token number">5</span><span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span> can inline main<span class="token number">5</span><span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">:</span> moved to heap<span class="token punctuation">:</span> a<span class="token number">5</span><span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span> does not escape<span class="token comment" spellcheck="true">//因为data存的是引用类型值，所以a发生逃逸</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span>    s <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"aceld"</span><span class="token punctuation">}</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ch <span class="token operator">&lt;-</span> s    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们通过编译看看逃逸结果</p><pre class="line-numbers language-go"><code class="language-go">aceld<span class="token punctuation">:</span>test ldb$ <span class="token keyword">go</span> tool compile <span class="token operator">-</span>m <span class="token number">8</span><span class="token punctuation">.</span><span class="token keyword">go</span><span class="token number">8</span><span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span> can inline main<span class="token punctuation">.</span>func1<span class="token number">8</span><span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">15</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span> escapes to heap<span class="token number">8</span><span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span> <span class="token keyword">func</span> literal escapes to heap<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我们看到<code>[]string{...} escapes to heap</code>, s被逃逸到堆上。</p><h4 id="形参为引用类型"><a href="#形参为引用类型" class="headerlink" title="形参为引用类型"></a>形参为引用类型</h4><p><code>func(*int)</code>函数类型，进行函数赋值，会使传递的形参出现逃逸现象,形参为引用类型。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">foo</span><span class="token punctuation">(</span>a <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    data <span class="token operator">:=</span> <span class="token number">10</span>    f <span class="token operator">:=</span> foo    <span class="token function">f</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>data<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们通过编译看看逃逸结果</p><pre class="line-numbers language-go"><code class="language-go">aceld<span class="token punctuation">:</span>test ldb$ <span class="token keyword">go</span> tool compile <span class="token operator">-</span>m <span class="token number">6</span><span class="token punctuation">.</span><span class="token keyword">go</span><span class="token number">6</span><span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span> can inline foo<span class="token number">6</span><span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span> inlining call to foo<span class="token number">6</span><span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">14</span><span class="token punctuation">:</span><span class="token number">13</span><span class="token punctuation">:</span> inlining call to fmt<span class="token punctuation">.</span>Println<span class="token number">6</span><span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">:</span> a does not escape<span class="token number">6</span><span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">14</span><span class="token punctuation">:</span><span class="token number">13</span><span class="token punctuation">:</span> data escapes to heap<span class="token number">6</span><span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">14</span><span class="token punctuation">:</span><span class="token number">13</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span> does not escape<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>this does not escape<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们会看到data已经被逃逸到堆上。</p><ul><li><code>func([]string)</code>: 函数类型，进行<code>[]string{&quot;value&quot;}</code>赋值，会使传递的参数出现逃逸现象。</li></ul><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">foo</span><span class="token punctuation">(</span>a <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    s <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"aceld"</span><span class="token punctuation">}</span>    <span class="token function">foo</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们通过编译看看逃逸结果</p><pre class="line-numbers language-go"><code class="language-go">aceld<span class="token punctuation">:</span>test ldb$ <span class="token keyword">go</span> tool compile <span class="token operator">-</span>m <span class="token number">7</span><span class="token punctuation">.</span><span class="token keyword">go</span><span class="token number">7</span><span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span> can inline foo<span class="token number">7</span><span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span> inlining call to foo<span class="token number">7</span><span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">13</span><span class="token punctuation">:</span><span class="token number">13</span><span class="token punctuation">:</span> inlining call to fmt<span class="token punctuation">.</span>Println<span class="token number">7</span><span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">:</span> a does not escape<span class="token number">7</span><span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token number">15</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span> escapes to heap<span class="token number">7</span><span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">13</span><span class="token punctuation">:</span><span class="token number">13</span><span class="token punctuation">:</span> s escapes to heap<span class="token number">7</span><span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">13</span><span class="token punctuation">:</span><span class="token number">13</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span> does not escape <span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>this does not escape<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们看到 <code>s escapes to heap</code>，s被逃逸到堆上。</p><h3 id="逃逸总结"><a href="#逃逸总结" class="headerlink" title="逃逸总结"></a>逃逸总结</h3><ul><li>栈上分配内存比在堆中分配内存有更高的效率</li><li>栈上分配的内存不需要GC处理</li><li>堆上分配的内存使用完毕会交给GC处理</li><li>逃逸分析目的是决定内分配地址是栈还是堆</li><li>逃逸分析在编译阶段完成</li></ul>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 后端 </tag>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go容器</title>
      <link href="/2021/11/18/go-container/"/>
      <url>/2021/11/18/go-container/</url>
      
        <content type="html"><![CDATA[<h1 id="Go容器"><a href="#Go容器" class="headerlink" title="Go容器"></a>Go容器</h1><h2 id="Go容器-1"><a href="#Go容器-1" class="headerlink" title="Go容器"></a>Go容器</h2><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数组的长度不可变</p><pre class="line-numbers language-go"><code class="language-go"> <span class="token keyword">var</span> name <span class="token punctuation">[</span>size<span class="token punctuation">]</span>T <span class="token comment" spellcheck="true">//声明时需要指定大小</span> <span class="token keyword">var</span> students <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token comment" spellcheck="true">//也可以通过指针操作数组</span> students2 <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token operator">*</span>students2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//注意初始化时，{}内的数组成员数量不能比size大</span> students3 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span> students3 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//或者让...根据成员的数量来确定数组的大小</span> students4<span class="token operator">:=</span><span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h3><p>切片是对数组一个连续片段的引用，它是一个容量可变的序列，可以理解为动态数组。</p><pre class="line-numbers language-go"><code class="language-go"> <span class="token keyword">type</span> slice <span class="token keyword">struct</span> <span class="token punctuation">{</span>  array unsafe<span class="token punctuation">.</span>Pointer  <span class="token builtin">len</span> <span class="token builtin">int</span>  <span class="token builtin">cap</span> <span class="token builtin">int</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（1） array是指向底层存储数据数组的指针。 </p><p>（2）len指当前切片的长度，即成员数量。读写操作不能超过这个限制,不然就会panic （3） cap指当前切片的容量，它总是大于等于len。这个扩张容量也不是无限的扩张,它是受到了底层数组array的长度限制,超出了底层array的长度就会panic</p><h4 id="从原生数组中生成切片，切片生成切片"><a href="#从原生数组中生成切片，切片生成切片" class="headerlink" title="从原生数组中生成切片，切片生成切片"></a>从原生数组中生成切片，切片生成切片</h4><pre class="line-numbers language-go"><code class="language-go"> <span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span>   slice0<span class="token operator">:=</span>arr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">//cap为3</span>   slice1 <span class="token operator">:=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//则cap为6，len为3</span>   slice1 <span class="token operator">:=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//{low:high:max} 最多再扩张一个元素  cap为4</span>   <span class="token comment" spellcheck="true">//max超出 len(arr)</span>   <span class="token comment" spellcheck="true">//slice2 := arr[1:4:7] //panic</span>   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>slice1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[1,2,3]</span>   slice3 <span class="token operator">:=</span> slice1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//[2,3] 大于4会panic cap为3 </span>   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>slice3<span class="token punctuation">)</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码中创建了一个长度为7的数组arr,同时创建一个基于数组arr的切片slice1,切片引用了数组的index=1到index=3之间的元素,同时也允许切片最大扩张1个元素大小的空间。如果这个扩张空间大于7那么程序就会panic。最后创建了一个基于slice1延申的一个切片slice2,它引用了切片的index=1到index=3之间的元素,由于slice1最大扩容1个元素,因此slice2也最多扩容一个元素,超过了会panic。</p><p> 创建基于底层数组的slice,其cap取值在: len&lt;=cap&lt;=len(arr)之间</p><p>  创建基于一个切片的slice,其cap取值在: len(slice1)&lt;=cap&lt;=cap(slice1)之间</p><h4 id="使用make动态创建切片"><a href="#使用make动态创建切片" class="headerlink" title="使用make动态创建切片"></a>使用make动态创建切片</h4><pre class="line-numbers language-go"><code class="language-go"> <span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">var</span> slice <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//len=3,cap=5</span>   slice2 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//[0,0,0] 初值为类型的初始值</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="声明新的切片"><a href="#声明新的切片" class="headerlink" title="声明新的切片"></a>声明新的切片</h4><pre class="line-numbers language-go"><code class="language-go"> <span class="token keyword">var</span> name <span class="token punctuation">[</span><span class="token punctuation">]</span>T ex <span class="token operator">:=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//len =3 cap=3</span> <span class="token comment" spellcheck="true">//创建指针的时候，注意要加*号</span> list <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>list <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token operator">*</span>list<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">*</span>list<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="向切片添加元素append"><a href="#向切片添加元素append" class="headerlink" title="向切片添加元素append"></a>向切片添加元素append</h4><pre class="line-numbers language-go"><code class="language-go"> arr1<span class="token operator">:=</span><span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span> arr2<span class="token operator">:=</span><span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span> sli1 <span class="token operator">:=</span> arr1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">//len=2,cap=4</span> sli2 <span class="token operator">:=</span> arr2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">//len=2, cap=2</span> newSli1 <span class="token operator">:=</span> <span class="token function">append</span><span class="token punctuation">(</span>sli1<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//arr1[1,2,5,4] newSli1[1,2,5]</span> newSli2 <span class="token operator">:=</span> <span class="token function">append</span><span class="token punctuation">(</span>sli2<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//arr2[1,2,3,4] newSli2[3,4,5]</span> <span class="token comment" spellcheck="true">//切片append切片，最后需要加...</span> slice <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>slice<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">}</span><span class="token operator">...</span><span class="token punctuation">)</span> s1 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span> s2 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span> s1 <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token operator">...</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//多添加</span> s <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> s <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1.如果容量够，直接将新元素覆盖到原有数组中，</p><p>2.如果容量不够，则需要重新申请新的底层数组，一般先申请一个大小为原来cap两倍的数组，再将之前数组的拷贝过去，再append</p><p>内建的copy函数</p><pre class="line-numbers language-go"><code class="language-go"> <span class="token function">copy</span><span class="token punctuation">(</span>destSli<span class="token punctuation">,</span>srcSli<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span>T<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回的结果为实际发生复制的元素个数，如果要保证来源切片的数据都复制到目标切片，需要保证目标切片的长度不小于来源切片的长度，否则将按照目标切片的长度进行复制。</p><pre class="line-numbers language-go"><code class="language-go"> <span class="token comment" spellcheck="true">//基本cap的增长规则</span>      newcap <span class="token operator">:=</span> old<span class="token punctuation">.</span><span class="token builtin">cap</span>   <span class="token keyword">if</span> newcap<span class="token operator">+</span>newcap <span class="token operator">&lt;</span> <span class="token builtin">cap</span> <span class="token punctuation">{</span>     newcap <span class="token operator">=</span> <span class="token builtin">cap</span>   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>     <span class="token keyword">for</span> <span class="token punctuation">{</span>       <span class="token keyword">if</span> old<span class="token punctuation">.</span><span class="token builtin">len</span> <span class="token operator">&lt;</span> <span class="token number">1024</span> <span class="token punctuation">{</span>         newcap <span class="token operator">+=</span> newcap       <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>         newcap <span class="token operator">+=</span> newcap <span class="token operator">/</span> <span class="token number">4</span>       <span class="token punctuation">}</span>       <span class="token keyword">if</span> newcap <span class="token operator">>=</span> <span class="token builtin">cap</span> <span class="token punctuation">{</span>         <span class="token keyword">break</span>       <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="改变切片里的元素"><a href="#改变切片里的元素" class="headerlink" title="改变切片里的元素"></a>改变切片里的元素</h4><pre class="line-numbers language-go"><code class="language-go"> <span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">var</span> slice <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//len=3,cap=5</span>   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//[0,0,0]</span>   slice2<span class="token operator">:=</span>slice<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">//slice实现了对slice的扩容,切片长度变为5</span>   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>slice2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[0,0,0,0,0]</span>   slice<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">999</span>  <span class="token comment" spellcheck="true">//这里slice和slice的index=0位置都是999 因为他们引用的底层数组的index=0位置都是999</span>   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span>   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>slice2<span class="token punctuation">)</span>   <span class="token function">AddOne</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[8888,0,0]</span>   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[8888,0,0]</span>   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>slice2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[8888,0,0,0]</span> <span class="token punctuation">}</span> <span class="token keyword">func</span> <span class="token function">AddOne</span><span class="token punctuation">(</span>s <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">8888</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>Go语言中 map 是一种特殊的数据结构，一种元素对（pair）的无序集合，pair 对应一个 key（索引）和一个 value（值），所以这个结构也称为关联数组或字典，这是一种能够快速寻找值的理想结构，给定 key，就可以迅速找到对应的 value。</p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><pre class="line-numbers language-go"><code class="language-go">   map1 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//map1 := make(map[int]string)等价于 map1 :=map[int]string{}。</span>   <span class="token keyword">var</span> map2 <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token comment" spellcheck="true">//这样还不能使用，因为他没有分配内存</span> <span class="token comment" spellcheck="true">//可以指定容量</span>   <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span>keytype<span class="token punctuation">]</span>valuetype<span class="token punctuation">,</span> <span class="token builtin">cap</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//切片作为map的值</span> mp1 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> mp2 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在声明的时候不需要知道 map 的长度，因为 map 是可以动态增长的，未初始化的 map 的值是 nil，使用函数 len() 可以获取 map 中 pair 的数目。</p><h4 id="底层实现"><a href="#底层实现" class="headerlink" title="底层实现"></a>底层实现</h4><pre class="line-numbers language-go"><code class="language-go"> <span class="token comment" spellcheck="true">//map结构体是hmap，是hashmap的缩写</span> <span class="token keyword">type</span> hmap <span class="token keyword">struct</span> <span class="token punctuation">{</span>     count      <span class="token builtin">int</span>            <span class="token comment" spellcheck="true">//元素个数，调用len(map)时直接返回</span>     flags      <span class="token builtin">uint8</span>          <span class="token comment" spellcheck="true">//标志map当前状态,正在删除元素、添加元素.....</span>     B          <span class="token builtin">uint8</span>          <span class="token comment" spellcheck="true">//单元(buckets)的对数 B=5表示能容纳32个元素</span>     noverflow  <span class="token builtin">uint16</span>         <span class="token comment" spellcheck="true">//单元(buckets)溢出数量，如果一个单元能存8个key，此时存储了9个，溢出了，就需要再增加一个单元</span>     hash0      <span class="token builtin">uint32</span>         <span class="token comment" spellcheck="true">//哈希种子</span>     buckets    unsafe<span class="token punctuation">.</span>Pointer <span class="token comment" spellcheck="true">//指向单元(buckets)数组,大小为2^B，可以为nil</span>     oldbuckets unsafe<span class="token punctuation">.</span>Pointer <span class="token comment" spellcheck="true">//扩容的时候，buckets长度会是oldbuckets的两倍</span>     nevacute   <span class="token builtin">uintptr</span>        <span class="token comment" spellcheck="true">//指示扩容进度，小于此buckets迁移完成</span>     extra      <span class="token operator">*</span>mapextra      <span class="token comment" spellcheck="true">//与gc相关 可选字段</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//a bucket for a Go map</span> <span class="token keyword">type</span> bmap <span class="token keyword">struct</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 每个元素hash值的高8位，如果tophash[0] &lt; minTopHash，表示这个桶的搬迁状态</span>     tophash <span class="token punctuation">[</span>bucketCnt<span class="token punctuation">]</span><span class="token builtin">uint8</span>     <span class="token comment" spellcheck="true">// 接下来是8个key、8个value，但是我们不能直接看到；为了优化对齐，go采用了key放在一起，value放在一起的存储方式，</span>     <span class="token comment" spellcheck="true">// 再接下来是hash冲突发生时，下一个溢出桶的地址</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//实际上编辑期间会动态生成一个新的结构体</span> <span class="token keyword">type</span> bmap <span class="token keyword">struct</span> <span class="token punctuation">{</span>     topbits  <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token builtin">uint8</span>   <span class="token comment" spellcheck="true">//存8个高8位hash</span>     keys     <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span>keytype <span class="token comment" spellcheck="true">//存8个key</span>     values   <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span>valuetype<span class="token comment" spellcheck="true">//8个value</span>     pad      <span class="token builtin">uintptr</span>  <span class="token comment" spellcheck="true">//pading</span>     overflow <span class="token builtin">uintptr</span>  <span class="token comment" spellcheck="true">//指向下一个溢出桶</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> Go的map就是hashmap，源码在src/runtime/hashmap.go。对比C++用红黑树实现的map，Go的map是unordered map，即无法对key值排序遍历。跟传统的hashmap的实现方法一样，它通过一个buckets数组实现，所有元素被hash到数组的bucket中，<strong>buckets</strong>就是指向了这个内存连续分配的数组。<strong>B</strong>字段说明hash表大小是2的指数，即<code>2^B</code>。每次扩容会增加到上次大小的两倍，即<code>2^(B+1)</code>。当bucket填满后，将通过<strong>overflow</strong>指针来<code>mallocgc</code>一个bucket出来形成链表，也就是为哈希表解决冲突问题。</p><p><strong>计算hash</strong></p><table><thead><tr><th align="center">key</th><th align="center">hash</th><th align="center">hashtop</th><th align="center">bucket index</th></tr></thead><tbody><tr><td align="center">key</td><td align="center">hash := alg.hash(key, uintptr(h.hash0))</td><td align="center">top := uint8(hash &gt;&gt; (sys.PtrSize*8 - 8))</td><td align="center">bucket := hash &amp; (uintptr(1)&lt;&lt;h.B - 1)，即 hash % 2^B</td></tr></tbody></table><p>例如，对于B = 3，当hash(key) = 4时， hashtop = 0， bucket = 4，当hash(key) = 20时，hashtop = 0， bucket = 4；</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211117231842.png" alt="image-20211031135443819"></p><p>每个key落在桶的位置由hash出来的结果的高8位决定，链表在数组中的位置是由低位决定的，hash % 2^B，结果刚好是数组的长度。</p><p>key经过哈希值计算得到哈希值，共64位(64位机器)，后面5位用于计算该key放在哪一个bucket中，前8位用于确定该key在bucket中的位置；比如一个key经过计算结果是：</p><pre class="line-numbers language-go"><code class="language-go"> <span class="token number">10010111</span> <span class="token operator">|</span> <span class="token number">000011110110110010001111001010100010010110010101010</span> │ <span class="token number">01010</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>01010值是10，也就是第10个bucket；10010111值是151，在6号bucket中查找tophash值为151的key(最开始bucket还没有 key，新加入的 key 会找到第一个空位，放入)。</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211117231906.png" alt="image-20211031142025863"></p><h5 id="遍历查找"><a href="#遍历查找" class="headerlink" title="遍历查找"></a>遍历查找</h5><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211117231920.png" alt="image-20211031142113085"></p><p>里说一下定位key和value的方法以及整个循环的写法：</p><pre class="line-numbers language-go"><code class="language-go"> <span class="token comment" spellcheck="true">//key定位公式</span> k <span class="token operator">:=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token operator">+</span>i<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//value定位公式</span> e <span class="token operator">:=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token operator">+</span>bucketCnt<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token operator">+</span>i<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>elemsize<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>b是bmap的地址，dataOffset是key相对于bmap起始地址的偏移：</p><pre class="line-numbers language-go"><code class="language-go"> dataOffset<span class="token operator">=</span>unsafe<span class="token punctuation">.</span><span class="token function">Offsetof</span><span class="token punctuation">(</span><span class="token keyword">struct</span><span class="token punctuation">{</span>         b bmap         v <span class="token builtin">int64</span>     <span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p> 因此bucket里key的起始地址就是unsafe.Pointer(b)+dataOffset；第i个key的地址就要此基础上加i个key大小；value的地址是在key之后，所以第i个value，要加上所有的key的偏移。</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211117231933.png" alt="image-20211031151138947"></p><p>从源码中可以看到，先根据hash的低位找到桶的索引，之后计算高位的hash，去与一个桶中的tophash比较，只有高位hash相等了，才继续比较key。如果一个桶中比较完了，没找到，但还有overflow，则将b指向他的溢出桶。</p><pre class="line-numbers language-go"><code class="language-go"> <span class="token operator">/</span> mapaccess1返回一个指向h<span class="token punctuation">[</span>键<span class="token punctuation">]</span>的指针。决不返回<span class="token boolean">nil</span>，相反，如果键不在映射中，它将返回对elem类型的zero对象的引用。 <span class="token comment" spellcheck="true">// 注意:返回的指针可能会使整个映射保持活动状态，所以不要长时间保持。</span> <span class="token keyword">func</span> <span class="token function">mapaccess1</span><span class="token punctuation">(</span>t <span class="token operator">*</span>maptype<span class="token punctuation">,</span> h <span class="token operator">*</span>hmap<span class="token punctuation">,</span> key unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span> unsafe<span class="token punctuation">.</span>Pointer <span class="token punctuation">{</span>     <span class="token keyword">if</span> raceenabled <span class="token operator">&amp;&amp;</span> h <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>         callerpc <span class="token operator">:=</span> <span class="token function">getcallerpc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         pc <span class="token operator">:=</span> <span class="token function">funcPC</span><span class="token punctuation">(</span>mapaccess1<span class="token punctuation">)</span>         <span class="token function">racereadpc</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">,</span> callerpc<span class="token punctuation">,</span> pc<span class="token punctuation">)</span>         <span class="token function">raceReadObjectPC</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>key<span class="token punctuation">,</span> key<span class="token punctuation">,</span> callerpc<span class="token punctuation">,</span> pc<span class="token punctuation">)</span>     <span class="token punctuation">}</span>     <span class="token keyword">if</span> msanenabled <span class="token operator">&amp;&amp;</span> h <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>         <span class="token function">msanread</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> t<span class="token punctuation">.</span>key<span class="token punctuation">.</span>size<span class="token punctuation">)</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//如果h说明都没有，返回零值</span>     <span class="token keyword">if</span> h <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">||</span> h<span class="token punctuation">.</span>count <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> t<span class="token punctuation">.</span><span class="token function">hashMightPanic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//如果哈希函数出错</span>             t<span class="token punctuation">.</span>key<span class="token punctuation">.</span>alg<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// see issue 23734</span>         <span class="token punctuation">}</span>         <span class="token keyword">return</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>zeroVal<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//写和读冲突</span>     <span class="token keyword">if</span> h<span class="token punctuation">.</span>flags<span class="token operator">&amp;</span>hashWriting <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>         <span class="token function">throw</span><span class="token punctuation">(</span><span class="token string">"concurrent map read and map write"</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//不同类型的key需要不同的hash算法需要在编译期间确定</span>     alg <span class="token operator">:=</span> t<span class="token punctuation">.</span>key<span class="token punctuation">.</span>alg     <span class="token comment" spellcheck="true">//利用hash0引入随机性，计算哈希值</span>     hash <span class="token operator">:=</span> alg<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>hash0<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//比如B=5那m就是31二进制是全1，</span>     <span class="token comment" spellcheck="true">//求bucket num时，将hash与m相与，</span>     <span class="token comment" spellcheck="true">//达到bucket num由hash的低8位决定的效果，</span>     <span class="token comment" spellcheck="true">//bucketMask函数掩蔽了移位量，省略了溢出检查。</span>     m <span class="token operator">:=</span> <span class="token function">bucketMask</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>B<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//b即bucket的地址</span>     b <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>bmap<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>buckets<span class="token punctuation">,</span> <span class="token punctuation">(</span>hash<span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>bucketsize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// oldbuckets 不为 nil，说明发生了扩容</span>     <span class="token keyword">if</span> c <span class="token operator">:=</span> h<span class="token punctuation">.</span>oldbuckets<span class="token punctuation">;</span> c <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token operator">!</span>h<span class="token punctuation">.</span><span class="token function">sameSizeGrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">//新的bucket是旧的bucket两倍</span>             m <span class="token operator">>>=</span> <span class="token number">1</span>         <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">//求出key在旧的bucket中的位置</span>         oldb <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>bmap<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token punctuation">(</span>hash<span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>bucketsize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">//如果旧的bucket还没有搬迁到新的bucket中，那就在老的bucket中寻找</span>         <span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">evacuated</span><span class="token punctuation">(</span>oldb<span class="token punctuation">)</span> <span class="token punctuation">{</span>             b <span class="token operator">=</span> oldb         <span class="token punctuation">}</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//计算tophash高8位</span>     top <span class="token operator">:=</span> <span class="token function">tophash</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span> bucketloop<span class="token punctuation">:</span>     <span class="token comment" spellcheck="true">//遍历所有overflow里面的bucket</span>     <span class="token keyword">for</span> <span class="token punctuation">;</span> b <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">;</span> b <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">overflow</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//遍历8个bucket</span>         <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bucketCnt<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">//tophash不匹配，继续</span>             <span class="token keyword">if</span> b<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> top <span class="token punctuation">{</span>                 <span class="token keyword">if</span> b<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> emptyRest <span class="token punctuation">{</span>                     <span class="token keyword">break</span> bucketloop                 <span class="token punctuation">}</span>                 <span class="token keyword">continue</span>             <span class="token punctuation">}</span>             <span class="token comment" spellcheck="true">//tophash匹配，定位到key的位置</span>             k <span class="token operator">:=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token operator">+</span>i<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">//若key为指针</span>             <span class="token keyword">if</span> t<span class="token punctuation">.</span><span class="token function">indirectkey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token comment" spellcheck="true">//解引用</span>                 k <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token punctuation">}</span>             <span class="token comment" spellcheck="true">//key相等</span>             <span class="token keyword">if</span> alg<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token comment" spellcheck="true">//定位value的位置</span>                 e <span class="token operator">:=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token operator">+</span>bucketCnt<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token operator">+</span>i<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>elemsize<span class="token punctuation">)</span><span class="token punctuation">)</span>                 <span class="token keyword">if</span> t<span class="token punctuation">.</span><span class="token function">indirectelem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                     <span class="token comment" spellcheck="true">//value解引用</span>                     e <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>                 <span class="token punctuation">}</span>                 <span class="token keyword">return</span> e             <span class="token punctuation">}</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//没有找到，返回0值</span>     <span class="token keyword">return</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>zeroVal<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="插入存值-mapassign"><a href="#插入存值-mapassign" class="headerlink" title="插入存值 mapassign"></a>插入存值 mapassign</h5><p>首先用key的hash值低8位找到bucket，然后在bucket内部比对tophash和高8位与其对应的key值与入参key是否相等，注意，比完hash值的高8位还需比较key值是否相等，若找到则更新这个值。若key不存在，则key优先存入在查找的过程中遇到的空的tophash数组位置。若当前的bucket已满则需要另外分配空间给这个key，新分配的bucket将挂在overflow链表后。</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211117231955.png" alt="image-20211031154244818"></p><p>那么当 key 定位到了某个 bucket 后，需要确保这个 bucket 对应的老 bucket 完成了迁移过程。即老 bucket 里的 key 都要迁移到新的 bucket 中来（分裂到 2 个新 bucket），才能在新的 bucket 中进行插入或者更新的操作。</p><p>上面说的操作是在函数靠前的位置进行的，只有进行完了这个搬迁操作后，我们才能放心地在新 bucket 里定位 key 要安置的地址，再进行之后的操作。</p><pre class="line-numbers language-go"><code class="language-go"> <span class="token keyword">func</span> <span class="token function">mapassign1</span><span class="token punctuation">(</span>t <span class="token operator">*</span>maptype<span class="token punctuation">,</span> h <span class="token operator">*</span>hmap<span class="token punctuation">,</span> key unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">,</span> val unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span> <span class="token punctuation">{</span>   hash <span class="token operator">:=</span> alg<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>hash0<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token keyword">if</span> h<span class="token punctuation">.</span>buckets <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>   h<span class="token punctuation">.</span>buckets <span class="token operator">=</span> <span class="token function">newarray</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>bucket<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>   <span class="token punctuation">}</span> again<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//根据低8位hash值找到对应的buckets</span> bucket <span class="token operator">:=</span> hash <span class="token operator">&amp;</span> <span class="token punctuation">(</span> <span class="token function">uintptr</span><span class="token punctuation">(</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>h<span class="token punctuation">.</span>B <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> b <span class="token operator">:=</span> <span class="token punctuation">(</span>bmap<span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>buckets<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">bucketuintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>bucketsize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//计算hash值的高8位</span> top <span class="token operator">:=</span> <span class="token function">uint8</span><span class="token punctuation">(</span>hash <span class="token operator">>></span> <span class="token punctuation">(</span>sys<span class="token punctuation">.</span>PtrSize<span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//遍历每一个bucket 对比所有tophash是否与top相等</span> <span class="token comment" spellcheck="true">//若找到空tophash位置则标记为可插入位置</span> <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bucketCnt<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span> <span class="token keyword">if</span> b<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> top <span class="token punctuation">{</span> <span class="token keyword">if</span> b<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> empty <span class="token operator">&amp;&amp;</span> inserti <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> inserti <span class="token operator">=</span> <span class="token operator">&amp;</span>b<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token keyword">continue</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//当前tophash对应的key位置可以根据bucket的偏移量找到</span> k2 <span class="token operator">:=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token operator">+</span>i<span class="token operator">*</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token operator">!</span>alg<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> k2<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">continue</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//找到符合tophash对应的key位置</span> <span class="token function">typedmemmove</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>elem<span class="token punctuation">,</span> v2<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token keyword">goto</span> done <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//若overflow为空则break</span> ovf <span class="token operator">:=</span> b<span class="token punctuation">.</span><span class="token function">overflow</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// did not find mapping for key. Allocate new cell &amp; add entry.</span> <span class="token keyword">if</span> <span class="token function">float32</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token operator">>=</span> loadFactor<span class="token operator">*</span> <span class="token function">float32</span><span class="token punctuation">(</span><span class="token punctuation">(</span> <span class="token function">uintptr</span><span class="token punctuation">(</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>h<span class="token punctuation">.</span>B<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>count <span class="token operator">>=</span> bucketCnt <span class="token punctuation">{</span> <span class="token function">hashGrow</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> h<span class="token punctuation">)</span> <span class="token keyword">goto</span> again <span class="token comment" spellcheck="true">// Growing the table invalidates everything, so try again</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// all current buckets are full, allocate a new one.</span> <span class="token keyword">if</span> inserti <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> newb <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>bmap<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">newobject</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>bucket<span class="token punctuation">)</span><span class="token punctuation">)</span> h<span class="token punctuation">.</span><span class="token function">setoverflow</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> b<span class="token punctuation">,</span> newb<span class="token punctuation">)</span> inserti <span class="token operator">=</span> <span class="token operator">&amp;</span>newb<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// store new key/value at insert position</span> kmem <span class="token operator">:=</span> <span class="token function">newobject</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>key<span class="token punctuation">)</span> vmem <span class="token operator">:=</span> <span class="token function">newobject</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>elem<span class="token punctuation">)</span> <span class="token function">typedmemmove</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>key<span class="token punctuation">,</span> insertk<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token function">typedmemmove</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>elem<span class="token punctuation">,</span> insertv<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token operator">*</span>inserti <span class="token operator">=</span> top h<span class="token punctuation">.</span>count<span class="token operator">++</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="删除-mapdelete"><a href="#删除-mapdelete" class="headerlink" title="删除 mapdelete"></a>删除 mapdelete</h5><p>删除某个key的操作与分配类似，由于hashmap的存储结构是数组+链表，所以真正删除key仅仅是将对应的slot设置为empty，并没有减少内存；如下：</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211117232020.png" alt="image-20211031152219956"></p><h5 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h5><p>map 扩容的时机：在向 map 插入新 key 的时候，会进行条件检测，符合下面这 2 个条件，就会触发扩容：</p><ol><li>装载因子超过阈值，源码里定义的阈值是 6.5。</li><li>overflow 的 bucket 数量过多：当 B 小于 15，也就是 bucket 总数 2^B 小于 2^15 时，如果 overflow 的 bucket 数量超过 2^B；当 B &gt;= 15，也就是 bucket 总数 2^B 大于等于 2^15，如果 overflow 的 bucket 数量超过 2^15。</li></ol><p>第 1 点：我们知道，每个 bucket 有 8 个空位，在没有溢出，且所有的桶都装满了的情况下，装载因子算出来的结果是 8。因此当装载因子超过 6.5 时，表明很多 bucket 都快要装满了，查找效率和插入效率都变低了。在这个时候进行扩容是有必要的。</p><p>第 2 点：是对第 1 点的补充。就是说在装载因子比较小的情况下，这时候 map 的查找和插入效率也很低，而第 1 点识别不出来这种情况。表面现象就是计算装载因子的分子比较小，即 map 里元素总数少，但是 bucket 数量多（真实分配的 bucket 数量多，包括大量的 overflow bucket）。</p><p>不难想像造成这种情况的原因：不停地插入、删除元素。先插入很多元素，导致创建了很多 bucket，但是装载因子达不到第 1 点的临界值，未触发扩容来缓解这种情况。之后，删除元素降低元素总数量，再插入很多元素，导致创建很多的 overflow bucket，但就是不会触犯第 1 点的规定，你能拿我怎么办？overflow bucket 数量太多，导致 key 会很分散，查找插入效率低得吓人，因此出台第 2 点规定。这就像是一座空城，房子很多，但是住户很少，都分散了，找起人来很困难。</p><p>对于条件 1，元素太多，而 bucket 数量太少，很简单：将 B 加 1，bucket 最大数量（2^B）直接变成原来 bucket 数量的 2 倍。于是，就有新老 bucket 了。注意，这时候元素都在老 bucket 里，还没迁移到新的 bucket 来。而且，新 bucket 只是最大数量变为原来最大数量（2^B）的 2 倍（2^B * 2）。</p><p>对于条件 2，其实元素没那么多，但是 overflow bucket 数特别多，说明很多 bucket 都没装满。解决办法就是开辟一个新 bucket 空间，将老 bucket 中的元素移动到新 bucket，使得同一个 bucket 中的 key 排列地更紧密。这样，原来，在 overflow bucket 中的 key 可以移动到 bucket 中来。结果是节省空间，提高 bucket 利用率，map 的查找和插入效率自然就会提升。</p><p>首先，判断是否需要扩容的逻辑是</p><pre><code> func (h *hmap) growing() bool {     return h.oldbuckets != nil }</code></pre><p> oldbuckets不为空，说明还没有搬迁完毕，还得继续搬。</p><p>由于 map 扩容需要将原有的 key/value 重新搬迁到新的内存地址，如果有大量的 key/value 需要搬迁，会非常影响性能。因此 Go map 的扩容采取了一种称为“渐进式”地方式，原有的 key 并不会一次性搬迁完毕，每次最多只会搬迁 2 个 bucket。</p><p>hashGrow()函数实际上并没有真正地“搬迁”，它只是分配好了新的 buckets，并将老的 buckets 挂到了 oldbuckets 字段上。真正搬迁 buckets 的动作在 growWork()函数中，而调用 growWork()函数的动作是在 mapassign 和 mapdelete 函数中。也就是插入或修改、删除 key 的时候，都会尝试进行搬迁 buckets 的工作。先检查 oldbuckets 是否搬迁完毕，具体来说就是检查 oldbuckets 是否为 nil。也就是说在插入和删除前，会判断老桶是否已经迁移到新桶中，还没迁移先迁移，迁移完成再进行插入和删除。</p><p>在分配assign逻辑中，当没有位置给key使用，而且满足测试条件(装载因子&gt;6.5或有太多溢出桶)时，会触发hashGrow逻辑：</p><pre class="line-numbers language-go"><code class="language-go"> <span class="token keyword">func</span> <span class="token function">hashGrow</span><span class="token punctuation">(</span>t <span class="token operator">*</span>maptype<span class="token punctuation">,</span> h <span class="token operator">*</span>hmap<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//判断是否需要sameSizeGrow，否则"真"扩</span>   <span class="token comment" spellcheck="true">// B+1 相当于是原来 2 倍的空间</span>     bigger <span class="token operator">:=</span> <span class="token function">uint8</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// 对应条件 2</span>     <span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">overLoadFactor</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">,</span> h<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// 进行等量的内存扩容，所以 B 不变</span>         bigger <span class="token operator">=</span> <span class="token number">0</span>         h<span class="token punctuation">.</span>flags <span class="token operator">|=</span> sameSizeGrow     <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">// 下面将buckets复制给oldbuckets</span>     oldbuckets <span class="token operator">:=</span> h<span class="token punctuation">.</span>buckets   <span class="token comment" spellcheck="true">//申请新的 buckets 空间</span>     newbuckets <span class="token operator">:=</span> <span class="token function">newarray</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>bucket<span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>B<span class="token operator">+</span>bigger<span class="token punctuation">)</span><span class="token punctuation">)</span>     flags <span class="token operator">:=</span> h<span class="token punctuation">.</span>flags <span class="token operator">&amp;^</span> <span class="token punctuation">(</span>iterator <span class="token operator">|</span> oldIterator<span class="token punctuation">)</span>     <span class="token keyword">if</span> h<span class="token punctuation">.</span>flags<span class="token operator">&amp;</span>iterator <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>         flags <span class="token operator">|=</span> oldIterator     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">// 更新hmap的变量</span>     h<span class="token punctuation">.</span>B <span class="token operator">+=</span> bigger     h<span class="token punctuation">.</span>flags <span class="token operator">=</span> flags     h<span class="token punctuation">.</span>oldbuckets <span class="token operator">=</span> oldbuckets     h<span class="token punctuation">.</span>buckets <span class="token operator">=</span> newbuckets   <span class="token comment" spellcheck="true">// 搬迁进度为 0</span>     h<span class="token punctuation">.</span>nevacuate <span class="token operator">=</span> <span class="token number">0</span>     h<span class="token punctuation">.</span>noverflow <span class="token operator">=</span> <span class="token number">0</span>         <span class="token comment" spellcheck="true">// 设置溢出桶</span>     <span class="token keyword">if</span> h<span class="token punctuation">.</span>overflow <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> h<span class="token punctuation">.</span>overflow<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>             <span class="token function">throw</span><span class="token punctuation">(</span><span class="token string">"overflow is not nil"</span><span class="token punctuation">)</span>         <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 交换溢出桶</span>         h<span class="token punctuation">.</span>overflow<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">.</span>overflow<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>         h<span class="token punctuation">.</span>overflow<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">nil</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>真正执行搬迁工作的 growWork() 函数。</p><pre class="line-numbers language-go"><code class="language-go">  <span class="token keyword">func</span> <span class="token function">growWork</span><span class="token punctuation">(</span>t <span class="token operator">*</span>maptype<span class="token punctuation">,</span> h <span class="token operator">*</span>hmap<span class="token punctuation">,</span> bucket <span class="token builtin">uintptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 确认搬迁老的 bucket 对应正在使用的 bucket</span>  <span class="token function">evacuate</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> h<span class="token punctuation">,</span> bucket<span class="token operator">&amp;</span>h<span class="token punctuation">.</span><span class="token function">oldbucketmask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 再搬迁一个 bucket，以加快搬迁进程</span>  <span class="token keyword">if</span> h<span class="token punctuation">.</span><span class="token function">growing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">evacuate</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> h<span class="token punctuation">,</span> h<span class="token punctuation">.</span>nevacuate<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>搬迁的关键函数 evacuate</p><p>evacuate 函数每次只完成一个 bucket 的搬迁工作，因此要遍历完此 bucket 的所有的 cell，将有值的 cell copy 到新的地方。bucket 还会链接 overflow bucket，它们同样需要搬迁。因此会有 2 层循环，外层遍历 bucket 和 overflow bucket，内层遍历 bucket 的所有 cell。</p><h5 id="迁移过程"><a href="#迁移过程" class="headerlink" title="迁移过程"></a>迁移过程</h5><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211117232043.png" alt="image-20211031160024453"></p><p><img src="file:///Users/zhulingang/Library/Application%20Support/typora-user-images/image-20211031160225367.png?lastModify=1637162079" alt="image-20211031160225367"></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211117232055.png" alt="image-20211031160436692"></p><p><img src="file:///Users/zhulingang/Library/Application%20Support/typora-user-images/image-20211031160447286.png?lastModify=1637162079" alt="image-20211031160447286"></p><pre class="line-numbers language-go"><code class="language-go"> <span class="token keyword">func</span> <span class="token function">evacuate</span><span class="token punctuation">(</span>t <span class="token operator">*</span>maptype<span class="token punctuation">,</span> h <span class="token operator">*</span>hmap<span class="token punctuation">,</span> oldbucket <span class="token builtin">uintptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 定位老的 bucket 地址</span> b <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>bmap<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>oldbuckets<span class="token punctuation">,</span> oldbucket<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>bucketsize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 结果是 2^B，如 B = 5，结果为32</span> newbit <span class="token operator">:=</span> h<span class="token punctuation">.</span><span class="token function">noldbuckets</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// key 的哈希函数</span> alg <span class="token operator">:=</span> t<span class="token punctuation">.</span>key<span class="token punctuation">.</span>alg <span class="token comment" spellcheck="true">// 如果 b 没有被搬迁过</span> <span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">evacuated</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">var</span> <span class="token punctuation">(</span> <span class="token comment" spellcheck="true">// 表示bucket 移动的目标地址</span> x<span class="token punctuation">,</span> y <span class="token operator">*</span>bmap <span class="token comment" spellcheck="true">// 指向 x,y 中的 key/val</span> xi<span class="token punctuation">,</span> yi <span class="token builtin">int</span> <span class="token comment" spellcheck="true">// 指向 x，y 中的 key</span> xk<span class="token punctuation">,</span> yk unsafe<span class="token punctuation">.</span>Pointer <span class="token comment" spellcheck="true">// 指向 x，y 中的 value</span> xv<span class="token punctuation">,</span> yv unsafe<span class="token punctuation">.</span>Pointer <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 默认是等 size 扩容，前后 bucket 序号不变</span> <span class="token comment" spellcheck="true">// 使用 x 来进行搬迁</span> x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>bmap<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>buckets<span class="token punctuation">,</span> oldbucket<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>bucketsize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> xi <span class="token operator">=</span> <span class="token number">0</span> xk <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token punctuation">)</span> xv <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>xk<span class="token punctuation">,</span> bucketCnt<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token punctuation">)</span>、 <span class="token comment" spellcheck="true">// 如果不是等 size 扩容，前后 bucket 序号有变</span> <span class="token comment" spellcheck="true">// 使用 y 来进行搬迁</span> <span class="token keyword">if</span> <span class="token operator">!</span>h<span class="token punctuation">.</span><span class="token function">sameSizeGrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// y 代表的 bucket 序号增加了 2^B</span> y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>bmap<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>buckets<span class="token punctuation">,</span> <span class="token punctuation">(</span>oldbucket<span class="token operator">+</span>newbit<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>bucketsize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> yi <span class="token operator">=</span> <span class="token number">0</span> yk <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token punctuation">)</span> yv <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>yk<span class="token punctuation">,</span> bucketCnt<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 遍历所有的 bucket，包括 overflow buckets</span> <span class="token comment" spellcheck="true">// b 是老的 bucket 地址</span> <span class="token keyword">for</span> <span class="token punctuation">;</span> b <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">;</span> b <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">overflow</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token punctuation">{</span> k <span class="token operator">:=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token punctuation">)</span> v <span class="token operator">:=</span> <span class="token function">add</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> bucketCnt<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 遍历 bucket 中的所有 cell</span> <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bucketCnt<span class="token punctuation">;</span> i<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>valuesize<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 当前 cell 的 top hash 值</span> top <span class="token operator">:=</span> b<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 如果 cell 为空，即没有 key</span> <span class="token keyword">if</span> top <span class="token operator">==</span> empty <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 那就标志它被"搬迁"过</span> b<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> evacuatedEmpty <span class="token comment" spellcheck="true">// 继续下个 cell</span> <span class="token keyword">continue</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 正常不会出现这种情况</span> <span class="token comment" spellcheck="true">// 未被搬迁的 cell 只可能是 empty 或是</span> <span class="token comment" spellcheck="true">// 正常的 top hash（大于 minTopHash）</span> <span class="token keyword">if</span> top <span class="token operator">&lt;</span> minTopHash <span class="token punctuation">{</span> <span class="token function">throw</span><span class="token punctuation">(</span><span class="token string">"bad map state"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> k2 <span class="token operator">:=</span> k <span class="token comment" spellcheck="true">// 如果 key 是指针，则解引用</span> <span class="token keyword">if</span> t<span class="token punctuation">.</span>indirectkey <span class="token punctuation">{</span> k2 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span><span class="token punctuation">(</span>k2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 默认使用 X，等量扩容</span> useX <span class="token operator">:=</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">// 如果不是等量扩容</span> <span class="token keyword">if</span> <span class="token operator">!</span>h<span class="token punctuation">.</span><span class="token function">sameSizeGrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 计算 hash 值，和 key 第一次写入时一样</span> hash <span class="token operator">:=</span> alg<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>k2<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>hash0<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 如果有协程正在遍历 map</span> <span class="token keyword">if</span> h<span class="token punctuation">.</span>flags<span class="token operator">&amp;</span>iterator <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 如果出现 相同的 key 值，算出来的 hash 值不同</span> <span class="token keyword">if</span> <span class="token operator">!</span>t<span class="token punctuation">.</span>reflexivekey <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>alg<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>k2<span class="token punctuation">,</span> k2<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 只有在 float 变量的 NaN() 情况下会出现</span> <span class="token keyword">if</span> top<span class="token operator">&amp;</span><span class="token number">1</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 第 B 位置 1</span> hash <span class="token operator">|=</span> newbit <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 第 B 位置 0</span> hash <span class="token operator">&amp;^=</span> newbit <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 取高 8 位作为 top hash 值</span> top <span class="token operator">=</span> <span class="token function">uint8</span><span class="token punctuation">(</span>hash <span class="token operator">>></span> <span class="token punctuation">(</span>sys<span class="token punctuation">.</span>PtrSize<span class="token operator">*</span><span class="token number">8</span> <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">if</span> top <span class="token operator">&lt;</span> minTopHash <span class="token punctuation">{</span> top <span class="token operator">+=</span> minTopHash <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 取决于新哈希值的 oldB+1 位是 0 还是 1</span> <span class="token comment" spellcheck="true">// 详细看后面的文章</span> useX <span class="token operator">=</span> hash<span class="token operator">&amp;</span>newbit <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 如果 key 搬到 X 部分</span> <span class="token keyword">if</span> useX <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 标志老的 cell 的 top hash 值，表示搬移到 X 部分</span> b<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> evacuatedX <span class="token comment" spellcheck="true">// 如果 xi 等于 8，说明要溢出了</span> <span class="token keyword">if</span> xi <span class="token operator">==</span> bucketCnt <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 新建一个 bucket</span> newx <span class="token operator">:=</span> h<span class="token punctuation">.</span><span class="token function">newoverflow</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> x<span class="token punctuation">)</span> x <span class="token operator">=</span> newx <span class="token comment" spellcheck="true">// xi 从 0 开始计数</span> xi <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">// xk 表示 key 要移动到的位置</span> xk <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// xv 表示 value 要移动到的位置</span> xv <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>xk<span class="token punctuation">,</span> bucketCnt<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 设置 top hash 值</span> x<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span>xi<span class="token punctuation">]</span> <span class="token operator">=</span> top <span class="token comment" spellcheck="true">// key 是指针</span> <span class="token keyword">if</span> t<span class="token punctuation">.</span>indirectkey <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 将原 key（是指针）复制到新位置</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span><span class="token punctuation">(</span>xk<span class="token punctuation">)</span> <span class="token operator">=</span> k2 <span class="token comment" spellcheck="true">// copy pointer</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 将原 key（是值）复制到新位置</span> <span class="token function">typedmemmove</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>key<span class="token punctuation">,</span> xk<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// copy value</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// value 是指针，操作同 key</span> <span class="token keyword">if</span> t<span class="token punctuation">.</span>indirectvalue <span class="token punctuation">{</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span><span class="token punctuation">(</span>xv<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token function">typedmemmove</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>elem<span class="token punctuation">,</span> xv<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 定位到下一个 cell</span> xi<span class="token operator">++</span> xk <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>xk<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token punctuation">)</span> xv <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>xv<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>valuesize<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// key 搬到 Y 部分，操作同 X 部分</span> <span class="token comment" spellcheck="true">// ……</span> <span class="token comment" spellcheck="true">// 省略了这部分，操作和 X 部分相同</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 如果没有协程在使用老的 buckets，就把老 buckets 清除掉，帮助gc</span> <span class="token keyword">if</span> h<span class="token punctuation">.</span>flags<span class="token operator">&amp;</span>oldIterator <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span> b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>bmap<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>oldbuckets<span class="token punctuation">,</span> oldbucket<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>bucketsize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 只清除bucket 的 key,value 部分，保留 top hash 部分，指示搬迁状态</span> <span class="token keyword">if</span> t<span class="token punctuation">.</span>bucket<span class="token punctuation">.</span>kind<span class="token operator">&amp;</span>kindNoPointers <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span> <span class="token function">memclrHasPointers</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>bucketsize<span class="token punctuation">)</span><span class="token operator">-</span>dataOffset<span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token function">memclrNoHeapPointers</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>bucketsize<span class="token punctuation">)</span><span class="token operator">-</span>dataOffset<span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 更新搬迁进度</span> <span class="token comment" spellcheck="true">// 如果此次搬迁的 bucket 等于当前进度</span> <span class="token keyword">if</span> oldbucket <span class="token operator">==</span> h<span class="token punctuation">.</span>nevacuate <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 进度加 1</span> h<span class="token punctuation">.</span>nevacuate <span class="token operator">=</span> oldbucket <span class="token operator">+</span> <span class="token number">1</span> <span class="token comment" spellcheck="true">// Experiments suggest that 1024 is overkill by at least an order of magnitude.</span> <span class="token comment" spellcheck="true">// Put it in there as a safeguard anyway, to ensure O(1) behavior.</span> <span class="token comment" spellcheck="true">// 尝试往后看 1024 个 bucket</span> stop <span class="token operator">:=</span> h<span class="token punctuation">.</span>nevacuate <span class="token operator">+</span> <span class="token number">1024</span> <span class="token keyword">if</span> stop <span class="token operator">></span> newbit <span class="token punctuation">{</span> stop <span class="token operator">=</span> newbit <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 寻找没有搬迁的 bucket</span> <span class="token keyword">for</span> h<span class="token punctuation">.</span>nevacuate <span class="token operator">!=</span> stop <span class="token operator">&amp;&amp;</span> <span class="token function">bucketEvacuated</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> h<span class="token punctuation">,</span> h<span class="token punctuation">.</span>nevacuate<span class="token punctuation">)</span> <span class="token punctuation">{</span> h<span class="token punctuation">.</span>nevacuate<span class="token operator">++</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 现在 h.nevacuate 之前的 bucket 都被搬迁完毕</span> <span class="token comment" spellcheck="true">// 所有的 buckets 搬迁完毕</span> <span class="token keyword">if</span> h<span class="token punctuation">.</span>nevacuate <span class="token operator">==</span> newbit <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 清除老的 buckets</span> h<span class="token punctuation">.</span>oldbuckets <span class="token operator">=</span> <span class="token boolean">nil</span> <span class="token comment" spellcheck="true">// 清除老的 overflow bucket</span> <span class="token comment" spellcheck="true">// 回忆一下：[0] 表示当前 overflow bucket</span> <span class="token comment" spellcheck="true">// [1] 表示 old overflow bucket</span> <span class="token keyword">if</span> h<span class="token punctuation">.</span>extra <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> h<span class="token punctuation">.</span>extra<span class="token punctuation">.</span>overflow<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">nil</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 清除正在扩容的标志位</span> h<span class="token punctuation">.</span>flags <span class="token operator">&amp;^=</span> sameSizeGrow <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>源码里提到 X, Y part，其实就是我们说的如果是扩容到原来的 2 倍，桶的数量是原来的 2 倍，前一半桶被称为 X part，后一半桶被称为 Y part。一个 bucket 中的 key 可能会分裂落到 2 个桶，一个位于 X part，一个位于 Y part。所以在搬迁一个 cell 之前，需要知道这个 cell 中的 key 是落到哪个 Part。很简单，重新计算 cell 中 key 的 hash，并向前“多看”一位，决定落入哪个 Part，这个前面也说得很详细了。</p><p>扩容前后的变化。</p><p>扩容前，B = 2，共有 4 个 buckets，lowbits 表示 hash 值的低位。假设我们不关注其他 buckets 情况，专注在 2 号 bucket。并且假设 overflow 太多，触发了等量扩容（对应于前面的条件 2）。</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211117232118.png" alt="image-20211031164143131"></p><p>假设触发了 2 倍的扩容，那么扩容完成后，老 buckets 中的 key 分裂到了 2 个 新的 bucket。一个在 x part，一个在 y 的 part。依据是 hash 的 lowbits。新 map 中 0-3称为 x part， 4-7称为 y part。</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211117232131.png" alt="image-20211031164216223"></p><h5 id="minTopHash："><a href="#minTopHash：" class="headerlink" title="minTopHash："></a>minTopHash：</h5><p>再来说一下minTopHash：</p><pre class="line-numbers language-go"><code class="language-go"> <span class="token comment" spellcheck="true">// 计算tophash值</span> <span class="token keyword">func</span> <span class="token function">tophash</span><span class="token punctuation">(</span>hash <span class="token builtin">uintptr</span><span class="token punctuation">)</span> <span class="token builtin">uint8</span> <span class="token punctuation">{</span>     top <span class="token operator">:=</span> <span class="token function">uint8</span><span class="token punctuation">(</span>hash <span class="token operator">>></span> <span class="token punctuation">(</span>sys<span class="token punctuation">.</span>PtrSize<span class="token operator">*</span><span class="token number">8</span> <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">//增加一个minTopHash(默认最小值为5)       </span>     <span class="token keyword">if</span> top <span class="token operator">&lt;</span> minTopHash <span class="token punctuation">{</span>         top <span class="token operator">+=</span> minTopHash     <span class="token punctuation">}</span>     <span class="token keyword">return</span> top <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当一个cell的tophash值小于minTopHash时，标志该cell的迁移状态。因为这个状态值是放在tophash数组里，为了和正常的哈希值区分开，会给key计算出来的哈希值一个增量：minTopHash，这样就能区分正常的tophash值和表示状态的哈希值。</p><pre class="line-numbers language-go"><code class="language-go"> emptyRest      <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">//这个单元格是空的，在更高的索引或溢出处不再有非空单元格</span> emptyOne       <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment" spellcheck="true">//单元是空的</span> evacuatedX     <span class="token operator">=</span> <span class="token number">2</span> <span class="token comment" spellcheck="true">// key/elem有效.  实体已经被搬迁到新的buckt的前半部分</span> evacuatedY     <span class="token operator">=</span> <span class="token number">3</span> <span class="token comment" spellcheck="true">//同上，实体已经被搬迁到新的buckt的后半部分</span> evacuatedEmpty <span class="token operator">=</span> <span class="token number">4</span> <span class="token comment" spellcheck="true">// 单元为空，以搬迁完成</span> minTopHash     <span class="token operator">=</span> <span class="token number">5</span> <span class="token comment" spellcheck="true">// 正常填充单元格的最小tophash</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>源码中通过第一个tophash值来判断bucket是否搬迁完成：</p><pre class="line-numbers language-go"><code class="language-go"> <span class="token keyword">func</span> <span class="token function">evacuated</span><span class="token punctuation">(</span>b <span class="token operator">*</span>bmap<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//由于搬迁过程是一个循环过程，只要桶中第一个元素搬迁完成，后面肯定搬完了</span>     h <span class="token operator">:=</span> b<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>     <span class="token keyword">return</span> h <span class="token operator">></span> emptyOne <span class="token operator">&amp;&amp;</span> h <span class="token operator">&lt;</span> minTopHash <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>在Go语言中，列表使用 container/list 包来实现，内部的实现原理是双链表，列表能够高效地进行任意位置的元素插入和删除操作。</p><h4 id="初始化-1"><a href="#初始化-1" class="headerlink" title="初始化"></a>初始化</h4><ol><li>通过 container/list 包的 New() 函数初始化 list</li></ol><pre class="line-numbers language-go"><code class="language-go"> 变量名 <span class="token operator">:=</span> list<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>通过 var 关键字声明初始化 list</li></ol><pre class="line-numbers language-go"><code class="language-go"> <span class="token keyword">var</span> 变量名 list<span class="token punctuation">.</span>List<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>列表与切片和 map 不同的是，列表并没有具体元素类型的限制，因此，列表的元素可以是任意类型，这既带来了便利，也引来一些问题，例如给列表中放入了一个 interface{} 类型的值，取出值后，如果要将 interface{} 转换为其他类型将会发生宕机。</p><h4 id="插入元素"><a href="#插入元素" class="headerlink" title="插入元素"></a>插入元素</h4><p>双链表支持从队列前方或后方插入元素，分别对应的方法是 PushFront 和 PushBack。</p><pre class="line-numbers language-go"><code class="language-go"> l <span class="token operator">:=</span> list<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span> l<span class="token punctuation">.</span><span class="token function">PushBack</span><span class="token punctuation">(</span><span class="token string">"fist"</span><span class="token punctuation">)</span> l<span class="token punctuation">.</span><span class="token function">PushFront</span><span class="token punctuation">(</span><span class="token number">67</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>     tmepList<span class="token punctuation">.</span><span class="token function">PushBack</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>     fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>tmepList<span class="token punctuation">)</span>   <span class="token punctuation">}</span>   first <span class="token operator">:=</span> tmepList<span class="token punctuation">.</span><span class="token function">PushFront</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>   fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span>   tmepList<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span>   fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>tmepList<span class="token punctuation">)</span>   fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>tmepList<span class="token punctuation">.</span><span class="token function">Front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>双链表支持从队列前方或后方插入元素，分别对应的方法是 PushFront 和 PushBack。</p><p>这两个方法都会返回一个 <em>list.Element 结构，如果在以后的使用中需要删除插入的元素，则只能通过 </em>list.Element 配合 Remove() 方法进行删除，这种方法可以让删除更加效率化</p><p><img src="file:///Users/zhulingang/Library/Application%20Support/typora-user-images/image-20211024142024983.png?lastModify=1637162079" alt="image-20211024142024983"></p><h4 id="从列表中删除元素"><a href="#从列表中删除元素" class="headerlink" title="从列表中删除元素"></a>从列表中删除元素</h4><p>列表插入函数的返回值会提供一个 *list.Element 结构，这个结构记录着列表元素的值以及与其他节点之间的关系等信息，从列表中删除元素时，需要用到这个结构进行快速删除。</p><pre class="line-numbers language-go"><code class="language-go"> <span class="token keyword">package</span> main <span class="token keyword">import</span> <span class="token string">"container/list"</span> <span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     l <span class="token operator">:=</span> list<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// 尾部添加</span>     l<span class="token punctuation">.</span><span class="token function">PushBack</span><span class="token punctuation">(</span><span class="token string">"canon"</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// 头部添加</span>     l<span class="token punctuation">.</span><span class="token function">PushFront</span><span class="token punctuation">(</span><span class="token number">67</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// 尾部添加后保存元素句柄</span>     element <span class="token operator">:=</span> l<span class="token punctuation">.</span><span class="token function">PushBack</span><span class="token punctuation">(</span><span class="token string">"fist"</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// 在fist之后添加high</span>     l<span class="token punctuation">.</span><span class="token function">InsertAfter</span><span class="token punctuation">(</span><span class="token string">"high"</span><span class="token punctuation">,</span> element<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// 在fist之前添加noon</span>     l<span class="token punctuation">.</span><span class="token function">InsertBefore</span><span class="token punctuation">(</span><span class="token string">"noon"</span><span class="token punctuation">,</span> element<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// 使用</span>     l<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211117232202.png" alt="image-20211024142144799"></p><h4 id="遍历列表"><a href="#遍历列表" class="headerlink" title="遍历列表"></a>遍历列表</h4><pre class="line-numbers language-go"><code class="language-go"> l <span class="token operator">:=</span> list<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 尾部添加</span> l<span class="token punctuation">.</span><span class="token function">PushBack</span><span class="token punctuation">(</span><span class="token string">"canon"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 头部添加</span> l<span class="token punctuation">.</span><span class="token function">PushFront</span><span class="token punctuation">(</span><span class="token number">67</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token operator">:=</span> l<span class="token punctuation">.</span><span class="token function">Front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">;</span> i <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>Value<span class="token punctuation">)</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="容器遍历"><a href="#容器遍历" class="headerlink" title="容器遍历"></a>容器遍历</h3><p>主要通过for-range语法来进行遍历</p><pre class="line-numbers language-go"><code class="language-go"> <span class="token comment" spellcheck="true">//遍历数组</span> students3 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> students <span class="token punctuation">{</span>   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//遍历切片</span> slicez <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span> <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> slicez <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//k为下标</span>   fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//遍历字典</span> map3 <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>   <span class="token number">1</span><span class="token punctuation">:</span><span class="token string">"ss"</span><span class="token punctuation">,</span>   <span class="token number">2</span><span class="token punctuation">:</span><span class="token string">"sss"</span><span class="token punctuation">,</span>   <span class="token number">3</span><span class="token punctuation">:</span><span class="token string">"dd"</span><span class="token punctuation">,</span> <span class="token punctuation">}</span> <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> map3 <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//k为键值，v为对应值</span>   fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 后端 </tag>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go Contex</title>
      <link href="/2021/11/18/go-contex/"/>
      <url>/2021/11/18/go-contex/</url>
      
        <content type="html"><![CDATA[<h1 id="Go-Contex"><a href="#Go-Contex" class="headerlink" title="Go Contex"></a>Go Contex</h1><h2 id="Contex"><a href="#Contex" class="headerlink" title="Contex"></a>Contex</h2><p>context包能够提供一个请求从API请求边界到各goroutine的请求域数据传递、取消信号及截至时间等能力。详细原理请看下文。</p><p>在 Go 语言中 context 包容许您传递一个 “context” 到您的程序。Context 如超时或截止日期（deadline）或通道，来指示中止运行和返回。例如，若是您正在执行一个 web 请求或运行一个系统命令，定义一个超时对生产级系统一般是个好主意。由于，若是您依赖的API运行缓慢，你不但愿在系统上备份（back up）请求，由于它可能最终会增长负载并下降全部请求的执行效率。致使级联效应。这是超时或截止日期 context 派上用场的地方。</p><h3 id="设计原理"><a href="#设计原理" class="headerlink" title="设计原理"></a>设计原理</h3><p>Go 语言中的每个请求的都是经过一个单独的 Goroutine 进行处理的，HTTP/RPC 请求的处理器每每都会启动新的 Goroutine 访问数据库和 RPC 服务，咱们可能会建立多个 Goroutine 来处理一次请求，而 <code>Context</code> 的主要做用就是在不一样的 Goroutine 之间同步请求特定的数据、取消信号以及处理请求的截止日期。</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211118000157.png" alt="image-20211031173219424"></p><p>每个 <code>Context</code> 都会从最顶层的 Goroutine 一层一层传递到最下层，这也是 Golang 中上下文最多见的使用方式，若是没有 <code>Context</code>，当上层执行的操做出现错误时，下层其实不会收到错误而是会继续执行下去。</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211118000252.png" alt="image-20211031173256610"></p><p>当最上层的 Goroutine 由于某些缘由执行失败时，下两层的 Goroutine 因为没有接收到这个信号因此会继续工做；可是当咱们正确地使用 <code>Context</code> 时，就能够在下层及时停掉无用的工做减小额外资源的消耗：</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211118000334.png" alt="image-20211031173507293"></p><p>这其实就是 Golang 中上下文的最大做用，在不一样 Goroutine 之间对信号进行同步避免对计算资源的浪费，与此同时 <code>Context</code> 还能携带以请求为做用域的键值对信息。</p><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> Context <span class="token keyword">interface</span> <span class="token punctuation">{</span> <span class="token function">Deadline</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>deadline time<span class="token punctuation">.</span>Time<span class="token punctuation">,</span> ok <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token function">Value</span><span class="token punctuation">(</span>key <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>context.Context</code> 是 Go 语言在 1.7 版本中引入标准库的接口1，该接口定义了四个须要实现的方法，其中包括：</p><ul><li><p><code>Deadline</code> — 返回 <code>context.Context</code> 被取消的时间，也就是完成工做的截止日期；</p></li><li><p><code>Done</code> — 返回一个 Channel，这个 Channel 会在当前工做完成或者上下文被取消以后关闭，屡次调用 <code>Done</code> 方法会返回同一个 Channel；</p></li><li><p><code>Err</code> — 返回 <code>context.Context</code> 结束的缘由，它只会在 <code>Done</code> 返回的 Channel 被关闭时才会返回非空的值；</p></li><li><ul><li>若是 <code>context.Context</code> 被取消，会返回 <code>Canceled</code> 错误；</li><li>若是 <code>context.Context</code> 超时，会返回 <code>DeadlineExceeded</code> 错误；</li></ul></li><li><p><code>Value</code> — 从 <code>context.Context</code> 中获取键对应的值，对于同一个上下文来讲，屡次调用 <code>Value</code> 并传入相同的 <code>Key</code> 会返回相同的结果，该方法能够用来传递请求特定的数据；</p></li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="建立context"><a href="#建立context" class="headerlink" title="建立context"></a>建立context</h4><p><code>context</code>包容许如下方式建立和得到<code>context</code>:</p><ul><li><code>context.Background()</code>：这个函数返回一个空 <code>context</code>。这只能用于高等级（在 main 或顶级请求处理中）。</li><li><code>context.TODO()</code>：这个函数也是建立一个空 <code>context</code>。也只能用于高等级或当您不肯定使用什么 context，或函数之后会更新以便接收一个 context 。这意味您（或维护者）计划未来要添加 context 到函数。</li></ul><p>其实咱们查看源代码。发现他俩都是经过 <code>new(emptyCtx)</code> 语句初始化的，它们是指向私有结构体 <code>context.emptyCtx</code> 的指针，这是最简单、最经常使用的上下文类型：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">var</span> <span class="token punctuation">(</span> background <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>emptyCtx<span class="token punctuation">)</span> todo       <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>emptyCtx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">type</span> emptyCtx <span class="token builtin">int</span><span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token operator">*</span>emptyCtx<span class="token punctuation">)</span> <span class="token function">Deadline</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>deadline time<span class="token punctuation">.</span>Time<span class="token punctuation">,</span> ok <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token operator">*</span>emptyCtx<span class="token punctuation">)</span> <span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token operator">*</span>emptyCtx<span class="token punctuation">)</span> <span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token operator">*</span>emptyCtx<span class="token punctuation">)</span> <span class="token function">Value</span><span class="token punctuation">(</span>key <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>e <span class="token operator">*</span>emptyCtx<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span> <span class="token keyword">switch</span> e <span class="token punctuation">{</span> <span class="token keyword">case</span> background<span class="token punctuation">:</span>  <span class="token keyword">return</span> <span class="token string">"context.Background"</span> <span class="token keyword">case</span> todo<span class="token punctuation">:</span>  <span class="token keyword">return</span> <span class="token string">"context.TODO"</span> <span class="token punctuation">}</span> <span class="token keyword">return</span> <span class="token string">"unknown empty Context"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上述代码，咱们不难发现 <code>context.emptyCtx</code> 经过返回 <code>nil</code> 实现了 <code>context.Context</code> 接口，它没有任何特殊的功能。</p><p>从源代码来看，<code>context.Background</code> 和 <code>context.TODO</code> 函数其实也只是互为别名，没有太大的差异。它们只是在使用和语义上稍有不一样：</p><ul><li><code>context.Background</code> 是上下文的默认值，全部其余的上下文都应该从它衍生（Derived）出来。</li><li><code>context.TODO</code> 应该只在不肯定应该使用哪一种上下文时使用；</li></ul><p>在多数状况下，若是当前函数没有上下文做为入参，咱们都会使用 <code>context.Background</code> 做为起始的上下文向下传递。</p><h4 id="context的继承衍生"><a href="#context的继承衍生" class="headerlink" title="context的继承衍生"></a>context的继承衍生</h4><p>有了如上的根Context，那么是如何衍生更多的子Context的呢？这就要靠context包为咱们提供的<code>With</code>系列的函数了。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">WithCancel</span><span class="token punctuation">(</span>parent Context<span class="token punctuation">)</span> <span class="token punctuation">(</span>ctx Context<span class="token punctuation">,</span> cancel CancelFunc<span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">WithDeadline</span><span class="token punctuation">(</span>parent Context<span class="token punctuation">,</span> deadline time<span class="token punctuation">.</span>Time<span class="token punctuation">)</span> <span class="token punctuation">(</span>Context<span class="token punctuation">,</span> CancelFunc<span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">WithTimeout</span><span class="token punctuation">(</span>parent Context<span class="token punctuation">,</span> timeout time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span> <span class="token punctuation">(</span>Context<span class="token punctuation">,</span> CancelFunc<span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">WithValue</span><span class="token punctuation">(</span>parent Context<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> Context<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这四个<code>With</code>函数，接收的都有一个partent参数，就是父Context，咱们要基于这个父Context建立出子Context的意思，这种方式能够理解为子Context对父Context的继承，也能够理解为基于父Context的衍生。</p><p>经过这些函数，就建立了一颗Context树，树的每一个节点均可以有任意多个子节点，节点层级能够有任意多个。</p><p><code>WithCancel</code>函数，传递一个父Context做为参数，返回子Context，以及一个取消函数用来取消Context。<code>WithDeadline</code>函数，和<code>WithCancel</code>差很少，它会多传递一个截止时间参数，意味着到了这个时间点，会自动取消Context，固然咱们也能够不等到这个时候，能够提早经过取消函数进行取消。</p><p><code>WithTimeout</code>和<code>WithDeadline</code>基本上同样，这个表示是超时自动取消，是多少时间后自动取消Context的意思。</p><p><code>WithValue</code>函数和取消Context无关，它是为了生成一个绑定了一个键值对数据的Context，这个绑定的数据能够经过<code>Context.Value</code>方法访问到</p><p>你们可能留意到，前三个函数都返回一个取消函数<code>CancelFunc</code>，这是一个函数类型，它的定义很是简单。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> CancelFunc <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这就是取消函数的类型，该函数能够取消一个Context，以及这个节点Context下全部的全部的Context，无论有多少层级。</p><h4 id="WithValue"><a href="#WithValue" class="headerlink" title="WithValue"></a>WithValue</h4><p><code>context</code> 包中的 <code>context.WithValue</code> 函数能从父上下文中建立一个子上下文，传值的子上下文使用 <code>context.valueCtx</code> 类型，咱们看一下源码：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">WithValue</span><span class="token punctuation">(</span>parent Context<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> Context <span class="token punctuation">{</span> <span class="token keyword">if</span> key <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"nil key"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token keyword">if</span> <span class="token operator">!</span>reflectlite<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Comparable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"key is not comparable"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token keyword">return</span> <span class="token operator">&amp;</span>valueCtx<span class="token punctuation">{</span>parent<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> valueCtx <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Context    key<span class="token punctuation">,</span> val <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>valueCtx<span class="token punctuation">)</span> <span class="token function">Value</span><span class="token punctuation">(</span>key <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> c<span class="token punctuation">.</span>key <span class="token operator">==</span> key <span class="token punctuation">{</span>        <span class="token keyword">return</span> c<span class="token punctuation">.</span>val    <span class="token punctuation">}</span>    <span class="token keyword">return</span> c<span class="token punctuation">.</span>Context<span class="token punctuation">.</span><span class="token function">Value</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数接收 context 并返回派生 context，其中值 val 与 key 关联，并经过 context 树与 context 一块儿传递。这意味着一旦得到带有值的 context，从中派生的任何 context 都会得到此值。</p><p>里添加键值对不是在原<code>context</code>结构体上直接添加，而是以此<code>context</code>作为父节点，重新创建一个新的<code>valueCtx</code>子节点，将键值对添加在子节点上，由此形成一条<code>context</code>链。获取<code>value</code>的过程就是在这条<code>context</code>链上由尾部上前搜寻：</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211118000624.png" alt="image-20211031175223944"></p><p><code>context.valueCtx</code> 结构体会将除了 <code>Value</code> 以外的 <code>Err</code>、<code>Deadline</code> 等方法代理到父上下文中，它只会响应 <code>context.valueCtx.Value</code> 方法。若是 <code>context.valueCtx</code> 中存储的键值对与 <code>context.valueCtx.Value</code> 方法中传入的参数不匹配，就会从父上下文中查找该键对应的值直到在某个父上下文中返回 <code>nil</code> 或者查找到对应的值。</p><p>举例</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> key <span class="token builtin">string</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span> ctx <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithValue</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token string">"asong"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"Golang梦工厂"</span><span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token string">"asong"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token string">"song"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">Get</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span>k key<span class="token punctuation">)</span>  <span class="token punctuation">{</span> <span class="token keyword">if</span> v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">Value</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="WithCancel"><a href="#WithCancel" class="headerlink" title="WithCancel"></a>WithCancel</h4><p><strong>cancelCtx</strong></p><p>cancelCtx结构体</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> cancelCtx <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Context    mu       sync<span class="token punctuation">.</span>Mutex            <span class="token comment" spellcheck="true">// protects following fields</span>    done     <span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">// created lazily, closed by first cancel call</span>    children <span class="token keyword">map</span><span class="token punctuation">[</span>canceler<span class="token punctuation">]</span><span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// set to nil by the first cancel call</span>    err      <span class="token builtin">error</span>                 <span class="token comment" spellcheck="true">// set to non-nil by the first cancel call</span><span class="token punctuation">}</span><span class="token keyword">type</span> canceler <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token function">cancel</span><span class="token punctuation">(</span>removeFromParent <span class="token builtin">bool</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span>    <span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>跟<code>valueCtx</code>类似，<code>cancelCtx</code>中也有一个<code>context</code>变量作为父节点；变量<code>done</code>表示一个<code>channel</code>，用来表示传递关闭信号；<code>children</code>表示一个<code>map</code>，存储了当前<code>context</code>节点下的子节点；<code>err</code>用于存储错误信息表示任务结束的原因。</p><p><code>cancelCtx</code>实现的方法：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>cancelCtx<span class="token punctuation">)</span> <span class="token function">cancel</span><span class="token punctuation">(</span>removeFromParent <span class="token builtin">bool</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"context: internal error: missing cancel error"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> c<span class="token punctuation">.</span>err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token comment" spellcheck="true">// already canceled</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 设置取消原因</span>    c<span class="token punctuation">.</span>err <span class="token operator">=</span> err    <span class="token comment" spellcheck="true">//设置一个关闭的channel或者将done channel关闭，用以发送关闭信号</span>    <span class="token keyword">if</span> c<span class="token punctuation">.</span>done <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        c<span class="token punctuation">.</span>done <span class="token operator">=</span> closedchan    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">close</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>done<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 将子节点context依次取消</span>    <span class="token keyword">for</span> child <span class="token operator">:=</span> <span class="token keyword">range</span> c<span class="token punctuation">.</span>children <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// NOTE: acquiring the child's lock while holding parent's lock.</span>        child<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    c<span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token boolean">nil</span>    c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> removeFromParent <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 将当前context节点从父节点上移除</span>        <span class="token function">removeChild</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> c<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>WithCancel</strong></p><p><code>WithCancel</code>函数用来创建一个可取消的<code>context</code>，即<code>cancelCtx</code>类型的<code>context</code>。<code>WithCancel</code>返回一个<code>context</code>和一个<code>CancelFunc</code>，调用<code>CancelFunc</code>即可触发<code>cancel</code>操作。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> CancelFunc <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">WithCancel</span><span class="token punctuation">(</span>parent Context<span class="token punctuation">)</span> <span class="token punctuation">(</span>ctx Context<span class="token punctuation">,</span> cancel CancelFunc<span class="token punctuation">)</span> <span class="token punctuation">{</span>    c <span class="token operator">:=</span> <span class="token function">newCancelCtx</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span>    <span class="token function">propagateCancel</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>c<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> c<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> Canceled<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// newCancelCtx returns an initialized cancelCtx.</span><span class="token keyword">func</span> <span class="token function">newCancelCtx</span><span class="token punctuation">(</span>parent Context<span class="token punctuation">)</span> cancelCtx <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 将parent作为父节点context生成一个新的子节点</span>    <span class="token keyword">return</span> cancelCtx<span class="token punctuation">{</span>Context<span class="token punctuation">:</span> parent<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">propagateCancel</span><span class="token punctuation">(</span>parent Context<span class="token punctuation">,</span> child canceler<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> parent<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// parent.Done()返回nil表明父节点以上的路径上没有可取消的context</span>        <span class="token keyword">return</span> <span class="token comment" spellcheck="true">// parent is never canceled</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 获取最近的类型为cancelCtx的祖先节点</span>    <span class="token keyword">if</span> p<span class="token punctuation">,</span> ok <span class="token operator">:=</span> <span class="token function">parentCancelCtx</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>        p<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> p<span class="token punctuation">.</span>err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// parent has already been canceled</span>            child<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>err<span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> p<span class="token punctuation">.</span>children <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                p<span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span>canceler<span class="token punctuation">]</span><span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 将当前子节点加入最近cancelCtx祖先节点的children中</span>            p<span class="token punctuation">.</span>children<span class="token punctuation">[</span>child<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>        p<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">select</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token operator">&lt;-</span>parent<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                child<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> parent<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">case</span> <span class="token operator">&lt;-</span>child<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">parentCancelCtx</span><span class="token punctuation">(</span>parent Context<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>cancelCtx<span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> c <span class="token operator">:=</span> parent<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token operator">*</span>cancelCtx<span class="token punctuation">:</span>            <span class="token keyword">return</span> c<span class="token punctuation">,</span> <span class="token boolean">true</span>        <span class="token keyword">case</span> <span class="token operator">*</span>timerCtx<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token operator">&amp;</span>c<span class="token punctuation">.</span>cancelCtx<span class="token punctuation">,</span> <span class="token boolean">true</span>        <span class="token keyword">case</span> <span class="token operator">*</span>valueCtx<span class="token punctuation">:</span>            parent <span class="token operator">=</span> c<span class="token punctuation">.</span>Context        <span class="token keyword">default</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之前说到<code>cancelCtx</code>取消时，会将后代节点中所有的<code>cancelCtx</code>都取消，<code>propagateCancel</code>即用来建立当前节点与祖先节点这个取消关联逻辑。</p><ol><li>如果<code>parent.Done()</code>返回<code>nil</code>，表明父节点以上的路径上没有可取消的<code>context</code>，不需要处理；</li><li>如果在<code>context</code>链上找到到<code>cancelCtx</code>类型的祖先节点，则判断这个祖先节点是否已经取消，如果已经取消就取消当前节点；否则将当前节点加入到祖先节点的<code>children</code>列表。</li><li>否则开启一个协程，监听<code>parent.Done()</code>和<code>child.Done()</code>，一旦<code>parent.Done()</code>返回的<code>channel</code>关闭，即<code>context</code>链中某个祖先节点<code>context</code>被取消，则将当前<code>context</code>也取消。</li></ol><p><code>context.propagateCancel</code> 的做用是在 <code>parent</code> 和 <code>child</code> 之间同步取消和结束的信号，保证在 <code>parent</code> 被取消时，<code>child</code> 也会收到对应的信号，不会发生状态不一致的问题。</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211118000638.png" alt="image-20211031200351280"></p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span> ctx<span class="token punctuation">,</span>cancel <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithCancel</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">defer</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">go</span> <span class="token function">Speak</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">Speak</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">)</span>  <span class="token punctuation">{</span> <span class="token keyword">for</span> <span class="token keyword">range</span> time<span class="token punctuation">.</span><span class="token function">Tick</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">select</span> <span class="token punctuation">{</span>  <span class="token keyword">case</span> <span class="token operator">&lt;-</span> ctx<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">return</span>  <span class="token keyword">default</span><span class="token punctuation">:</span>   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"balabalabalabala"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>咱们使用withCancel建立一个基于Background的ctx，而后启动一个讲话程序，每隔1s说一话，main函数在10s后执行cancel，那么speak检测到取消信号就会退出。</p><h4 id="timerCtx"><a href="#timerCtx" class="headerlink" title="timerCtx"></a>timerCtx</h4><p><code>timerCtx</code>是一种基于<code>cancelCtx</code>的<code>context</code>类型，从字面上就能看出，这是一种可以定时取消的<code>context</code>。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> timerCtx <span class="token keyword">struct</span> <span class="token punctuation">{</span>    cancelCtx    timer <span class="token operator">*</span>time<span class="token punctuation">.</span>Timer <span class="token comment" spellcheck="true">// Under cancelCtx.mu.</span>    deadline time<span class="token punctuation">.</span>Time<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>timerCtx<span class="token punctuation">)</span> <span class="token function">Deadline</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>deadline time<span class="token punctuation">.</span>Time<span class="token punctuation">,</span> ok <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> c<span class="token punctuation">.</span>deadline<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>timerCtx<span class="token punctuation">)</span> <span class="token function">cancel</span><span class="token punctuation">(</span>removeFromParent <span class="token builtin">bool</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    将内部的cancelCtx取消    c<span class="token punctuation">.</span>cancelCtx<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token keyword">if</span> removeFromParent <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Remove this timerCtx from its parent cancelCtx's children.</span>        <span class="token function">removeChild</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>cancelCtx<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> c<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> c<span class="token punctuation">.</span>timer <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        取消计时器        c<span class="token punctuation">.</span>timer<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        c<span class="token punctuation">.</span>timer <span class="token operator">=</span> <span class="token boolean">nil</span>    <span class="token punctuation">}</span>    c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>timerCtx</code>内部使用<code>cancelCtx</code>实现取消，另外使用定时器<code>timer</code>和过期时间<code>deadline</code>实现定时取消的功能。<code>timerCtx</code>在调用<code>cancel</code>方法，会先将内部的<code>cancelCtx</code>取消，如果需要则将自己从<code>cancelCtx</code>祖先节点上移除，最后取消计时器。</p><h4 id="WithDeadline"><a href="#WithDeadline" class="headerlink" title="WithDeadline"></a>WithDeadline</h4><p><code>WithDeadline</code>返回一个基于<code>parent</code>的可取消的<code>context</code>，并且其过期时间<code>deadline</code>不晚于所设置时间<code>d</code>。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">WithDeadline</span><span class="token punctuation">(</span>parent Context<span class="token punctuation">,</span> d time<span class="token punctuation">.</span>Time<span class="token punctuation">)</span> <span class="token punctuation">(</span>Context<span class="token punctuation">,</span> CancelFunc<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> cur<span class="token punctuation">,</span> ok <span class="token operator">:=</span> parent<span class="token punctuation">.</span><span class="token function">Deadline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token operator">&amp;&amp;</span> cur<span class="token punctuation">.</span><span class="token function">Before</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// The current deadline is already sooner than the new one.</span>        <span class="token keyword">return</span> <span class="token function">WithCancel</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    c <span class="token operator">:=</span> <span class="token operator">&amp;</span>timerCtx<span class="token punctuation">{</span>        cancelCtx<span class="token punctuation">:</span> <span class="token function">newCancelCtx</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">,</span>        deadline<span class="token punctuation">:</span>  d<span class="token punctuation">,</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 建立新建context与可取消context祖先节点的取消关联关系</span>    <span class="token function">propagateCancel</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> c<span class="token punctuation">)</span>    dur <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Until</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>    <span class="token keyword">if</span> dur <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">{</span>        c<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> DeadlineExceeded<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// deadline has already passed</span>        <span class="token keyword">return</span> c<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> c<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> Canceled<span class="token punctuation">)</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">defer</span> c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> c<span class="token punctuation">.</span>err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        c<span class="token punctuation">.</span>timer <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">AfterFunc</span><span class="token punctuation">(</span>dur<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            c<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> DeadlineExceeded<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> c<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> c<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> Canceled<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>如果父节点<code>parent</code>有过期时间并且过期时间早于给定时间<code>d</code>，那么新建的子节点<code>context</code>无需设置过期时间，使用<code>WithCancel</code>创建一个可取消的<code>context</code>即可；</li><li>否则，就要利用<code>parent</code>和过期时间<code>d</code>创建一个定时取消的<code>timerCtx</code>，并建立新建<code>context</code>与可取消<code>context</code>祖先节点的取消关联关系，接下来判断当前时间距离过期时间<code>d</code>的时长<code>dur</code>：</li><li>如果<code>dur</code>小于0，即当前已经过了过期时间，则直接取消新建的<code>timerCtx</code>，原因为<code>DeadlineExceeded</code>；</li><li>否则，为新建的<code>timerCtx</code>设置定时器，一旦到达过期时间即取消当前<code>timerCtx</code>。</li></ol><h4 id="WithTimeout"><a href="#WithTimeout" class="headerlink" title="WithTimeout"></a>WithTimeout</h4><p>与<code>WithDeadline</code>类似，<code>WithTimeout</code>也是创建一个定时取消的<code>context</code>，只不过<code>WithDeadline</code>是接收一个过期时间点，而<code>WithTimeout</code>接收一个相对当前时间的过期时长<code>timeout</code>:</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">WithTimeout</span><span class="token punctuation">(</span>parent Context<span class="token punctuation">,</span> timeout time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span> <span class="token punctuation">(</span>Context<span class="token punctuation">,</span> CancelFunc<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">WithDeadline</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>接下来咱们来看一个例子：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span> now <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> later<span class="token punctuation">,</span><span class="token boolean">_</span><span class="token operator">:=</span>time<span class="token punctuation">.</span><span class="token function">ParseDuration</span><span class="token punctuation">(</span><span class="token string">"10s"</span><span class="token punctuation">)</span> ctx<span class="token punctuation">,</span>cancel <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithDeadline</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>now<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>later<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">defer</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">go</span> <span class="token function">Monitor</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">20</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">Monitor</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">)</span>  <span class="token punctuation">{</span> <span class="token keyword">select</span> <span class="token punctuation">{</span> <span class="token keyword">case</span> <span class="token operator">&lt;-</span> ctx<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">case</span> <span class="token operator">&lt;-</span>time<span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token punctuation">:</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"stop monitor"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">go</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设置一个监控<code>goroutine</code>，使用WithTimeout建立一个基于Background的ctx，其会当前时间的10s后取消。验证结果以下：</p><pre class="line-numbers language-go"><code class="language-go">context deadline exceeded<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Context使用原则"><a href="#Context使用原则" class="headerlink" title="Context使用原则"></a>Context使用原则</h3><ul><li>context.Background 只应用在最高等级，做为全部派生 context 的根。</li><li>context 取消是建议性的，这些函数可能须要一些时间来清理和退出。</li><li>不要把<code>Context</code>放在结构体中，要以参数的方式传递。</li><li>以<code>Context</code>做为参数的函数方法，应该把<code>Context</code>做为第一个参数，放在第一位。</li><li>给一个函数方法传递Context的时候，不要传递nil，若是不知道传递什么，就使用context.TODO</li><li>Context的Value相关方法应该传递必须的数据，不要什么数据都使用这个传递。context.Value 应该不多使用，它不该该被用来传递可选参数。这使得 API 隐式的而且能够引发错误。取而代之的是，这些值应该做为参数传递。</li><li>Context是线程安全的，能够放心的在多个goroutine中传递。同一个Context能够传给使用其的多个goroutine，且Context可被多个goroutine同时安全访问。</li><li>Context 结构没有取消方法，由于只有派生 context 的函数才应该取消 context。</li></ul><p>Go 语言中的 <code>context.Context</code> 的主要做用仍是在多个 Goroutine 组成的树中同步取消信号以减小对资源的消耗和占用，虽然它也有传值的功能，可是这个功能咱们仍是不多用到。在真正使用传值的功能时咱们也应该很是谨慎，使用 <code>context.Context</code> 进行传递参数请求的全部参数一种很是差的设计，比较常见的使用场景是传递请求对应用户的认证令牌以及用于进行分布式追踪的请求 ID。</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 后端 </tag>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go内存管理与分配</title>
      <link href="/2021/11/18/gomemory-management-allocation/"/>
      <url>/2021/11/18/gomemory-management-allocation/</url>
      
        <content type="html"><![CDATA[<h1 id="Go内存管理与分配"><a href="#Go内存管理与分配" class="headerlink" title="Go内存管理与分配"></a>Go内存管理与分配</h1><h2 id="Go内存管理"><a href="#Go内存管理" class="headerlink" title="Go内存管理"></a>Go内存管理</h2><p><strong>Go内存会分成堆区（Heap）和栈区（Stack）两个部分</strong>，程序在运行期间可以主动从堆区申请内存空间，这些内存由内存分配器分配并由垃圾收集器负责回收。栈区的内存由编译器自动进行分配和释放，栈区中存储着函数的参数以及局部变量，它们会随着函数的创建而创建，函数的返回而销毁。</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211117233525.png" alt="image-20211021205604770"></p><p>为了方便自主管理内存，做法便是先向系统申请一块内存，然后将内存切割成小块，通过一定的内存分配算法管理内存。<br>以64位系统为例，Golang程序启动时会向系统申请的内存如下图所示：</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211117233539.png" alt="image-20211021210112540"></p><p>预申请的内存划分为spans、bitmap、arena三部分。其中arena即为所谓的堆区，应用中需要的内存从这里分配。其中spans和bitmap是为了管理arena区而存在的。</p><p>arena的大小为512G，为了方便管理把arena区域划分成一个个的page，每个page为8KB,一共有512GB/8KB个页；</p><p>spans区域存放span的指针，每个指针对应一个page，所以span区域的大小为(512GB/8KB)*指针大小8byte = 512M</p><p>bitmap区域大小也是通过arena计算出来，不过主要用于GC。</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211117233548.png" alt="image-20211114164211730"></p><h3 id="span"><a href="#span" class="headerlink" title="span"></a>span</h3><p>span是用于管理arena页的关键数据结构，每个span中包含1个或多个连续页，为了满足小对象分配，span中的一页会划分更小的粒度，而对于大对象比如超过页大小，则通过多页实现。</p><h4 id="class"><a href="#class" class="headerlink" title="class"></a>class</h4><p>划分了一系列class，每个class都代表一个固定大小的对象，以及每个span的大小</p><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// class  bytes/obj  bytes/span  objects  waste bytes</span><span class="token comment" spellcheck="true">//     1          8        8192     1024            0</span><span class="token comment" spellcheck="true">//     2         16        8192      512            0</span><span class="token comment" spellcheck="true">//     3         32        8192      256            0</span><span class="token comment" spellcheck="true">//     4         48        8192      170           32</span><span class="token comment" spellcheck="true">//     5         64        8192      128            0</span><span class="token comment" spellcheck="true">//     6         80        8192      102           32</span><span class="token comment" spellcheck="true">//     7         96        8192       85           32</span><span class="token comment" spellcheck="true">//     8        112        8192       73           16</span><span class="token comment" spellcheck="true">//     9        128        8192       64            0</span><span class="token comment" spellcheck="true">//    10        144        8192       56          128</span><span class="token comment" spellcheck="true">//    11        160        8192       51           32</span><span class="token comment" spellcheck="true">//    12        176        8192       46           96</span><span class="token comment" spellcheck="true">//    13        192        8192       42          128</span><span class="token comment" spellcheck="true">//    14        208        8192       39           80</span><span class="token comment" spellcheck="true">//    15        224        8192       36          128</span><span class="token comment" spellcheck="true">//    16        240        8192       34           32</span><span class="token comment" spellcheck="true">//    17        256        8192       32            0</span><span class="token comment" spellcheck="true">//    18        288        8192       28          128</span><span class="token comment" spellcheck="true">//    19        320        8192       25          192</span><span class="token comment" spellcheck="true">//    20        352        8192       23           96</span><span class="token comment" spellcheck="true">//    21        384        8192       21          128</span><span class="token comment" spellcheck="true">//    22        416        8192       19          288</span><span class="token comment" spellcheck="true">//    23        448        8192       18          128</span><span class="token comment" spellcheck="true">//    24        480        8192       17           32</span><span class="token comment" spellcheck="true">//    25        512        8192       16            0</span><span class="token comment" spellcheck="true">//    26        576        8192       14          128</span><span class="token comment" spellcheck="true">//    27        640        8192       12          512</span><span class="token comment" spellcheck="true">//    28        704        8192       11          448</span><span class="token comment" spellcheck="true">//    29        768        8192       10          512</span><span class="token comment" spellcheck="true">//    30        896        8192        9          128</span><span class="token comment" spellcheck="true">//    31       1024        8192        8            0</span><span class="token comment" spellcheck="true">//    32       1152        8192        7          128</span><span class="token comment" spellcheck="true">//    33       1280        8192        6          512</span><span class="token comment" spellcheck="true">//    34       1408       16384       11          896</span><span class="token comment" spellcheck="true">//    35       1536        8192        5          512</span><span class="token comment" spellcheck="true">//    36       1792       16384        9          256</span><span class="token comment" spellcheck="true">//    37       2048        8192        4            0</span><span class="token comment" spellcheck="true">//    38       2304       16384        7          256</span><span class="token comment" spellcheck="true">//    39       2688        8192        3          128</span><span class="token comment" spellcheck="true">//    40       3072       24576        8            0</span><span class="token comment" spellcheck="true">//    41       3200       16384        5          384</span><span class="token comment" spellcheck="true">//    42       3456       24576        7          384</span><span class="token comment" spellcheck="true">//    43       4096        8192        2            0</span><span class="token comment" spellcheck="true">//    44       4864       24576        5          256</span><span class="token comment" spellcheck="true">//    45       5376       16384        3          256</span><span class="token comment" spellcheck="true">//    46       6144       24576        4            0</span><span class="token comment" spellcheck="true">//    47       6528       32768        5          128</span><span class="token comment" spellcheck="true">//    48       6784       40960        6          256</span><span class="token comment" spellcheck="true">//    49       6912       49152        7          768</span><span class="token comment" spellcheck="true">//    50       8192        8192        1            0</span><span class="token comment" spellcheck="true">//    51       9472       57344        6          512</span><span class="token comment" spellcheck="true">//    52       9728       49152        5          512</span><span class="token comment" spellcheck="true">//    53      10240       40960        4            0</span><span class="token comment" spellcheck="true">//    54      10880       32768        3          128</span><span class="token comment" spellcheck="true">//    55      12288       24576        2            0</span><span class="token comment" spellcheck="true">//    56      13568       40960        3          256</span><span class="token comment" spellcheck="true">//    57      14336       57344        4            0</span><span class="token comment" spellcheck="true">//    58      16384       16384        1            0</span><span class="token comment" spellcheck="true">//    59      18432       73728        4            0</span><span class="token comment" spellcheck="true">//    60      19072       57344        3          128</span><span class="token comment" spellcheck="true">//    61      20480       40960        2            0</span><span class="token comment" spellcheck="true">//    62      21760       65536        3          256</span><span class="token comment" spellcheck="true">//    63      24576       24576        1            0</span><span class="token comment" spellcheck="true">//    64      27264       81920        3          128</span><span class="token comment" spellcheck="true">//    65      28672       57344        2            0</span><span class="token comment" spellcheck="true">//    66      32768       32768        1            0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上表中每列含义如下：</p><ul><li>class： class ID，每个span结构中都有一个class ID, 表示该span可处理的对象类型</li><li>bytes/obj：该class代表对象的字节数</li><li>bytes/span：每个span占用堆的字节数，也即页数*页大小</li><li>objects: 每个span可分配的对象个数，也即（bytes/spans）/（bytes/obj）</li><li>waste bytes: 每个span产生的内存碎片，也即（bytes/spans）%（bytes/obj）</li></ul><p>上表可见最大的对象是32K大小，超过32K大小的由特殊的class表示，该class ID为0，每个class只包含一个对象。</p><h4 id="span数据结构"><a href="#span数据结构" class="headerlink" title="span数据结构"></a>span数据结构</h4><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> mspan <span class="token keyword">struct</span> <span class="token punctuation">{</span>    next <span class="token operator">*</span>mspan            <span class="token comment" spellcheck="true">//链表前向指针，用于将span链接起来</span>    prev <span class="token operator">*</span>mspan            <span class="token comment" spellcheck="true">//链表前向指针，用于将span链接起来</span>    startAddr <span class="token builtin">uintptr</span> <span class="token comment" spellcheck="true">// 起始地址，也即所管理页的地址</span>    npages    <span class="token builtin">uintptr</span> <span class="token comment" spellcheck="true">// 管理的页数</span>    nelems <span class="token builtin">uintptr</span> <span class="token comment" spellcheck="true">// 块个数，也即有多少个块可供分配</span>    allocBits  <span class="token operator">*</span>gcBits <span class="token comment" spellcheck="true">//分配位图，每一位代表一个块是否已分配</span>    allocCount  <span class="token builtin">uint16</span>     <span class="token comment" spellcheck="true">// 已分配块的个数</span>    spanclass   spanClass  <span class="token comment" spellcheck="true">// class表中的class ID</span>    elemsize    <span class="token builtin">uintptr</span>    <span class="token comment" spellcheck="true">// class表中的对象大小，也即块大小</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以class 10为例，span和管理的内存如下图所示：</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211117233451.png" alt="image-20211021212308815"></p><p>spanclass为10，参照class表可得出npages=1,nelems=56,elemsize为144。其中startAddr是在span初始化时就指定了某个页的地址。allocBits指向一个位图，每位代表一个块是否被分配，本例中有两个块已经被分配，其allocCount也为2。</p><p>next和prev用于将多个span链接起来，这有利于管理多个span，接下来会进行说明。</p><h3 id="cache"><a href="#cache" class="headerlink" title="cache"></a>cache</h3><p>有了管理内存的基本单位span，还要有个数据结构来管理span，这个数据结构叫mcentral，各线程需要内存时从mcentral管理的span中申请内存，为了避免多线程申请内存时不断的加锁，Golang为每个线程分配了span的缓存，这个缓存即是cache。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> mcache <span class="token keyword">struct</span> <span class="token punctuation">{</span>   tiny             <span class="token builtin">uintptr</span>   tinyoffset       <span class="token builtin">uintptr</span>   alloc <span class="token punctuation">[</span>numSpanClasses<span class="token punctuation">]</span><span class="token operator">*</span>mspan  <span class="token comment" spellcheck="true">// 按class分组的mspan列表</span><span class="token punctuation">}</span>numSpanClasses <span class="token operator">=</span> _NumSizeClasses <span class="token operator">&lt;&lt;</span> <span class="token number">1</span>_NumSizeClasses <span class="token operator">=</span> <span class="token number">67</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>alloc为mspan的指针数组，数组大小为class总数的2倍。数组中每个元素代表了一种class类型的span列表，每种class类型都有两组span列表，第一组列表中所表示的对象中包含了指针，第二组列表中所表示的对象不含有指针，这么做是为了提高GC扫描性能，对于不包含指针的span列表，没必要去扫描。</p><p>根据对象是否包含指针，将对象分为noscan和scan两类，其中noscan代表没有指针，而scan则代表有指针，需要GC进行扫描。</p><p>其中scan和noscan的区别在于,<br>如果对象包含了指针, 分配对象时会使用scan的span,<br>如果对象不包含指针, 分配对象时会使用noscan的span.<br>把span分为scan和noscan的意义在于,<br>GC扫描对象的时候对于noscan的span可以不去查看bitmap区域来标记子对象, 这样可以大幅提升标记的效率.</p><p>mcache和span的对应关系如下图所示：</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211117233459.png" alt="image-20211021213057087"></p><p>mchache在初始化时是没有任何span的，在使用过程中会动态的从central中获取并缓存下来，跟据使用情况，每种class的span个数也不相同。上图所示，class 0的span数比class1的要多，说明本线程中分配的小对象要多一些。</p><h3 id="central"><a href="#central" class="headerlink" title="central"></a>central</h3><p>cache作为线程的私有资源为单个线程服务，而central则是全局资源，为多个线程服务，当某个线程内存不足时会向central申请，当某个线程释放内存时又会回收进central。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> mcentral <span class="token keyword">struct</span> <span class="token punctuation">{</span>    lock      mutex     <span class="token comment" spellcheck="true">//互斥锁</span>    spanclass spanClass <span class="token comment" spellcheck="true">// span class ID</span>    nonempty  mSpanList <span class="token comment" spellcheck="true">// non-empty 指还有空闲块的span列表</span>    empty     mSpanList <span class="token comment" spellcheck="true">// 指没有空闲块的span列表</span>    nmalloc <span class="token builtin">uint64</span>      <span class="token comment" spellcheck="true">// 已累计分配的对象个数</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>lock: 线程间互斥锁，防止多线程读写冲突</li><li>spanclass : 每个mcentral管理着一组有相同class的span列表</li><li>nonempty: 指还有内存可用的span列表</li><li>empty: 指没有内存可用的span列表</li><li>nmalloc: 指累计分配的对象个数</li></ul><p>线程从central获取span步骤如下：</p><ol><li>加锁</li><li>从nonempty列表获取一个可用span，并将其从链表中删除</li><li>将取出的span放入empty链表</li><li>将span返回给线程</li><li>解锁</li><li>线程将该span缓存进cache</li></ol><p>线程将span归还步骤如下：</p><ol><li>加锁</li><li>将span从empty列表删除</li><li>将span加入noneempty列表</li><li>解锁</li></ol><h3 id="heap"><a href="#heap" class="headerlink" title="heap"></a>heap</h3><p>从mcentral数据结构可见，每个mcentral对象只管理特定的class规格的span。事实上每种class都会对应一个mcentral,这个mcentral的集合存放于mheap数据结构中。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> mheap <span class="token keyword">struct</span> <span class="token punctuation">{</span>    lock      mutex    spans <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>mspan    bitmap        <span class="token builtin">uintptr</span>     <span class="token comment" spellcheck="true">//指向bitmap首地址，bitmap是从高地址向低地址增长的</span>    arena_start <span class="token builtin">uintptr</span>        <span class="token comment" spellcheck="true">//指示arena区首地址</span>    arena_used  <span class="token builtin">uintptr</span>        <span class="token comment" spellcheck="true">//指示arena区已使用地址位置</span>    central <span class="token punctuation">[</span><span class="token number">67</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token keyword">struct</span> <span class="token punctuation">{</span>        mcentral mcentral        pad      <span class="token punctuation">[</span>sys<span class="token punctuation">.</span>CacheLineSize <span class="token operator">-</span> unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span>mcentral<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">%</span>sys<span class="token punctuation">.</span>CacheLineSize<span class="token punctuation">]</span><span class="token builtin">byte</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>lock： 互斥锁</p></li><li><p>spans: 指向spans区域，用于映射span和page的关系</p></li><li><p>bitmap：bitmap的起始地址</p></li><li><p>arena_start: arena区域首地址</p></li><li><p>arena_used: 当前arena已使用区域的最大地址</p></li><li><p>central: 每种class对应的两个mcentral</p></li></ul><p>从数据结构可见，mheap管理着全部的内存，事实上Golang就是通过一个mheap类型的全局变量进行内存管理的。</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211117233508.png" alt="image-20211021215636977"></p><p>系统预分配的内存分为spans、bitmap、arean三个区域，通过mheap管理起来</p><h2 id="Go内存分配"><a href="#Go内存分配" class="headerlink" title="Go内存分配"></a>Go内存分配</h2><p>总体来说：</p><p>针对待分配对象的大小不同有不同的分配逻辑：</p><ul><li>(0, 16B) 且不包含指针的对象： Tiny分配</li><li>(0, 16B) 包含指针的对象：正常分配</li><li>[16B, 32KB] : 正常分配</li><li>(32KB, -) : 大对象分配 其中Tiny分配和大对象分配都属于内存管理的优化范畴，这里暂时仅关注一般的分配方法。</li></ul><p>以申请size为n的内存为例，分配步骤如下：</p><ol><li>获取当前线程的私有缓存mcache</li><li>跟据size计算出适合的class的ID</li><li>从mcache的alloc[class]链表中查询可用的span</li><li>如果mcache没有可用的span则从mcentral申请一个新的span加入mcache中</li><li>如果mcentral中也没有可用的span则从mheap中申请一个新的span加入mcentral</li><li>从该span中获取到空闲对象地址并返回</li></ol><p>看具体实现</p><h4 id="小对象"><a href="#小对象" class="headerlink" title="小对象"></a>小对象</h4><ul><li>申请</li></ul><p>将申请的内存大小，向上取整成对应的size class；并且从P的mcache中找对应的mspan。</p><p>如果mspan有空闲slot，就分配。这个过程不需要lock，因为只有一个G会向P申请。</p><p>如果mspan没有空闲slot，就从mcentral获取新的mspan。这个过程需要lock，因为会有多个G同时申请。</p><p>如果mcentral没有mspan，就从mheap申请。</p><p>如果mheap空间不足，就想OS申请一组page，最少1MB。</p><ul><li>释放</li></ul><p>如果mspan在响应分配时被扫描，就返回mcache以满足分配。（不是很理解）</p><p>如果mspan中有分配的对象，就将它放置到mcentral的free list中</p><p>如果mspan空闲，就返回mheap，并且不关联size class，即变成page</p><p>如果msapn空闲很久，就把page还给OS，缩容。</p><h4 id="大对象"><a href="#大对象" class="headerlink" title="大对象"></a>大对象</h4><p>大对象都是直接操作mheap，跳过mcache和mcentral</p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p><strong>tiny(&lt;16byte)</strong></p><pre class="line-numbers language-go"><code class="language-go">off <span class="token operator">:=</span> c<span class="token punctuation">.</span>tinyoffset<span class="token comment" spellcheck="true">// Align tiny pointer for required (conservative) alignment.</span><span class="token keyword">if</span> size<span class="token operator">&amp;</span><span class="token number">7</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>   off <span class="token operator">=</span> <span class="token function">round</span><span class="token punctuation">(</span>off<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> size<span class="token operator">&amp;</span><span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>   off <span class="token operator">=</span> <span class="token function">round</span><span class="token punctuation">(</span>off<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> size<span class="token operator">&amp;</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>   off <span class="token operator">=</span> <span class="token function">round</span><span class="token punctuation">(</span>off<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">if</span> off<span class="token operator">+</span>size <span class="token operator">&lt;=</span> maxTinySize <span class="token operator">&amp;&amp;</span> c<span class="token punctuation">.</span>tiny <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// The object fits into existing tiny block.</span>   x <span class="token operator">=</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>tiny <span class="token operator">+</span> off<span class="token punctuation">)</span>   c<span class="token punctuation">.</span>tinyoffset <span class="token operator">=</span> off <span class="token operator">+</span> size   c<span class="token punctuation">.</span>local_tinyallocs<span class="token operator">++</span>   mp<span class="token punctuation">.</span>mallocing <span class="token operator">=</span> <span class="token number">0</span>   <span class="token function">releasem</span><span class="token punctuation">(</span>mp<span class="token punctuation">)</span>   <span class="token keyword">return</span> x<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Allocate a new maxTinySize block.</span>span <span class="token operator">:=</span> c<span class="token punctuation">.</span>alloc<span class="token punctuation">[</span>tinySpanClass<span class="token punctuation">]</span>v <span class="token operator">:=</span> <span class="token function">nextFreeFast</span><span class="token punctuation">(</span>span<span class="token punctuation">)</span><span class="token keyword">if</span> v <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>   v<span class="token punctuation">,</span> <span class="token boolean">_</span><span class="token punctuation">,</span> shouldhelpgc <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">nextFree</span><span class="token punctuation">(</span>tinySpanClass<span class="token punctuation">)</span><span class="token punctuation">}</span>x <span class="token operator">=</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token builtin">uint64</span><span class="token punctuation">)</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">0</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token builtin">uint64</span><span class="token punctuation">)</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true">// See if we need to replace the existing tiny block with the new one</span><span class="token comment" spellcheck="true">// based on amount of remaining free space.</span><span class="token keyword">if</span> size <span class="token operator">&lt;</span> c<span class="token punctuation">.</span>tinyoffset <span class="token operator">||</span> c<span class="token punctuation">.</span>tiny <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>   c<span class="token punctuation">.</span>tiny <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>   c<span class="token punctuation">.</span>tinyoffset <span class="token operator">=</span> size<span class="token punctuation">}</span>size <span class="token operator">=</span> maxTinySize<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>tinyoffset表示tiny当前分配到什么地址了，之后的分配根据 tinyoffset 寻址。</p><ol><li>先根据要分配的对象大小进行地址对齐，比如size是8的倍数，tinyoffset 和 8 对齐。</li><li>然后就是进行分配。如果tiny剩余的空间不够用，则重新申请一个 16 byte 的内存块，并分配给 object。</li><li>如果新块剩余空间比老快大，就用新的内存块替换。</li></ol><p>large(&gt;32k)</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">var</span> s <span class="token operator">*</span>mspanshouldhelpgc <span class="token operator">=</span> <span class="token boolean">true</span><span class="token function">systemstack</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   s <span class="token operator">=</span> <span class="token function">largeAlloc</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> needzero<span class="token punctuation">,</span> noscan<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>freeindex <span class="token operator">=</span> <span class="token number">1</span>s<span class="token punctuation">.</span>allocCount <span class="token operator">=</span> <span class="token number">1</span>x <span class="token operator">=</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>size <span class="token operator">=</span> s<span class="token punctuation">.</span>elemsize<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">largeAlloc</span><span class="token punctuation">(</span>size <span class="token builtin">uintptr</span><span class="token punctuation">,</span> needzero <span class="token builtin">bool</span><span class="token punctuation">,</span> noscan <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token operator">*</span>mspan <span class="token punctuation">{</span>   <span class="token keyword">if</span> size<span class="token operator">+</span>_PageSize <span class="token operator">&lt;</span> size <span class="token punctuation">{</span>      <span class="token function">throw</span><span class="token punctuation">(</span><span class="token string">"out of memory"</span><span class="token punctuation">)</span>   <span class="token punctuation">}</span>   npages <span class="token operator">:=</span> size <span class="token operator">>></span> _PageShift   <span class="token keyword">if</span> size<span class="token operator">&amp;</span>_PageMask <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>      npages<span class="token operator">++</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// Deduct credit for this span allocation and sweep if</span>   <span class="token comment" spellcheck="true">// necessary. mHeap_Alloc will also sweep npages, so this only</span>   <span class="token comment" spellcheck="true">// pays the debt down to npage pages.</span>   <span class="token function">deductSweepCredit</span><span class="token punctuation">(</span>npages<span class="token operator">*</span>_PageSize<span class="token punctuation">,</span> npages<span class="token punctuation">)</span>   s <span class="token operator">:=</span> mheap_<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span>npages<span class="token punctuation">,</span> <span class="token function">makeSpanClass</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> noscan<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> needzero<span class="token punctuation">)</span>   <span class="token keyword">if</span> s <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>      <span class="token function">throw</span><span class="token punctuation">(</span><span class="token string">"out of memory"</span><span class="token punctuation">)</span>   <span class="token punctuation">}</span>   s<span class="token punctuation">.</span>limit <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">base</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> size   <span class="token function">heapBitsForSpan</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">initSpan</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>   <span class="token keyword">return</span> s<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>跳过了mspan和mcentral，直接在mheap上面分配。</p><p><strong>normal（[16 b, 32 k]）</strong></p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">var</span> sizeclass <span class="token builtin">uint8</span><span class="token keyword">if</span> size <span class="token operator">&lt;=</span> smallSizeMax<span class="token number">-8</span> <span class="token punctuation">{</span>   sizeclass <span class="token operator">=</span> size_to_class8<span class="token punctuation">[</span><span class="token punctuation">(</span>size<span class="token operator">+</span>smallSizeDiv<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">/</span>smallSizeDiv<span class="token punctuation">]</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>   sizeclass <span class="token operator">=</span> size_to_class128<span class="token punctuation">[</span><span class="token punctuation">(</span>size<span class="token operator">-</span>smallSizeMax<span class="token operator">+</span>largeSizeDiv<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">/</span>largeSizeDiv<span class="token punctuation">]</span><span class="token punctuation">}</span>size <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>class_to_size<span class="token punctuation">[</span>sizeclass<span class="token punctuation">]</span><span class="token punctuation">)</span>spc <span class="token operator">:=</span> <span class="token function">makeSpanClass</span><span class="token punctuation">(</span>sizeclass<span class="token punctuation">,</span> noscan<span class="token punctuation">)</span>span <span class="token operator">:=</span> c<span class="token punctuation">.</span>alloc<span class="token punctuation">[</span>spc<span class="token punctuation">]</span>v <span class="token operator">:=</span> <span class="token function">nextFreeFast</span><span class="token punctuation">(</span>span<span class="token punctuation">)</span><span class="token keyword">if</span> v <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>   v<span class="token punctuation">,</span> span<span class="token punctuation">,</span> shouldhelpgc <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">nextFree</span><span class="token punctuation">(</span>spc<span class="token punctuation">)</span><span class="token punctuation">}</span>x <span class="token operator">=</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token keyword">if</span> needzero <span class="token operator">&amp;&amp;</span> span<span class="token punctuation">.</span>needzero <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>   <span class="token function">memclrNoHeapPointers</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于 size 介于 16 ~ 32K byte 的内存分配</p><ol><li>先计算应该分配的 sizeclass，</li><li>然后去 mcache 里面 alloc[sizeclass] 申请，</li><li>如果 mcache.alloc[sizeclass] 不足以申请，则 mcache 向 mcentral 申请，然后再分配。</li><li>mcentral 给 mcache 分配完之后会判断自己需不需要扩充，如果需要则向 mheap 申请。</li></ol><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// nextFreeFast returns the next free object if one is quickly available.</span><span class="token comment" spellcheck="true">// Otherwise it returns 0.</span><span class="token keyword">func</span> <span class="token function">nextFreeFast</span><span class="token punctuation">(</span>s <span class="token operator">*</span>mspan<span class="token punctuation">)</span> gclinkptr <span class="token punctuation">{</span>   theBit <span class="token operator">:=</span> sys<span class="token punctuation">.</span><span class="token function">Ctz64</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>allocCache<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Is there a free object in the allocCache?</span>   <span class="token keyword">if</span> theBit <span class="token operator">&lt;</span> <span class="token number">64</span> <span class="token punctuation">{</span>      result <span class="token operator">:=</span> s<span class="token punctuation">.</span>freeindex <span class="token operator">+</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>theBit<span class="token punctuation">)</span>      <span class="token keyword">if</span> result <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>nelems <span class="token punctuation">{</span>         freeidx <span class="token operator">:=</span> result <span class="token operator">+</span> <span class="token number">1</span>         <span class="token keyword">if</span> freeidx<span class="token operator">%</span><span class="token number">64</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> freeidx <span class="token operator">!=</span> s<span class="token punctuation">.</span>nelems <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span>         <span class="token punctuation">}</span>         s<span class="token punctuation">.</span>allocCache <span class="token operator">>>=</span> <span class="token function">uint</span><span class="token punctuation">(</span>theBit <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>         s<span class="token punctuation">.</span>freeindex <span class="token operator">=</span> freeidx         s<span class="token punctuation">.</span>allocCount<span class="token operator">++</span>         <span class="token keyword">return</span> <span class="token function">gclinkptr</span><span class="token punctuation">(</span>result<span class="token operator">*</span>s<span class="token punctuation">.</span>elemsize <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>allocCache 这里是用位图表示内存是否可用，1 表示可用。然后通过 span 里面的 freeindex 和 elemsize 来计算地址即可。<br>当mcache没有可用地址时，通过nextFree向mcentral甚至mheap申请:</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>mcache<span class="token punctuation">)</span> <span class="token function">nextFree</span><span class="token punctuation">(</span>spc spanClass<span class="token punctuation">)</span> <span class="token punctuation">(</span>v gclinkptr<span class="token punctuation">,</span> s <span class="token operator">*</span>mspan<span class="token punctuation">,</span> shouldhelpgc <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   s <span class="token operator">=</span> c<span class="token punctuation">.</span>alloc<span class="token punctuation">[</span>spc<span class="token punctuation">]</span>   shouldhelpgc <span class="token operator">=</span> <span class="token boolean">false</span>   freeIndex <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">nextFreeIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token keyword">if</span> freeIndex <span class="token operator">==</span> s<span class="token punctuation">.</span>nelems <span class="token punctuation">{</span>      <span class="token function">systemstack</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         c<span class="token punctuation">.</span><span class="token function">refill</span><span class="token punctuation">(</span>spc<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      shouldhelpgc <span class="token operator">=</span> <span class="token boolean">true</span>      s <span class="token operator">=</span> c<span class="token punctuation">.</span>alloc<span class="token punctuation">[</span>spc<span class="token punctuation">]</span>      freeIndex <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">nextFreeIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">}</span>   <span class="token keyword">if</span> freeIndex <span class="token operator">>=</span> s<span class="token punctuation">.</span>nelems <span class="token punctuation">{</span>      <span class="token function">throw</span><span class="token punctuation">(</span><span class="token string">"freeIndex is not valid"</span><span class="token punctuation">)</span>   <span class="token punctuation">}</span>   v <span class="token operator">=</span> <span class="token function">gclinkptr</span><span class="token punctuation">(</span>freeIndex<span class="token operator">*</span>s<span class="token punctuation">.</span>elemsize <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   s<span class="token punctuation">.</span>allocCount<span class="token operator">++</span>   <span class="token keyword">return</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mcache 向 mcentral，如果 mcentral 不够，则向 mheap 申请。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// Gets a span that has a free object in it and assigns it</span><span class="token comment" spellcheck="true">// to be the cached span for the given sizeclass. Returns this span.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>mcache<span class="token punctuation">)</span> <span class="token function">refill</span><span class="token punctuation">(</span>spc spanClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>   _g_ <span class="token operator">:=</span> <span class="token function">getg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   _g_<span class="token punctuation">.</span>m<span class="token punctuation">.</span>locks<span class="token operator">++</span>   <span class="token comment" spellcheck="true">// Return the current cached span to the central lists.</span>   s <span class="token operator">:=</span> c<span class="token punctuation">.</span>alloc<span class="token punctuation">[</span>spc<span class="token punctuation">]</span>   <span class="token comment" spellcheck="true">// Get a new cached span from the central lists.</span>   s <span class="token operator">=</span> mheap_<span class="token punctuation">.</span>central<span class="token punctuation">[</span>spc<span class="token punctuation">]</span><span class="token punctuation">.</span>mcentral<span class="token punctuation">.</span><span class="token function">cacheSpan</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   c<span class="token punctuation">.</span>alloc<span class="token punctuation">[</span>spc<span class="token punctuation">]</span> <span class="token operator">=</span> s   _g_<span class="token punctuation">.</span>m<span class="token punctuation">.</span>locks<span class="token operator">--</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 后端 </tag>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go GC</title>
      <link href="/2021/11/18/go-gc/"/>
      <url>/2021/11/18/go-gc/</url>
      
        <content type="html"><![CDATA[<h1 id="Go-GC"><a href="#Go-GC" class="headerlink" title="Go GC"></a>Go GC</h1><h2 id="Go-GC-1"><a href="#Go-GC-1" class="headerlink" title="Go GC"></a>Go GC</h2><h3 id="“GC-Roots”-的对象选择"><a href="#“GC-Roots”-的对象选择" class="headerlink" title="“GC Roots” 的对象选择"></a><strong>“GC Roots” 的对象选择</strong></h3><p>JAVA的GC Root对象选择</p><ul><li>虚拟机栈(栈帧中的本地变量表)中引用的对象；</li><li>本地方法栈(Native 方法)中引用的对象；</li><li>方法区中类静态属性引用的对象；</li><li>方法区中常量引用的对象；</li><li>Java虚拟机内部引用；</li><li>所有被同步锁持有的对象</li></ul><p>Go的GC Root对象</p><p>即全局变量和G Stack中的引用指针，简单来说就是全局量和go程中的引用指针</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211117233805.png" alt="image-20211022002907496"></p><p>图中allocCount应为4，</p><p>gcmarkBits用于在gc时标记哪些对象存活, <strong>每次gc以后gcmarkBits会变为allocBits</strong>.</p><h3 id="STW"><a href="#STW" class="headerlink" title="STW"></a>STW</h3><p>stop the world是gc的最大性能问题，对于gc而言，需要停止所有的内存变化，即停止所有的goroutine，等待gc结束之后才恢复</p><h3 id="GC触发"><a href="#GC触发" class="headerlink" title="GC触发"></a>GC触发</h3><ul><li>阈值：默认内存扩大一倍，启动gc</li><li>定期：默认2min触发一次gc，src/runtime/proc.go:forcegcperiod</li><li>手动：runtime.gc()</li></ul><h3 id="Go-V1-3版本之前"><a href="#Go-V1-3版本之前" class="headerlink" title="Go V1.3版本之前"></a>Go V1.3版本之前</h3><p>Go V1.3版本之前就是以上来实施的, 在执行GC的基本流程就是首先启动STW暂停，然后执行标记，再执行数据回收，最后停止STW，如图所示。</p><p>Go V1.3 做了简单的优化,将STW的步骤提前, 减少STW暂停的时间范围.如下所示</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211117233824.png" alt="image-20211022151619728"></p><p>上图主要是将STW的步骤提前了异步，因为在Sweep清除的时候，可以不需要STW停止，因为这些对象已经是不可达对象了，不会出现回收写冲突等问题。</p><p>但是无论怎么优化，Go V1.3都面临这个一个重要问题，就是<strong>mark-and-sweep 算法会暂停整个程序</strong> 。</p><h3 id="Go-V1-5三色标记"><a href="#Go-V1-5三色标记" class="headerlink" title="Go V1.5三色标记"></a>Go V1.5三色标记</h3><ul><li>灰色：对象已被标记，但这个对象包含的子对象未标记</li><li>黑色：对象已被标记，且这个对象包含的子对象也已标记，gcmarkBits对应的位为1（该对象不会在本次GC中被清理）</li><li>白色：对象未被标记，gcmarkBits对应的位为0（该对象将会在本次GC中被清理）</li></ul><p>当前内存中有A~F一共6个对象，根对象a,b本身为栈上分配的局部变量，根对象a、b分别引用了对象A、B, 而B对象又引用了对象D，则GC开始前各对象的状态如下图所示:</p><ol><li>初始状态下所有对象都是白色的。</li><li>接着开始扫描根对象a、b; 由于根对象引用了对象A、B,那么A、B变为灰色对象，接下来就开始分析灰色对象，分析A时，A没有引用其他对象很快就转入黑色，B引用了D，则B转入黑色的同时还需要将D转为灰色，进行接下来的分析。</li><li>灰色对象只有D，由于D没有引用其他对象，所以D转入黑色。标记过程结束</li><li>最终，黑色的对象会被保留下来，白色对象会被回收掉。</li></ol><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211117233847.png" alt="image-20211022003235402"></p><p>如上的三色标记，如果不启动STW，并发的垃圾回收，仍然会出现问题；</p><p>会造成<strong>对象丢失</strong>的情形：</p><p>条件1: 一个白色对象被黑色对象引用(黑色已遍历过，不会再次遍历)</p><p>条件2: 该白色对象没有被灰色引用，或灰色引用被破坏(灰色同时丢了该白色对象)</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211117233905.png" alt="image-20211022005351474"></p><p>对象3会被回收</p><h4 id="GC流程"><a href="#GC流程" class="headerlink" title="GC流程"></a>GC流程</h4><ol><li>Stack scan：Collect pointers from globals and goroutine stacks。收集根对象（全局变量，和G stack），开启写屏障。全局变量、开启写屏障需要STW，G stack只需要停止该G就好，时间比较少。</li><li>Mark: Mark objects and follow pointers。标记所有根对象, 和根对象可以到达的所有对象不被回收。</li><li>Mark Termination: Rescan globals/changed stack, finish mark。重新扫描全局变量，和上一轮改变的stack（写屏障），完成标记工作。这个过程需要STW。</li><li>Sweep: 按标记结果清扫span</li></ol><p>目前整个GC流程会进行两次STW(Stop The World), 第一次是Stack scan阶段, 第二次是Mark Termination阶段.</p><ul><li>第一次STW会准备根对象的扫描, 启动写屏障(Write Barrier)和辅助GC(mutator assist).</li><li>第二次STW会重新扫描部分根对象, 禁用写屏障(Write Barrier)和辅助GC(mutator assist).</li></ul><p>从1.8以后的golang将第一步的stop the world 也取消了，这又是一次优化； 1.9开始, 写屏障的实现使用了Hybrid Write Barrier, 大幅减少了第二次STW的时间.</p><h4 id="屏障机制"><a href="#屏障机制" class="headerlink" title="屏障机制"></a>屏障机制</h4><h5 id="1-“强-弱”-三色不变式"><a href="#1-“强-弱”-三色不变式" class="headerlink" title="(1) “强-弱” 三色不变式"></a>(1) “强-弱” 三色不变式</h5><p>强三色不变式：不存在黑色对象引用到白色对象的指针（破坏条件一）。</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211117233939.png" alt="image-20211022005954004"></p><p>弱三色不变式：所有被黑色对象引用的白色对象都处于灰色保护状态（破坏条件二）。</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211117233958.png" alt="image-20211022010012682"></p><h5 id="2-插入写屏障"><a href="#2-插入写屏障" class="headerlink" title="(2) 插入写屏障"></a>(2) 插入写屏障</h5><p>对象被引用时，触发的屏障（屏障，相当于拦截器，额外操作）；</p><p>具体操作: 在A对象引用B对象的时候，B对象被标记为灰色。(将B挂在A下游，B必须被标记为灰色)；</p><p><strong>满足方式: 强三色不变式</strong></p><p>栈空间的特点是容量小，但是要求响应速度快，因为函数调用弹出频繁使用；</p><p>所以“插入写屏障”机制，在<strong>栈空间的对象操作中不使用（启动STW，重新标记）</strong>，而<strong>仅仅使用在堆空间</strong>使用；</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211117234007.png" alt="image-20211022142911365"></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211117234046.png" alt="image-20211022142939484"></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211117234103.png" alt="image-20211022143032543"></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211117234122.png" alt="image-20211022143056009"></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211117234138.png" alt="image-20211022143139543"></p><h5 id="3-删除写屏障"><a href="#3-删除写屏障" class="headerlink" title="(3)  删除写屏障"></a>(3)  删除写屏障</h5><p>具体操作: 被删除的对象，如果自身为灰色或者白色，那么被标记为灰色。</p><p><strong>满足: 弱三色不变式. (保护灰色对象到白色对象的路径不会断)</strong></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211117234216.png" alt="image-20211022143641243"></p><p>删除1到5的引用，那么5会被标记为灰色。</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211117234226.png" alt="image-20211022144755363"></p><p>删除对象6即可</p><h5 id="4-混合写屏障机制"><a href="#4-混合写屏障机制" class="headerlink" title="(4)  混合写屏障机制"></a>(4)  混合写屏障机制</h5><h3 id="Go-V1-8之后混合写屏障机制"><a href="#Go-V1-8之后混合写屏障机制" class="headerlink" title="Go V1.8之后混合写屏障机制"></a>Go V1.8之后混合写屏障机制</h3><p>插入写屏障和删除写屏障的缺点：</p><p>插入写屏障：结束时需要STW来重新扫描栈，标记栈上引用的白色对象的存活；</p><p>删除写屏障：回收精度低，GC开始时STW扫描堆栈来记录初始快照，这个过程会保护开始时刻的所有存活对象；</p><p><strong>1.混合写屏障规则</strong></p><p>具体操作:</p><p>1）GC开始将栈上的对象全部引用扫描并标记为黑色 (之后不再进行第二次重复扫描，无需STW)。</p><p>2）GC期间，任何在栈上创建的新对象，均为黑色（保证栈全为黑色对象）。</p><p>3）被删除的对象标记为灰色（删除写屏障）。</p><p>4）被添加的对象标记为灰色（插入写屏障）。</p><p>满足: 变形的弱三色不变式</p><p><strong>2. 混合写屏障的具体场景</strong></p><p>1）GC开始，全部对象都为白色</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211117234246.png" alt="image-20211022144317315"></p><p>2）扫描栈对象，全部标记为黑色</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211117234401.png" alt="image-20211022144342286"></p><p><strong>场景一： 对象被一个堆对象删除引用，成为栈对象的下游</strong></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211117234412.png" alt="image-20211022145210788"></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211117234431.png" alt="image-20211022145235754"></p><p><strong>场景二： 对象被一个栈对象删除引用，成为另一个栈对象的下游</strong></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211117234438.png" alt="image-20211022145752970"></p><p>![image-20211022145823307](/Users/zhulingang/Library/Application Support/typora-user-images/image-20211022145823307.png)</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211117234449.png" alt="image-20211022145836721"></p><p><strong>场景三：对象被一个堆对象删除引用，成为另一个堆对象的下游</strong></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211117234500.png" alt="image-20211022150206835"></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211117234507.png" alt="image-20211022150217882"></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211117234521.png" alt="image-20211022150243212"></p><p><strong>场景四：对象从一个栈对象删除引用，成为另一个堆对象的下游</strong></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211117234543.png" alt="image-20211022150436773"></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211117234557.png" alt="image-20211022150551349"></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211117234608.png" alt="image-20211022150605069"></p><p>Golang中的混合写屏障满足<code>弱三色不变式</code>，结合了删除写屏障和插入写屏障的优点，只需要在开始时并发扫描各个goroutine的栈，使其变黑并一直保持，这个过程不需要STW，而标记结束后，因为栈在扫描后始终是黑色的，也无需再进行re-scan操作了，减少了STW的时间。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>以上便是Golang的GC全部的标记-清除逻辑及场景演示全过程。</p><p>GoV1.3- 普通标记清除法，整体过程需要启动STW，效率极低。</p><p>GoV1.5- 三色标记法， 堆空间启动写屏障，栈空间不启动，全部扫描之后，需要重新扫描一次栈(需要STW)，效率普通</p><p>GoV1.8-三色标记法，混合写屏障机制， 栈空间不启动，堆空间启动。整个过程几乎不需要STW，效率较高。</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 后端 </tag>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GO基本数据类型</title>
      <link href="/2021/11/18/go-basic-data-type/"/>
      <url>/2021/11/18/go-basic-data-type/</url>
      
        <content type="html"><![CDATA[<h1 id="GO基本数据类型"><a href="#GO基本数据类型" class="headerlink" title="GO基本数据类型"></a>GO基本数据类型</h1><h2 id="GO基本数据类型-1"><a href="#GO基本数据类型-1" class="headerlink" title="GO基本数据类型"></a>GO基本数据类型</h2><h3 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">//按长度分</span><span class="token builtin">int8</span> <span class="token builtin">int16</span> <span class="token builtin">int32</span> <span class="token builtin">int64</span><span class="token comment" spellcheck="true">//按有无符号分</span><span class="token builtin">uint8</span> <span class="token builtin">uint16</span> <span class="token builtin">uint32</span> <span class="token builtin">uint64</span><span class="token comment" spellcheck="true">//提供了平台自动匹配长度的int类型和uint类型</span><span class="token builtin">int</span> <span class="token builtin">uint</span><span class="token comment" spellcheck="true">//注意转换 只能位数少的往位数高的转，不然会出现数据丢失，报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">//主要有两种</span><span class="token builtin">float32</span> <span class="token builtin">float64</span><span class="token comment" spellcheck="true">//可以相互转换，但是高精度向低精度转出现精度损失</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token builtin">bool</span><span class="token comment" spellcheck="true">//注意只有 true和false 不可与整型互相转换</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="字符串型"><a href="#字符串型" class="headerlink" title="字符串型"></a>字符串型</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token builtin">string</span> <span class="token comment" spellcheck="true">//字符串基于UTF-8实现</span>f <span class="token operator">:=</span><span class="token string">"Golanga编程"</span><span class="token comment" spellcheck="true">//需要区分byte和rune byte一种是uint8类型,表明了ASCII码的一个字符。另外一种是rune类型,表明一个UTF-8字符，rune类型实际是一个int32,表示 Unicode 码</span><span class="token comment" spellcheck="true">//len(f)=12因为一个中文占三个字节</span><span class="token comment" spellcheck="true">//而utf8.RuneCountInString(f)是计算字符串的Unicode数量，为8个</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>字符串遍历<br>1.遍历每个 ASCII 字符<br>直接使用for</p><p>2.按Unicode 字符遍历字符串<br>使用 range</p><pre class="line-numbers language-go"><code class="language-go">str <span class="token operator">:=</span> <span class="token string">"快乐 everyday"</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> s <span class="token operator">:=</span> <span class="token keyword">range</span> str<span class="token punctuation">{</span>  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"unicode: %c %d\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token function">len</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">;</span>i<span class="token operator">++</span>  <span class="token punctuation">{</span>  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"ascii: %c %d\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Unicode和ASCII的区别"><a href="#Unicode和ASCII的区别" class="headerlink" title="Unicode和ASCII的区别"></a>Unicode和ASCII的区别</h4><p>Unicode是字符集。ASCⅡ也是一种字符集。</p><p>字符集为每一个字符分配一个惟一的ID,咱们使用到的全部字符在 Unicode字符集中都有惟一的一个ID对应,例如上面例子中的a在 Unicode与ASCII中的编码都是97。</p><p>“你“在 Unicode中的编码为20320,可是在不一样国家的字符集中,“你”的ID会不一样。而不管任何状况下, Unicode中的字符的ID都是不会变化的。</p><p>UTF-8是编码规则,将 Unicode中字符的ID以某种方式进行编码。UTF-8的是一种变长编码规则,从1到4个字节不等。</p><h4 id="UTF-8编码规则"><a href="#UTF-8编码规则" class="headerlink" title="UTF-8编码规则"></a>UTF-8编码规则</h4><p>UTF-8 编码，它使用 1 - 4 个字节表示 Unicode 码，Unicode 码到 UTF-8 编码的转换如下：</p><pre class="line-numbers language-go"><code class="language-go">0xxxxxxx                                   runes <span class="token number">0</span>−<span class="token function">127</span> <span class="token punctuation">(</span>ASCII<span class="token punctuation">)</span>110xxxxx 10xxxxxx                          <span class="token number">128</span>−<span class="token number">2047</span> ues <span class="token operator">&lt;</span><span class="token number">128</span> <span class="token function">un</span> <span class="token punctuation">(</span>val used<span class="token punctuation">)</span>1110xxxx 10xxxxxx 10xxxxxx                 <span class="token number">2048</span>−<span class="token number">65535</span> ues <span class="token operator">&lt;</span><span class="token number">2048</span> <span class="token function">un</span> <span class="token punctuation">(</span>val used<span class="token punctuation">)</span>11110xxx 10xxxxxx 10xxxxxx 10xxxxxx        <span class="token number">65536</span>−<span class="token number">0x10ff</span> f <span class="token function">f</span> <span class="token punctuation">(</span>other values unus ed<span class="token punctuation">)</span>————————————————<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 后端 </tag>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go指针</title>
      <link href="/2021/11/18/go-pointer/"/>
      <url>/2021/11/18/go-pointer/</url>
      
        <content type="html"><![CDATA[<h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><h2 id="指针-1"><a href="#指针-1" class="headerlink" title="指针"></a>指针</h2><h3 id="unsafe-Pointer"><a href="#unsafe-Pointer" class="headerlink" title="unsafe.Pointer"></a>unsafe.Pointer</h3><p><strong>unsafe.Pointer的定义</strong></p><p>从unsate.Pointer的定义如下，从定义中我们可以看出，Pointer的本质是一个int的指针：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> ArbitraryType <span class="token builtin">int</span><span class="token keyword">type</span> Pointer <span class="token operator">*</span>ArbitraryType<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>unsafe.Pointer的功能介绍</strong></p><p>下面再来看一下Golang官网对于unsafe.Pointer的介绍：</p><ul><li>任意类型的指针值都可以转换为unsafe.Pointer（A pointer value of any type can be converted to a Pointer.）</li><li>unsafe.Pointer可以转换为任意类型的指针值（A Pointer can be converted to a pointer value of any type.）</li><li>uintptr可以转换为unsafe.Pointer（A uintptr can be converted to a Pointer.）</li><li>unsafe.Pointer可以转换为uintptr（A Pointer can be converted to a uintptr.）</li></ul><p>从上面的功能介绍可以看到，Pointer允许程序突破Golang的类型系统的限制，任意读写内存，使用时需要额外小心，正如它的包名unsafe所提示的一样。</p><p>PS:uintptr本质上是一个用于表示地址值的无符号整数，而不是一个引用，它表示程序中使用的某个对象的地址值。</p><p>## </p><p><strong>指针类型转换</strong></p><p>下面以<em>int64转换为</em>int为例子，说明unsafe.Pointer在指针类型转换时的使用，如下：</p><pre class="line-numbers language-golang"><code class="language-golang">func main() {    i := int64(1)    var iPtr *int    // iPtr = &i // 错误    iPtr = (*int)(unsafe.Pointer(&i))    fmt.Printf("%d\n", *iPtr)}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，这种类型转换，需要保证转换后的类型的大小不大于转换前的类型，且具有相同的内存布局，则可将数据解释为另一个类型。反之，如将int32的指针，转换为int64的指针，在后续的读写中，可能会发生错误。</p><p><strong>读写结构内部成员</strong></p><p>上面的类型转换只是一个简单的例子，在实际开发中，使用unsafe.Pointer进行类型转换一般用于读取结构的私有成员变量或者修改结构的变量，下面以修改一个string变量的值为例子，说明类型转换对于任意内存读写。</p><p>我们先来看看在Golang中string是如何定义的：</p><pre class="line-numbers language-golang"><code class="language-golang">type stringStruct struct {    str unsafe.Pointer    len int}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>string的结构由是由一个指向字节数组的unsafe.Pointer和int类型的长度字段组成，我们可以定义一下与其结构相同的类型，并通过unsafe.Pointer把string的指针转换并赋值到新类型的变量中，通过操作该变量来读写string内部的成员。</p><p>在Golang中已经存在这样的结构体了，它就是reflect.StringHeader，它的定义如下：</p><pre class="line-numbers language-golang"><code class="language-golang">// StringHeader is the runtime representation of a string.// It cannot be used safely or portably and its representation may// change in a later release.// Moreover, the Data field is not sufficient to guarantee the data// it references will not be garbage collected, so programs must keep// a separate, correctly typed pointer to the underlying data.type StringHeader struct {    Data uintptr    Len  int}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>unsafe.Pointer与uintptr在内存结构上是相同的，下面通过一个原地修改字符串的值来演示相关的操作：</p><pre class="line-numbers language-golang"><code class="language-golang">func main() {    str1 := "hello world"    hdr1 := (*reflect.StringHeader)(unsafe.Pointer(&str1)) // 注1    fmt.Printf("str:%s, data addr:%d, len:%d\n", str1, hdr1.Data, hdr1.Len)    str2 := "abc"    hdr2 := (*reflect.StringHeader)(unsafe.Pointer(&str2))    hdr1.Data = hdr2.Data // 注2    hdr1.Len = hdr2.Len   // 注3    fmt.Printf("str:%s, data addr:%d, len:%d\n", str1, hdr1.Data, hdr1.Len)}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其运行结果如下：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token property">str</span><span class="token punctuation">:</span>hello world, data <span class="token property">addr</span><span class="token punctuation">:</span><span class="token number">4996513</span>, <span class="token property">len</span><span class="token punctuation">:</span><span class="token number">11</span><span class="token property">str</span><span class="token punctuation">:</span>abc, data <span class="token property">addr</span><span class="token punctuation">:</span><span class="token number">4992867</span>, <span class="token property">len</span><span class="token punctuation">:</span><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>代码解释：</p><ul><li>注1：该行代码是把str1转化为unsafe.Pointer后，再把unsafe.Pointer转换来StringHeader的指针，然后通过读写hdr1的成员即可读写str1成员的值</li><li>注2：通过修改hdr1的Data的值，修改str1的字节数组的指向</li><li>注3：为了保证字符串的结果是完整的，通过修改hdr1的Len的值，修改str1的长度字段</li></ul><p>最后，str1的值，已经被修改成了str2的值，即”abc”。</p><p><strong>指针运算</strong></p><p>下面的代码，模拟了通过指针移动，遍历slice的功能，其本质思想是，找到slice的第一个元素的地址，然后通过加上slice每个元素所占的大小作为偏移量，实现指针的移动和运算。</p><pre class="line-numbers language-golang"><code class="language-golang">func main() {    data := []byte("abcd")    for i := 0; i < len(data); i++ {        ptr := unsafe.Pointer(uintptr(unsafe.Pointer(&data[0])) + uintptr(i)*unsafe.Sizeof(data[0]))         fmt.Printf("%c,", *(*byte)(unsafe.Pointer(ptr)))    }    fmt.Printf("\n")}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其运行结果如下：</p><pre class="line-numbers language-swift"><code class="language-swift">a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>代码解释：</p><p>要理解上述代码，首选需要了解两个原则，分别是：</p><ul><li>其他类型的指针只能转化为unsafe.Pointer，也只有unsafe.Pointer才能转化成任意类型的指针</li><li>只有uintptr才支持加减操作，而uintptr是一个非负整数，表示地址值，没有类型信息，以字节为单位</li></ul><p>for循环的ptr赋值是该例子中的重点代码，它表示：</p><ol><li>把data的第0个元素的地址，转化为unsafe.Pointer，再把它转换成uintptr，用于加减运算，即（uintptr(unsafe.Pointer(&amp;data[0])) ）</li><li>加上第i个元素的偏移量，得到一个新的uintptr值，计算方法为i<em>每个元素所占的字节数，即（+ uintptr(i)</em>unsafe.Sizeof(data[0])）</li><li>把新的uintptr再转化为unsafe.Pointer，用于在后续的打印操作中，转化为实际类型的指针</li></ol><p><strong>总结</strong></p><p>总结一下unsafe.Pointer的使用法则就是：</p><ul><li>任意类型的指针值都可以转换为unsafe.Pointer，unsafe.Pointer也可以转换为任意类型的指针值</li><li>unsafe.Pointer与uintptr可以实现相互转换</li><li>可以通过uintptr可以进行加减操作，从而实现指针的运算</li></ul><h3 id="uintptr和unsafe-Pointer"><a href="#uintptr和unsafe-Pointer" class="headerlink" title="uintptr和unsafe.Pointer"></a>uintptr和unsafe.Pointer</h3><ul><li>unsafe.Pointer只是单纯的通用指针类型，用于转换不同类型指针，它不可以参与指针运算；</li><li>而uintptr是用于指针运算的，GC 不把 uintptr 当指针，也就是说 uintptr 无法持有对象， uintptr 类型的目标会被回收；</li><li>unsafe.Pointer 可以和 普通指针 进行相互转换；</li><li>unsafe.Pointer 可以和 uintptr 进行相互转换</li></ul><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> W <span class="token keyword">struct</span> <span class="token punctuation">{</span> b <span class="token builtin">int32</span> c <span class="token builtin">int64</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">var</span> w <span class="token operator">*</span>W <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>W<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//这时w的变量打印出来都是默认值0，0</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>w<span class="token punctuation">.</span>b<span class="token punctuation">,</span>w<span class="token punctuation">.</span>c<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//现在我们通过指针运算给b变量赋值为10</span> b <span class="token operator">:=</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token function">uintptr</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> unsafe<span class="token punctuation">.</span><span class="token function">Offsetof</span><span class="token punctuation">(</span>w<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">10</span> <span class="token comment" spellcheck="true">//此时结果就变成了10，0</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>w<span class="token punctuation">.</span>b<span class="token punctuation">,</span>w<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="普通指针"><a href="#普通指针" class="headerlink" title="普通指针"></a>普通指针</h3><pre class="line-numbers language-go"><code class="language-go">str<span class="token operator">:=</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">*</span>str<span class="token operator">=</span><span class="token string">"Golang is Good"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 后端 </tag>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go Defer</title>
      <link href="/2021/11/18/go-defer/"/>
      <url>/2021/11/18/go-defer/</url>
      
        <content type="html"><![CDATA[<h1 id="Defer"><a href="#Defer" class="headerlink" title="Defer"></a>Defer</h1><h2 id="Defer-1"><a href="#Defer-1" class="headerlink" title="Defer"></a>Defer</h2><h3 id="defer的执行顺序"><a href="#defer的执行顺序" class="headerlink" title="defer的执行顺序"></a>defer的执行顺序</h3><p>多个defer出现的时候，<strong>它是一个“栈”的关系，也就是先进后出</strong>。一个函数中，写在前面的defer会比写在后面的defer调用的晚。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">defer</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">defer</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">defer</span> <span class="token function">func3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">func3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211117233010.png" alt="image-20211029201054092"></p><p>输出结果</p><pre class="line-numbers language-go"><code class="language-go">CBA<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="defer与return谁先谁后"><a href="#defer与return谁先谁后" class="headerlink" title="defer与return谁先谁后"></a>defer与return谁先谁后</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">deferFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"defer func called"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">returnFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"return func called"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">returnAndDefer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">defer</span> <span class="token function">deferFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">returnFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">returnAndDefer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果为：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">return</span> <span class="token keyword">func</span> called<span class="token keyword">defer</span> <span class="token keyword">func</span> called<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>结论为：<strong>return之后的语句先执行，defer后的语句后执行</strong></p><h3 id="函数的返回值初始化"><a href="#函数的返回值初始化" class="headerlink" title="函数的返回值初始化"></a>函数的返回值初始化</h3><p>该知识点不属于defer本身，但是调用的场景却与defer有联系，所以也算是defer必备了解的知识点之一。</p><p>如 ： <code>func DeferFunc1(i int) (t int) {}</code><br>其中返回值<code>t int</code>，这个<code>t</code>会在函数起始处被初始化为对应类型的零值并且作用域为整个函数</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211117233023.png" alt="image-20211029202157111"></p><blockquote><p>示例代码</p></blockquote><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">DeferFunc1</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>t <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"t = "</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">DeferFunc11</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果</p><pre class="line-numbers language-go"><code class="language-go">t <span class="token operator">=</span>  <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>证明，<strong>只要声明函数的返回值变量名称，就会在函数初始化时候为之赋值为0，而且在函数体作用域可见</strong>。</p><h3 id="有名函数返回值遇见defer情况"><a href="#有名函数返回值遇见defer情况" class="headerlink" title="有名函数返回值遇见defer情况"></a>有名函数返回值遇见defer情况</h3><p>在没有defer的情况下，其实函数的返回就是与return一致的，但是有了defer就不一样了。</p><p>​    我们通过<strong>知识点2</strong>得知，先return，再defer，所以在执行完return之后，还要再执行defer里的语句，依然可以修改本应该返回的结果。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">returnButDefer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>t <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//t初始化0， 并且作用域为该函数全域</span>    <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        t <span class="token operator">=</span> t <span class="token operator">*</span> <span class="token number">10</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">returnButDefer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    该<code>returnButDefer()</code>本应的返回值是<code>1</code>，但是在return之后，又被defer的匿名func函数执行，所以<code>t=t*10</code>被执行，最后<code>returnButDefer()</code>返回给上层<code>main()</code>的结果为<code>10</code></p><pre class="line-numbers language-go"><code class="language-go">$ <span class="token keyword">go</span> run test<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="defer遇见panic"><a href="#defer遇见panic" class="headerlink" title="defer遇见panic"></a>defer遇见panic</h3><p>我们知道，能够触发defer的是遇见return(或函数体到末尾)和遇见panic。</p><p>根据<strong>知识点2</strong>，我们知道，defer遇见return情况如下：</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211117233032.png" alt="image-20211029203421895"></p><p>那么，遇到panic时，遍历本协程的defer链表，并执行defer。在执行defer过程中:遇到recover则停止panic，返回recover处继续往下执行。如果没有遇到recover，遍历完本协程的defer链表后，向stderr抛出panic信息。</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211117233043.png" alt="image-20211029203644486"></p><p><strong>A. defer遇见panic，但是并不捕获异常的情况</strong></p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">defer_call</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"main 正常结束"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">defer_call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"defer: panic 之前1"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"defer: panic 之前2"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"异常内容"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//触发defer出栈</span>    <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"defer: panic 之后，永远执行不到"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果</strong></p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">defer</span><span class="token punctuation">:</span> <span class="token builtin">panic</span> 之前<span class="token number">2</span><span class="token keyword">defer</span><span class="token punctuation">:</span> <span class="token builtin">panic</span> 之前<span class="token number">1</span><span class="token builtin">panic</span><span class="token punctuation">:</span> 异常内容<span class="token comment" spellcheck="true">//... 异常堆栈信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>defer遇见panic，并捕获异常</strong></p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">defer_call</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"main 正常结束"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">defer_call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"defer: panic 之前1, 捕获异常"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"defer: panic 之前2, 不捕获"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"异常内容"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//触发defer出栈</span>    <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"defer: panic 之后, 永远执行不到"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果</strong></p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">defer</span><span class="token punctuation">:</span> <span class="token builtin">panic</span> 之前<span class="token number">2</span><span class="token punctuation">,</span> 不捕获<span class="token keyword">defer</span><span class="token punctuation">:</span> <span class="token builtin">panic</span> 之前<span class="token number">1</span><span class="token punctuation">,</span> 捕获异常异常内容main 正常结束<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>defer 最大的功能是 panic 后依然有效</strong><br>所以defer可以保证你的一些资源一定会被关闭，从而避免一些异常出现的问题。</p><h3 id="defer中包含panic"><a href="#defer中包含panic" class="headerlink" title="defer中包含panic"></a>defer中包含panic</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">{</span>           fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>       <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>           fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"fatal"</span><span class="token punctuation">)</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"defer panic"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"panic"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果</strong></p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">defer</span> <span class="token builtin">panic</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>分析</strong></p><p><strong>panic仅有最后一个可以被revover捕获</strong>。</p><p>触发<code>panic(&quot;panic&quot;)</code>后defer顺序出栈执行，第一个被执行的defer中 会有<code>panic(&quot;defer panic&quot;)</code>异常语句，这个异常将会覆盖掉main中的异常<code>panic(&quot;panic&quot;)</code>，最后这个异常被第二个执行的defer捕获到。</p><h3 id="defer下的函数参数包含子函数"><a href="#defer下的函数参数包含子函数" class="headerlink" title="defer下的函数参数包含子函数"></a>defer下的函数参数包含子函数</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">function</span><span class="token punctuation">(</span>index <span class="token builtin">int</span><span class="token punctuation">,</span> value <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>    <span class="token keyword">return</span> index<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">defer</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">defer</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    这里，有4个函数，他们的index序号分别为1，2，3，4。</p><p>那么这4个函数的先后执行顺序是什么呢？这里面有两个defer， 所以defer一共会压栈两次，先进栈1，后进栈2。 那么在压栈function1的时候，需要连同函数地址、函数形参一同进栈，那么为了得到function1的第二个参数的结果，所以就需要先执行function3将第二个参数算出，那么function3就被第一个执行。同理压栈function2，就需要执行function4算出function2第二个参数的值。然后函数结束，先出栈fuction2、再出栈function1.</p><p>​    所以顺序如下：</p><ul><li>defer压栈function1，压栈函数地址、形参1、形参2(调用function3) –&gt; 打印3</li><li>defer压栈function2，压栈函数地址、形参1、形参2(调用function4) –&gt; 打印4</li><li>defer出栈function2, 调用function2 –&gt; 打印2</li><li>defer出栈function1, 调用function1–&gt; 打印1</li></ul><pre class="line-numbers language-go"><code class="language-go"><span class="token number">3</span><span class="token number">4</span><span class="token number">2</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>练习题分析：</p><p><strong>DeferFunc1</strong></p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">DeferFunc1</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>t <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    t <span class="token operator">=</span> i    <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        t <span class="token operator">+=</span> <span class="token number">3</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> t<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>将返回值t赋值为传入的i，此时t为1</li><li>执行return语句将t赋值给t（等于啥也没做）</li><li>执行defer方法，将t + 3 = 4</li><li>函数返回 4<br>因为t的作用域为整个函数所以修改有效。</li></ol><p><strong>DeferFunc2</strong></p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">DeferFunc2</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    t <span class="token operator">:=</span> i    <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        t <span class="token operator">+=</span> <span class="token number">3</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> t<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>创建变量t并赋值为1</li><li>执行return语句，注意这里是将t赋值给返回值，此时返回值为1（这个返回值并不是t）</li><li>执行defer方法，将t + 3 = 4</li><li>函数返回返回值1</li></ol><p>也可以按照如下代码理解</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">DeferFunc2</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>result <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    t <span class="token operator">:=</span> i    <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        t <span class="token operator">+=</span> <span class="token number">3</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> t<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码return的时候相当于将t赋值给了result，当defer修改了t的值之后，对result是不会造成影响的。</p><p><strong>DeferFunc4</strong></p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">DeferFunc4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>t <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>    t <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>初始化返回值t为零值 0</li><li>首先执行defer的第一步，赋值defer中的func入参t为0</li><li>执行defer的第二步，将defer压栈</li><li>将t赋值为1</li><li>执行return语句，将返回值t赋值为2</li><li>执行defer的第三步，出栈并执行<br>因为在入栈时defer执行的func的入参已经赋值了，此时它作为的是一个形式参数，所以打印为0；相对应的因为最后已经将t的值修改为2，所以再打印一个2</li></ol>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 后端 </tag>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go接口 interface</title>
      <link href="/2021/11/18/go-interface/"/>
      <url>/2021/11/18/go-interface/</url>
      
        <content type="html"><![CDATA[<h1 id="Go接口-interface"><a href="#Go接口-interface" class="headerlink" title="Go接口 interface"></a>Go接口 interface</h1><h2 id="Go接口-interface-1"><a href="#Go接口-interface-1" class="headerlink" title="Go接口 interface"></a>Go接口 interface</h2><h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> People <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token function">Speak</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span>  <span class="token comment" spellcheck="true">//method(parama)(return param)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//实现接口</span><span class="token keyword">type</span> Stduent <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>stu <span class="token operator">*</span>Stduent<span class="token punctuation">)</span> <span class="token function">Speak</span><span class="token punctuation">(</span>think <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>talk <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> think <span class="token operator">==</span> <span class="token string">"love"</span> <span class="token punctuation">{</span>        talk <span class="token operator">=</span> <span class="token string">"You are a good boy"</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        talk <span class="token operator">=</span> <span class="token string">"hi"</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> peo People <span class="token operator">=</span> Stduent<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//编译出错，需要改为&amp;Student{} People为interface类型，就是指针类型 </span>    think <span class="token operator">:=</span> <span class="token string">"love"</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>peo<span class="token punctuation">.</span><span class="token function">Speak</span><span class="token punctuation">(</span>think<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> Tank <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token function">Walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">Fire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">type</span> Plane <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token function">Fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//类似于对象中的接口继承特性</span><span class="token keyword">type</span> tankPlane <span class="token keyword">interface</span> <span class="token punctuation">{</span>    Tank    Plane<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="接口的内部构造"><a href="#接口的内部构造" class="headerlink" title="接口的内部构造"></a>接口的内部构造</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">type</span> People <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">type</span> Student <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>stu <span class="token operator">*</span>Student<span class="token punctuation">)</span> <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">live</span><span class="token punctuation">(</span><span class="token punctuation">)</span> People <span class="token punctuation">{</span>    <span class="token keyword">var</span> stu <span class="token operator">*</span>Student    <span class="token keyword">return</span> stu<span class="token punctuation">}</span><span class="token comment" spellcheck="true">//最终输出BBBB</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token function">live</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"AAAAAAA"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"BBBBBBB"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>interface在使用的过程中，共有两种表现形式</p><p>一种为<strong>空接口(empty interface)</strong>，定义如下：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">var</span> MyInterface <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>另一种为<strong>非空接口(non-empty interface)</strong>, 定义如下：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> MyInterface <span class="token keyword">interface</span> <span class="token punctuation">{</span>        <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这两种interface类型分别用两种<code>struct</code>表示，空接口为<code>eface</code>, 非空接口为<code>iface</code>.</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211117232740.png" alt="image-20211024203358377"></p><h4 id="空接口eface"><a href="#空接口eface" class="headerlink" title="空接口eface"></a><strong>空接口eface</strong></h4><p>空接口eface结构，由两个属性构成，一个是类型信息_type，一个是数据信息。其数据结构声明如下：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> eface <span class="token keyword">struct</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//空接口</span>    _type <span class="token operator">*</span>_type         <span class="token comment" spellcheck="true">//类型信息</span>    data  unsafe<span class="token punctuation">.</span>Pointer <span class="token comment" spellcheck="true">//指向数据的指针(go语言中特殊的指针类型unsafe.Pointer类似于c语言中的void*)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>_type属性</strong>：是GO语言中所有类型的公共描述，Go语言几乎所有的数据结构都可以抽象成 _type，是所有类型的公共描述，<strong>type负责决定data应该如何解释和操作，</strong>type的结构代码如下:</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> _type <span class="token keyword">struct</span> <span class="token punctuation">{</span>    size       <span class="token builtin">uintptr</span>  <span class="token comment" spellcheck="true">//类型大小</span>    ptrdata    <span class="token builtin">uintptr</span>  <span class="token comment" spellcheck="true">//前缀持有所有指针的内存大小</span>    hash       <span class="token builtin">uint32</span>   <span class="token comment" spellcheck="true">//数据hash值</span>    tflag      tflag    align      <span class="token builtin">uint8</span>    <span class="token comment" spellcheck="true">//对齐</span>    fieldalign <span class="token builtin">uint8</span>    <span class="token comment" spellcheck="true">//嵌入结构体时的对齐</span>    kind       <span class="token builtin">uint8</span>    <span class="token comment" spellcheck="true">//kind 有些枚举值kind等于0是无效的</span>    alg        <span class="token operator">*</span>typeAlg <span class="token comment" spellcheck="true">//函数指针数组，类型实现的所有方法</span>    gcdata    <span class="token operator">*</span><span class="token builtin">byte</span>    str       nameOff    ptrToThis typeOff<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>data属性:</strong> 表示指向具体的实例数据的指针，他是一个<code>unsafe.Pointer</code>类型，相当于一个C的万能指针<code>void*</code>。</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211117232759.png" alt="image-20211024203625680"></p><h4 id="非空接口iface"><a href="#非空接口iface" class="headerlink" title="非空接口iface"></a>非空接口iface</h4><p>iface 表示 non-empty interface 的数据结构，非空接口初始化的过程就是初始化一个iface类型的结构，其中<code>data</code>的作用同<code>eface</code>的相同</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> iface <span class="token keyword">struct</span> <span class="token punctuation">{</span>  tab  <span class="token operator">*</span>itab  data unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>iface结构中最重要的是itab结构（结构如下），每一个 <code>itab</code> 都占 32 字节的空间。itab可以理解为<code>pair&lt;interface type, concrete type&gt;</code> 。itab里面包含了interface的一些关键信息，比如method的具体实现。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> itab <span class="token keyword">struct</span> <span class="token punctuation">{</span>  inter  <span class="token operator">*</span>interfacetype   <span class="token comment" spellcheck="true">// 接口自身的元信息</span>  _type  <span class="token operator">*</span>_type           <span class="token comment" spellcheck="true">// 具体类型的元信息</span>  link   <span class="token operator">*</span>itab  bad    <span class="token builtin">int32</span>  hash   <span class="token builtin">int32</span>            <span class="token comment" spellcheck="true">// _type里也有一个同样的hash，此处多放一个是为了方便运行接口断言</span>  fun    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token builtin">uintptr</span>       <span class="token comment" spellcheck="true">// 函数指针，指向具体类型所实现的方法</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><code>interface type</code>包含了一些关于interface本身的信息，比如<code>package path</code>，包含的<code>method</code>。这里的interfacetype是定义interface的一种抽象表示。</li><li><code>type</code>表示具体化的类型，与eface的 <em>type类型相同。</em></li><li><code>hash</code>字段其实是对<code>_type.hash</code>的拷贝，它会在interface的实例化时，用于快速判断目标类型和接口中的类型是否一致。另，Go的interface的Duck-typing机制也是依赖这个字段来实现。</li><li><code>fun</code>字段其实是一个动态大小的数组，虽然声明时是固定大小为1，但在使用时会直接通过fun指针获取其中的数据，并且不会检查数组的边界，所以该数组中保存的元素数量是不确定的。</li></ol><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211117232810.png" alt="image-20211024204329046"></p><p>所以，People拥有一个Show方法的，属于非空接口，People的内部定义应该是一个<code>iface</code>结构体</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> People <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211117232819.png" alt="image-20211024204624679"></p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">live</span><span class="token punctuation">(</span><span class="token punctuation">)</span> People <span class="token punctuation">{</span>    <span class="token keyword">var</span> stu <span class="token operator">*</span>Student    <span class="token keyword">return</span> stu      <span class="token punctuation">}</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>stu是一个指向nil的空指针，但是最后<code>return stu</code> 会触发<code>匿名变量 People = stu</code>值拷贝动作，所以最后<code>live()</code>放回给上层的是一个<code>People insterface{}</code>类型，也就是一个<code>iface struct{}</code>类型。 stu为nil，只是<code>iface</code>中的data 为nil而已。 但是<code>iface struct{}</code>本身并不为nil.</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211117232847.png" alt="image-20211024204734844"></p><p>所以之前的判断结果为<code>BBBBBBB</code>。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Foo</span><span class="token punctuation">(</span>x <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"empty interface"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"non-empty interface"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> p <span class="token operator">*</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token boolean">nil</span>    <span class="token function">Foo</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果为non-empty interface</p><p>不难看出，<code>Foo()</code>的形参<code>x interface{}</code>是一个空接口类型<code>eface struct{}</code></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211117232854.png" alt="image-20211024205132484"></p><p>在执行<code>Foo(p)</code>的时候，触发<code>x interface{} = p</code>语句，所以此时 x结构如下。</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211117232901.png" alt="image-20211024205200117"></p><p>所以 x 结构体本身不为nil，而是data指针指向的p为nil。</p><h3 id="inteface-与-interface"><a href="#inteface-与-interface" class="headerlink" title="inteface{}与*interface{}"></a>inteface{}与*interface{}</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> S <span class="token keyword">struct</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">f</span><span class="token punctuation">(</span>x <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">g</span><span class="token punctuation">(</span>x <span class="token operator">*</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    s <span class="token operator">:=</span> S<span class="token punctuation">{</span><span class="token punctuation">}</span>    p <span class="token operator">:=</span> <span class="token operator">&amp;</span>s    <span class="token function">f</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//A</span>    <span class="token function">g</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//B</span>    <span class="token function">f</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//C</span>    <span class="token function">g</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//D</span>  <span class="token comment" spellcheck="true">//B D会报错</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Golang是强类型语言，interface是所有golang类型的父类 函数中<code>func f(x interface{})</code>的<code>interface{}</code>可以支持传入golang的任何类型，包括指针，但是函数<code>func g(x *interface{})</code>只能接受<code>*interface{}</code></p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 后端 </tag>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 内存四区</title>
      <link href="/2021/11/18/go-memory4/"/>
      <url>/2021/11/18/go-memory4/</url>
      
        <content type="html"><![CDATA[<h1 id="内存四区"><a href="#内存四区" class="headerlink" title="内存四区"></a>内存四区</h1><h2 id="内存四区概念："><a href="#内存四区概念：" class="headerlink" title="内存四区概念："></a>内存四区概念：</h2><h3 id="A-数据类型本质："><a href="#A-数据类型本质：" class="headerlink" title="A.数据类型本质："></a>A.数据类型本质：</h3><p>​    固定内存大小的别名</p><h3 id="B-数据类型的作用："><a href="#B-数据类型的作用：" class="headerlink" title="B. 数据类型的作用："></a>B. 数据类型的作用：</h3><p>​    编译器预算对象(变量)分配的内存空间大小。</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211118002640.png" alt="image-20211024175057710"></p><h3 id="C-内存4区"><a href="#C-内存4区" class="headerlink" title="C.内存4区"></a>C.内存4区</h3><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211118002654.png" alt="image-20211024175153459"></p><p>流程说明</p><p>1、操作系统把物理硬盘代码load到内存</p><p>2、操作系统把c代码分成四个区</p><p>3、操作系统找到main函数入口执行</p><h4 id="栈区-Stack-："><a href="#栈区-Stack-：" class="headerlink" title="栈区(Stack)："></a>栈区(Stack)：</h4><p>​    空间较小，要求数据读写性能高，数据存放时间较短暂。由编译器自动分配和释放，存放函数的参数值、函数的调用流程方法地址、局部变量等(局部变量如果产生逃逸现象，可能会挂在在堆区)</p><h4 id="堆区-heap"><a href="#堆区-heap" class="headerlink" title="堆区(heap):"></a>堆区(heap):</h4><p>​    空间充裕，数据存放时间较久。一般由开发者分配及释放(但是Golang中会根据变量的逃逸现象来选择是否分配到栈上或堆上)，启动Golang的GC由GC清除机制自动回收。</p><h4 id="全局区-静态全局变量区"><a href="#全局区-静态全局变量区" class="headerlink" title="全局区-静态全局变量区:"></a>全局区-静态全局变量区:</h4><p>​    全局变量的开辟是在程序在<code>main</code>之前就已经放在内存中。而且对外完全可见。即作用域在全部代码中，任何同包代码均可随时使用，在变量会搞混淆，而且在局部函数中如果同名称变量使用<code>:=</code>赋值会出现编译错误。</p><p>​    全局变量最终在进程退出时，由操作系统回收。</p><p>常量区也归属于全局区，常量为存放数值字面值单位，即不可修改。或者说的有的常量是直接挂钩字面值的。</p><p>比如:</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">const</span> cl <span class="token operator">=</span> <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>cl是字面量10的对等符号。</p><p>所以在golang中，常量是无法取出地址的，因为字面量符号并没有地址而言。</p><p>### </p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 后端 </tag>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 反射</title>
      <link href="/2021/11/18/go-reflect/"/>
      <url>/2021/11/18/go-reflect/</url>
      
        <content type="html"><![CDATA[<h1 id="Go-反射"><a href="#Go-反射" class="headerlink" title="Go 反射"></a>Go 反射</h1><h2 id="Go-反射-1"><a href="#Go-反射-1" class="headerlink" title="Go 反射"></a>Go 反射</h2><p>通过反射可以获取丰富的类型信息，并可以利用这些类型信息做非常灵活的工作。</p><p>支持反射的语言可以在程序编译期将变量的反射信息，如字段名称、类型信息、结构体信息等整合到可执行文件中，并给程序提供接口访问反射信息，这样就可以在程序运行期获取类型的反射信息，并且有能力修改它们。</p><h3 id="reflect-包"><a href="#reflect-包" class="headerlink" title="reflect 包"></a>reflect 包</h3><p>Go语言中的反射是由 reflect 包提供支持的，它定义了两个重要的类型 Type 和 Value 任意接口值在反射中都可以理解为由 reflect.Type 和 reflect.Value 两部分组成，并且 reflect 包提供了 reflect.TypeOf 和 reflect.ValueOf 两个函数来获取任意对象的 Value 和 Type</p><h3 id="反射的类型对象-reflect-Type"><a href="#反射的类型对象-reflect-Type" class="headerlink" title="反射的类型对象(reflect.Type)"></a>反射的类型对象(reflect.Type)</h3><p>在Go语言程序中，使用 reflect.TypeOf() 函数可以获得任意值的类型对象（reflect.Type），程序通过类型对象可以访问任意值的类型信息。</p><p>Go语言中的类型名称对应的反射获取方法是 reflect.Type 中的 Name() 方法，返回表示类型名称的字符串；类型归属的种类（Kind）使用的是 reflect.Type 中的 Kind() 方法，返回 reflect.Kind 类型的常量。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> cat <span class="token keyword">struct</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    typeofCat <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>cat<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>typeofCat<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> typeofCat<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//cat struct</span>  typeofCat <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cat<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>typeofCat<span class="token punctuation">,</span> typeofCat<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//*main.cat ptr</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Go语言程序中的类型（Type）指的是系统原生数据类型，如 int、string、bool、float32 等类型，以及使用 type 关键字定义的类型，这些类型的名称就是其类型本身的名称。例如使用 type A struct{} 定义结构体时，A 就是 struct{} 的类型。</p><p>种类（Kind）指的是对象归属的品种，在 reflect 包中有如下定义：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> Kind <span class="token builtin">uint</span><span class="token keyword">const</span> <span class="token punctuation">(</span>    Invalid Kind <span class="token operator">=</span> <span class="token boolean">iota</span>  <span class="token comment" spellcheck="true">// 非法类型</span>    Bool                 <span class="token comment" spellcheck="true">// 布尔型</span>    Int                  <span class="token comment" spellcheck="true">// 有符号整型</span>    Int8                 <span class="token comment" spellcheck="true">// 有符号8位整型</span>    Int16                <span class="token comment" spellcheck="true">// 有符号16位整型</span>    Int32                <span class="token comment" spellcheck="true">// 有符号32位整型</span>    Int64                <span class="token comment" spellcheck="true">// 有符号64位整型</span>    Uint                 <span class="token comment" spellcheck="true">// 无符号整型</span>    Uint8                <span class="token comment" spellcheck="true">// 无符号8位整型</span>    Uint16               <span class="token comment" spellcheck="true">// 无符号16位整型</span>    Uint32               <span class="token comment" spellcheck="true">// 无符号32位整型</span>    Uint64               <span class="token comment" spellcheck="true">// 无符号64位整型</span>    Uintptr              <span class="token comment" spellcheck="true">// 指针</span>    Float32              <span class="token comment" spellcheck="true">// 单精度浮点数</span>    Float64              <span class="token comment" spellcheck="true">// 双精度浮点数</span>    Complex64            <span class="token comment" spellcheck="true">// 64位复数类型</span>    Complex128           <span class="token comment" spellcheck="true">// 128位复数类型</span>    Array                <span class="token comment" spellcheck="true">// 数组</span>    Chan                 <span class="token comment" spellcheck="true">// 通道</span>    Func                 <span class="token comment" spellcheck="true">// 函数</span>    Interface            <span class="token comment" spellcheck="true">// 接口</span>    Map                  <span class="token comment" spellcheck="true">// 映射</span>    Ptr                  <span class="token comment" spellcheck="true">// 指针</span>    Slice                <span class="token comment" spellcheck="true">// 切片</span>    String               <span class="token comment" spellcheck="true">// 字符串</span>    Struct               <span class="token comment" spellcheck="true">// 结构体</span>    UnsafePointer        <span class="token comment" spellcheck="true">// 底层指针</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="指针与指针指向的元素"><a href="#指针与指针指向的元素" class="headerlink" title="指针与指针指向的元素"></a>指针与指针指向的元素</h3><p>Go语言程序中对指针获取反射对象时，可以通过 reflect.Elem() 方法获取这个指针指向的元素类型，这个获取过程被称为取元素，等效于对指针类型变量做了一个<code>*</code>操作。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 声明一个空结构体</span>    <span class="token keyword">type</span> cat <span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 创建cat的实例</span>    ins <span class="token operator">:=</span> <span class="token operator">&amp;</span>cat<span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 获取结构体实例的反射类型对象</span>    typeOfCat <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>ins<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 显示反射类型对象的名称和种类</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"name:'%v' kind:'%v'\n"</span><span class="token punctuation">,</span> typeOfCat<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> typeOfCat<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 取类型的元素</span>    typeOfCat <span class="token operator">=</span> typeOfCat<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 显示反射类型对象的名称和种类</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"element name: '%v', element kind: '%v'\n"</span><span class="token punctuation">,</span> typeOfCat<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> typeOfCat<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go"><code class="language-go">name<span class="token punctuation">:</span><span class="token string">''</span> kind<span class="token punctuation">:</span><span class="token string">'ptr'</span> <span class="token comment" spellcheck="true">//*main.cat</span>element name<span class="token punctuation">:</span> <span class="token string">'cat'</span><span class="token punctuation">,</span> element kind<span class="token punctuation">:</span> <span class="token string">'struct'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="类型对象-reflect-StructField-reflect-Method"><a href="#类型对象-reflect-StructField-reflect-Method" class="headerlink" title="类型对象 reflect.StructField reflect.Method"></a>类型对象 reflect.StructField reflect.Method</h3><h4 id="reflect-StructField"><a href="#reflect-StructField" class="headerlink" title="reflect.StructField"></a>reflect.StructField</h4><p>任意值通过 reflect.TypeOf() 获得反射对象信息后，如果它的类型是结构体，可以通过反射值对象 reflect.Type 的 NumField() 和 Field() 方法获得结构体成员的详细信息。</p><p>与成员获取相关的 reflect.Type 的方法如下表所示。</p><table><thead><tr><th align="center"><strong>方法</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td align="center">Field(i int) StructField</td><td>根据索引返回索引对应的结构体字段的信息，当值不是结构体或索引超界时发生宕机</td></tr><tr><td align="center">NumField() int</td><td>返回结构体成员字段数量，当类型不是结构体或索引超界时发生宕机,<strong>字段大小写无所谓</strong></td></tr><tr><td align="center">FieldByName(name string) (StructField, bool)</td><td>根据给定字符串返回字符串对应的结构体字段的信息，没有找到时 bool 返回 false，当类型不是结构体或索引超界时发生宕机，<strong>可以找到小写的字段</strong></td></tr><tr><td align="center">FieldByIndex(index []int) StructField</td><td>多层成员访问时，根据 []int 提供的每个结构体的字段索引，返回字段的信息，没有找到时返回零值。当类型不是结构体或索引超界时发生宕机</td></tr><tr><td align="center">FieldByNameFunc(match func(string) bool) (StructField,bool)</td><td>根据匹配函数匹配需要的字段，当值不是结构体或索引超界时发生宕机</td></tr></tbody></table><p><strong>结构体字段类型</strong></p><p>reflect.Type 的 Field() 方法返回 StructField 结构，这个结构描述结构体的成员信息，通过这个信息可以获取成员与结构体的关系，如偏移、索引、是否为匿名字段、结构体标签（StructTag）等，而且还可以通过 StructField 的 Type 字段进一步获取结构体成员的类型信息。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> StructField <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Name <span class="token builtin">string</span>          <span class="token comment" spellcheck="true">// 字段名</span>    PkgPath <span class="token builtin">string</span>       <span class="token comment" spellcheck="true">// 字段路径</span>    Type      Type       <span class="token comment" spellcheck="true">// 字段反射类型对象</span>    Tag       StructTag  <span class="token comment" spellcheck="true">// 字段的结构体标签</span>    Offset    <span class="token builtin">uintptr</span>    <span class="token comment" spellcheck="true">// 字段在结构体中的相对偏移</span>    Index     <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>      <span class="token comment" spellcheck="true">// Type.FieldByIndex中的返回的索引值</span>    Anonymous <span class="token builtin">bool</span>       <span class="token comment" spellcheck="true">// 是否为匿名字段</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>字段说明如下：</p><ul><li>Name：为字段名称。</li><li>PkgPath：字段在结构体中的路径。</li><li>Type：字段本身的反射类型对象，类型为 reflect.Type，可以进一步获取字段的类型信息。</li><li>Tag：结构体标签，为结构体字段标签的额外信息，可以单独提取。</li><li>Index：FieldByIndex 中的索引顺序。</li><li>Anonymous：表示该字段是否为匿名字段。</li></ul><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 声明一个空结构体</span>    <span class="token keyword">type</span> cat <span class="token keyword">struct</span> <span class="token punctuation">{</span>        Name <span class="token builtin">string</span>        <span class="token comment" spellcheck="true">// 带有结构体tag的字段</span>        Type <span class="token builtin">int</span> <span class="token string">`json:"type" id:"100"`</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 创建cat的实例</span>    ins <span class="token operator">:=</span> cat<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">"mimi"</span><span class="token punctuation">,</span> Type<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 获取结构体实例的反射类型对象</span>      <span class="token comment" spellcheck="true">//注意使用结构体的一些函数时，如NumFiled等无法传入指针，否则会报reflect: NumField of non-struct type</span>    typeOfCat <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>ins<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 遍历结构体所有成员</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> typeOfCat<span class="token punctuation">.</span><span class="token function">NumField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取每个成员的结构体字段类型</span>        fieldType <span class="token operator">:=</span> typeOfCat<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 输出成员名和tag</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"name: %v  tag: '%v' type is %s,kind is %s\n"</span><span class="token punctuation">,</span> fieldType<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> fieldType<span class="token punctuation">.</span>Tag<span class="token punctuation">,</span>fieldType<span class="token punctuation">.</span>Type<span class="token punctuation">,</span>fieldType<span class="token punctuation">.</span>Type<span class="token punctuation">.</span>kind<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 通过字段名, 找到字段类型信息</span>    <span class="token keyword">if</span> catType<span class="token punctuation">,</span> ok <span class="token operator">:=</span> typeOfCat<span class="token punctuation">.</span><span class="token function">FieldByName</span><span class="token punctuation">(</span><span class="token string">"Type"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 从tag中取出需要的tag</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>catType<span class="token punctuation">.</span>Tag<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"json"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> catType<span class="token punctuation">.</span>Tag<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述代码先用Type.NumField获取cat结构体中字段的数量，再通过typeOfHero.Field根据index获取每个字段域类型对象，并打印他们的名字，标签，以及类型和种类。也可以通过FieldByName(“Type”)找一个字段</p><p>输出结果为</p><pre class="line-numbers language-go"><code class="language-go">name<span class="token punctuation">:</span> Name  tag<span class="token punctuation">:</span> <span class="token string">''</span> <span class="token keyword">type</span> is <span class="token builtin">string</span><span class="token punctuation">,</span>kind is <span class="token builtin">string</span>name<span class="token punctuation">:</span> Type  tag<span class="token punctuation">:</span> <span class="token string">'json:"type" id:"100"'</span>  <span class="token keyword">type</span> is <span class="token builtin">int</span><span class="token punctuation">,</span>kind is <span class="token builtin">int</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>结构体标签（Struct Tag）</strong></p><p>通过 reflect.Type 获取结构体成员信息 reflect.StructField 结构中的 Tag 被称为结构体标签（StructTag）。结构体标签是对结构体字段的额外信息标签。</p><p>JSON、BSON 等格式进行序列化及对象关系映射（Object Relational Mapping，简称 ORM）系统都会用到结构体标签，这些系统使用标签设定字段在处理时应该具备的特殊属性和可能发生的行为。这些信息都是静态的，无须实例化结构体，可以通过反射获取到。</p><p>Tag 在结构体字段后方书写的格式如下：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token string">`key1:"value1" key2:"value2"`</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>向之前取tag</p><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 通过字段名, 找到字段类型信息</span>    <span class="token keyword">if</span> catType<span class="token punctuation">,</span> ok <span class="token operator">:=</span> typeOfCat<span class="token punctuation">.</span><span class="token function">FieldByName</span><span class="token punctuation">(</span><span class="token string">"Type"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 从tag中取出需要的tag</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>catType<span class="token punctuation">.</span>Tag<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"json"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> catType<span class="token punctuation">.</span>Tag<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果为type 100</p><h4 id="reflect-Method"><a href="#reflect-Method" class="headerlink" title="reflect.Method"></a>reflect.Method</h4><table><thead><tr><th align="center"><strong>方法</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td align="center">Method(int) Method</td><td>根据索index查找方法</td></tr><tr><td align="center">NumMethod() int</td><td>获取类型中<strong>公开的方法数量</strong></td></tr><tr><td align="center">MethodByName(string) (Method,bool)</td><td>根据方法名查找方法,<strong>只能找公开的方法</strong></td></tr></tbody></table><p>获取到的Method对象描述了方法的基本信息，包括方法名，方法类型</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> Method sturct<span class="token punctuation">{</span><span class="token comment" spellcheck="true">//方法名</span>  Name <span class="token builtin">string</span><span class="token comment" spellcheck="true">//方法类型</span>  Type Type <span class="token comment" spellcheck="true">//方法对象，可以用于调用方法</span>  Func Value<span class="token comment" spellcheck="true">//方法的index</span>  Index <span class="token builtin">int</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意方法一定要可导出的公开方法，即开头为大写</p><pre class="line-numbers language-go"><code class="language-go">    <span class="token keyword">type</span> user <span class="token keyword">struct</span> <span class="token punctuation">{</span>    age  <span class="token builtin">int</span>    name <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>u user<span class="token punctuation">)</span> <span class="token function">PrintName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//u.age=2</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>u <span class="token operator">*</span>user<span class="token punctuation">)</span> <span class="token function">ChangeName</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    u<span class="token punctuation">.</span>name <span class="token operator">=</span> s<span class="token punctuation">}</span>u2 <span class="token operator">:=</span> user<span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">"s"</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span>  <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">}</span>typeofUser <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>u2<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> typeofUser<span class="token punctuation">.</span><span class="token function">NumMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"method is %s,type is %s,kind is %s"</span><span class="token punctuation">,</span> typeofUser<span class="token punctuation">.</span><span class="token function">Method</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">,</span> typeofUser<span class="token punctuation">.</span><span class="token function">Method</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>Type<span class="token punctuation">,</span> typeofUser<span class="token punctuation">.</span><span class="token function">Method</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>Type<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果</p><pre class="line-numbers language-go"><code class="language-go">method is ChangeName<span class="token punctuation">,</span><span class="token keyword">type</span> is <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token operator">*</span>main<span class="token punctuation">.</span>user<span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">,</span>kind is <span class="token keyword">func</span>method is PrintName<span class="token punctuation">,</span><span class="token keyword">type</span> is <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token operator">*</span>main<span class="token punctuation">.</span>user<span class="token punctuation">)</span><span class="token punctuation">,</span>kind is <span class="token keyword">func</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>使用反射调用接口方法</strong></p><p>如果反射值对象（reflect.Value）中值的类型为函数时，可以通过 reflect.Value 调用该函数。使用反射调用函数时，需要将参数使用反射值对象的切片 []reflect.Value 构造后传入 Call() 方法中，调用完成时，函数的返回值通过 []reflect.Value 返回。</p><p><strong>一般方法的反射</strong></p><p>下面的代码声明一个加法函数，传入两个整型值，返回两个整型值的和。将函数保存到反射值对象（reflect.Value）中，然后将两个整型值构造为反射值对象的切片（[]reflect.Value），使用 Call() 方法进行调用。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 普通函数</span><span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 将函数包装为反射值对象</span>    funcValue <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 构造函数参数, 传入两个整型值</span>    paramList <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>reflect<span class="token punctuation">.</span>Value<span class="token punctuation">{</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 反射调用函数</span>    retList <span class="token operator">:=</span> funcValue<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span>paramList<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 获取第一个返回值, 取整数值</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>retList<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意TypeOf和ValueOf找到方法时，接收器参数的必要性比较</strong></p><p>使用ValueOf 的区别</p><pre class="line-numbers language-go"><code class="language-go">    u2 <span class="token operator">:=</span> user<span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">"s"</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span>  <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>u user<span class="token punctuation">)</span> <span class="token function">PrintName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//u.age=2</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>u user<span class="token punctuation">)</span> <span class="token function">PpName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//u.age=2</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>u <span class="token operator">*</span>user<span class="token punctuation">)</span> <span class="token function">ChangeName</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span><span class="token punctuation">{</span>    u<span class="token punctuation">.</span>name <span class="token operator">=</span> s  <span class="token keyword">return</span> s<span class="token punctuation">}</span>    valueOfUser <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>u2<span class="token punctuation">)</span>    typeofUser <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>u2<span class="token punctuation">)</span>    printName <span class="token operator">:=</span> valueOfUser<span class="token punctuation">.</span><span class="token function">MethodByName</span><span class="token punctuation">(</span><span class="token string">"PrintName"</span><span class="token punctuation">)</span>    printName<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>reflect<span class="token punctuation">.</span>Value<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//输出s</span>    changeName <span class="token operator">:=</span> valueOfUser<span class="token punctuation">.</span><span class="token function">MethodByName</span><span class="token punctuation">(</span><span class="token string">"ChangeName"</span><span class="token punctuation">)</span>    result <span class="token operator">:=</span> changeName<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>reflect<span class="token punctuation">.</span>Value<span class="token punctuation">{</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token string">"zzz"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//注意必须为*user才可以调用这个方法</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"result is"</span><span class="token punctuation">,</span> result<span class="token punctuation">,</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//输出 result is [zzz]，zzz，返回的是一个切片</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>u2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//zzz</span>    printName2<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> typeofUser<span class="token punctuation">.</span><span class="token function">MethodByName</span><span class="token punctuation">(</span><span class="token string">"PrintName"</span><span class="token punctuation">)</span>    printName2<span class="token punctuation">.</span>Func<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>reflect<span class="token punctuation">.</span>Value<span class="token punctuation">{</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>u2<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//zzz 可以看到确实已经被修改</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过比较，可以发现，使用TypeOf找到方法时，还需要加Func，同时第一个参数必须指定接收器，即需要调用这个函数的对象，然而ValueOf则可以不用指定接收器，它本身就是一个接收器，可以根据函数接收器是否为指针类型，来选择ValueOf()传入的值为&amp;user还是user</p><p>同时可以用result接受返回的结果，返回的结果为一个切片</p><h4 id="reflect-Value-反射值对象"><a href="#reflect-Value-反射值对象" class="headerlink" title="reflect.Value 反射值对象"></a>reflect.Value 反射值对象</h4><p>Go语言中，使用 reflect.ValueOf() 函数获得值的反射值对象（reflect.Value）。书写格式如下：</p><pre class="line-numbers language-go"><code class="language-go">value <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>rawValue<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>reflect.ValueOf 返回 reflect.Value 类型，包含有 rawValue 的值信息。reflect.Value 与原值间可以通过值包装和值获取互相转化。reflect.Value 是一些反射操作的重要类型，如反射调用函数。</p><pre class="line-numbers language-go"><code class="language-go">        <span class="token keyword">var</span> a <span class="token builtin">int</span>    <span class="token comment" spellcheck="true">// 取变量a的反射类型对象</span>    typeOfA <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 根据反射类型对象创建类型实例</span>    aIns <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>typeOfA<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 输出Value的类型和种类</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>aIns<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> aIns<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出</p><pre class="line-numbers language-go"><code class="language-go"><span class="token operator">*</span><span class="token builtin">int</span> ptr<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用 reflect.New() 函数传入变量 a 的反射类型对象，创建这个类型的实例值，值以 reflect.Value 类型返回。这步操作等效于：new(int)，因此返回的是 *int 类型的实例。</p><p>可以通过下面几种方法从反射值对象 reflect.Value 中获取原值，</p><table><thead><tr><th>方法名</th><th>说  明</th></tr></thead><tbody><tr><td>Interface() interface {}</td><td>将值以 interface{} 类型返回，可以通过类型断言转换为指定类型</td></tr><tr><td>Int() int64</td><td>将值以 int 类型返回，所有有符号整型均可以此方式返回</td></tr><tr><td>Uint() uint64</td><td>将值以 uint 类型返回，所有无符号整型均可以此方式返回</td></tr><tr><td>Float() float64</td><td>将值以双精度（float64）类型返回，所有浮点数（float32、float64）均可以此方式返回</td></tr><tr><td>Bool() bool</td><td>将值以 bool 类型返回</td></tr><tr><td>Bytes() []bytes</td><td>将值以字节数组 []bytes 类型返回</td></tr><tr><td>String() string</td><td>将值以字符串类型返回</td></tr></tbody></table><pre class="line-numbers language-go"><code class="language-go">    <span class="token comment" spellcheck="true">// 声明整型变量a并赋初值</span>    <span class="token keyword">var</span> a <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">1024</span>    <span class="token comment" spellcheck="true">// 获取变量a的反射值对象</span>    valueOfA <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 获取interface{}类型的值, 通过类型断言转换</span>    <span class="token keyword">var</span> getA <span class="token builtin">int</span> <span class="token operator">=</span> valueOfA<span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 获取64位的值, 强制类型转换为int类型</span>    <span class="token keyword">var</span> getA2 <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>valueOfA<span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>通过反射修改变量的值</strong></p><p>一个变量就是一个可寻址的内存空间，里面存储了一个值，并且存储的值可以通过内存地址来更新。</p><p>有一些 reflect.Values 是可取地址的；其它一些则不可以。</p><pre class="line-numbers language-go"><code class="language-go">x <span class="token operator">:=</span> <span class="token number">2</span> <span class="token comment" spellcheck="true">// value type variable?</span>a <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2 int no</span>b <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2 int no</span>c <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// &amp;x *int no</span>d <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2 int yes (x)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中 a 对应的变量则不可取地址。因为 a 中的值仅仅是整数 2 的拷贝副本。b 中的值也同样不可取地址。c 中的值还是不可取地址，它只是一个指针 &amp;x 的拷贝。实际上，所有通过 reflect.ValueOf(x) 返回的 reflect.Value 都是不可取地址的。但是对于 d，它是 c 的解引用方式生成的，指向另一个变量，因此是可取地址的。我们可以通过调用 reflect.ValueOf(&amp;x).Elem()，来获取任意变量x对应的可取地址的 Value。</p><p>我们可以通过调用 reflect.Value 的 CanAddr 方法来判断其是否可以被取地址：</p><pre class="line-numbers language-go"><code class="language-go">fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">CanAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// "false"</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">CanAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// "false"</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">CanAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// "false"</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">CanAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// "true"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>每当我们通过指针间接地获取的 reflect.Value 都是可取地址的，即使开始的是一个不可取地址的 Value</p><p>例如，slice 的索引表达式 e[i]将隐式地包含一个指针，它就是可取地址的，即使开始的e表达式不支持也没有关系。</p><p>以此类推，reflect.ValueOf(e).Index(i) 对于的值也是可取地址的，即使原始的 reflect.ValueOf(e) 不支持也没有关系。</p><p><strong>判定及获取元素的相关方法</strong></p><p>使用 reflect.Value 取元素、取地址及修改值的属性方法请参考下表。</p><table><thead><tr><th>方法名</th><th>备  注</th></tr></thead><tbody><tr><td>Elem() Value</td><td>取值指向的元素值，类似于语言层<code>*</code>操作。当值类型不是指针或接口时发生宕 机，空指针时返回 nil 的 Value</td></tr><tr><td>Addr() Value</td><td>对可寻址的值返回其地址，类似于语言层<code>&amp;</code>操作。当值不可寻址时发生宕机</td></tr><tr><td>CanAddr() bool</td><td>表示值是否可寻址</td></tr><tr><td>CanSet() bool</td><td>返回值能否被修改。要求值可寻址且是导出的字段</td></tr></tbody></table><p><strong>值修改相关方法</strong></p><p>使用 reflect.Value 修改值的相关方法如下表所示。</p><table><thead><tr><th>Set(x Value)</th><th>将值设置为传入的反射值对象的值</th></tr></thead><tbody><tr><td>Setlnt(x int64)</td><td>使用 int64 设置值。当值的类型不是 int、int8、int16、 int32、int64 时会发生宕机</td></tr><tr><td>SetUint(x uint64)</td><td>使用 uint64 设置值。当值的类型不是 uint、uint8、uint16、uint32、uint64 时会发生宕机</td></tr><tr><td>SetFloat(x float64)</td><td>使用 float64 设置值。当值的类型不是 float32、float64 时会发生宕机</td></tr><tr><td>SetBool(x bool)</td><td>使用 bool 设置值。当值的类型不是 bod 时会发生宕机</td></tr><tr><td>SetBytes(x []byte)</td><td>设置字节数组 []bytes值。当值的类型不是 []byte 时会发生宕机</td></tr><tr><td>SetString(x string)</td><td>设置字符串值。当值的类型不是 string 时会发生宕机</td></tr></tbody></table><p>以上方法，在 reflect.Value 的 CanSet 返回 false 仍然修改值时会发生宕机。</p><p>在已知值的类型时，应尽量使用值对应类型的反射设置值。</p><p><strong>值可修改条件之一：可被寻址</strong></p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 声明整型变量a并赋初值</span>    <span class="token keyword">var</span> a <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">1024</span>    <span class="token comment" spellcheck="true">// 获取变量a的反射值对象</span>    valueOfA <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 尝试将a修改为1(此处会发生崩溃)</span>    valueOfA<span class="token punctuation">.</span><span class="token function">SetInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序运行崩溃，打印错误：</p><pre><code>panic: reflect: reflect.Value.SetInt using unaddressable value</code></pre><p>SetInt 正在使用一个不能被寻址的值。从 reflect.ValueOf 传入的是 a 的值，而不是 a 的地址，这个 reflect.Value 当然是不能被寻址的。将代码修改一下，重新运行：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 声明整型变量a并赋初值</span>    <span class="token keyword">var</span> a <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">1024</span>    <span class="token comment" spellcheck="true">// 获取变量a的反射值对象(a的地址)</span>    valueOfA <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 取出a地址的元素(a的值)</span>    valueOfA <span class="token operator">=</span> valueOfA<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 修改a的值为1</span>    valueOfA<span class="token punctuation">.</span><span class="token function">SetInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 打印a的值</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>valueOfA<span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出1</p><p>下面是对代码的分析：</p><ul><li>第 5行中，将变量 a 取值后传给 reflect.ValueOf()。此时 reflect.ValueOf() 返回的 valueOfA 持有变量 a 的地址。</li><li>第 7 行中，使用 reflect.Value 类型的 Elem() 方法获取 a 地址的元素，也就是 a 的值。reflect.Value 的 Elem() 方法返回的值类型也是 reflect.Value。</li><li>第 9行，此时 valueOfA 表示的是 a 的值且可以寻址。使用 SetInt() 方法设置值时不再发生崩溃。</li><li>第 11 行，正确打印修改的值。</li></ul><p>当 reflect.Value 不可寻址时，使用 Addr() 方法也是无法取到值的地址的，同时会发生宕机。虽然说 reflect.Value 的 Addr() 方法类似于语言层的<code>&amp;</code>操作；Elem() 方法类似于语言层的<code>*</code>操作，但并不代表这些方法与语言层操作等效。</p><p><strong>值可修改条件之一：被导出</strong></p><p>结构体成员中，如果字段没有被导出，即便不使用反射也可以被访问，但不能通过反射修改，代码如下：</p><pre class="line-numbers language-go"><code class="language-go">        <span class="token keyword">type</span> dog <span class="token keyword">struct</span> <span class="token punctuation">{</span>            legCount <span class="token builtin">int</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 获取dog实例的反射值对象</span>    valueOfDog <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>dog<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 获取legCount字段的值</span>    vLegCount <span class="token operator">:=</span> valueOfDog<span class="token punctuation">.</span><span class="token function">FieldByName</span><span class="token punctuation">(</span><span class="token string">"legCount"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 尝试设置legCount的值(这里会发生崩溃)</span>    vLegCount<span class="token punctuation">.</span><span class="token function">SetInt</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序发生崩溃，报错：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token builtin">panic</span><span class="token punctuation">:</span> reflect<span class="token punctuation">:</span> reflect<span class="token punctuation">.</span>Value<span class="token punctuation">.</span>SetInt using value obtained using unexported field<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>报错的意思是：SetInt() 使用的值来自于一个未导出的字段</p><p>为了能修改这个值，需要将该字段导出。将 dog 中的 legCount 的成员首字母大写，导出 LegCount 让反射可以访问，修改后的代码如下：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> dog <span class="token keyword">struct</span> <span class="token punctuation">{</span>    LegCount <span class="token builtin">int</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后根据字段名获取字段的值时，将字符串的字段首字母大写，修改后的代码如下：</p><pre class="line-numbers language-go"><code class="language-go">vLegCount <span class="token operator">:=</span> valueOfDog<span class="token punctuation">.</span><span class="token function">FieldByName</span><span class="token punctuation">(</span><span class="token string">"LegCount"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再次运行程序，发现仍然报错：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token builtin">panic</span><span class="token punctuation">:</span> reflect<span class="token punctuation">:</span> reflect<span class="token punctuation">.</span>Value<span class="token punctuation">.</span>SetInt using unaddressable value<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个错误表示构造的 valueOfDog 这个结构体实例不能被寻址，因此其字段也不能被修改。修改代码，取结构体的指针，再通过 reflect.Value 的 Elem() 方法取到值的反射值对象。修改后的完整代码如下：</p><pre class="line-numbers language-go"><code class="language-go">    <span class="token keyword">type</span> dog <span class="token keyword">struct</span> <span class="token punctuation">{</span>            LegCount <span class="token builtin">int</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 获取dog实例地址的反射值对象</span>    valueOfDog <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>dog<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 取出dog实例地址的元素</span>    valueOfDog <span class="token operator">=</span> valueOfDog<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 获取legCount字段的值</span>    vLegCount <span class="token operator">:=</span> valueOfDog<span class="token punctuation">.</span><span class="token function">FieldByName</span><span class="token punctuation">(</span><span class="token string">"LegCount"</span><span class="token punctuation">)</span>    vLegCount<span class="token punctuation">.</span><span class="token function">SetInt</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>vLegCount<span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>值的修改从表面意义上叫可寻址，换一种说法就是值必须“可被设置”。那么，想修改变量值，一般的步骤是：</p><ol><li>取这个变量的地址或者这个变量所在的结构体已经是指针类型。</li><li>使用 reflect.ValueOf 进行值包装。</li><li>通过 Value.Elem() 获得指针值指向的元素值对象（Value），因为值对象（Value）内部对象为指针时，使用 set 设置时会报出宕机错误。</li><li>使用 Value.Set 设置值。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 后端 </tag>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go并发</title>
      <link href="/2021/11/18/go-concurrence/"/>
      <url>/2021/11/18/go-concurrence/</url>
      
        <content type="html"><![CDATA[<h1 id="Go并发"><a href="#Go并发" class="headerlink" title="Go并发"></a>Go并发</h1><h2 id="Go并发-1"><a href="#Go并发-1" class="headerlink" title="Go并发"></a>Go并发</h2><p>进程是程序在操作系统中的一次执行过程，系统进行资源分配和调度的一个独立单位。</p><p>线程是进程的一个执行实体，是 CPU 调度和分派的基本单位，它是比进程更小的能独立运行的基本单位。一个进程可以创建和撤销多个线程，同一个进程中的多个线程之间可以并发执行。</p><p><strong>并发/并行</strong></p><p>并发：在同一时间段内，多条指令在CPU上同时执行；多个线程会被分配一定的执行时间片。</p><p>并行：在同一时刻，多条指令在CPU上同时执行。需要CPU提供多核并行计算的能力。</p><p><strong>协程/线程</strong></p><p>协程：独立的栈空间，共享堆空间，调度由用户自己控制，本质上有点类似于用户级线程，这些用户级线程的调度也是自己实现的。</p><p>线程：一个线程上可以跑多个协程，协程是轻量级的线程。</p><h3 id="Goroutine"><a href="#Goroutine" class="headerlink" title="Goroutine"></a>Goroutine</h3><p>goroutine 是一种非常轻量级的实现，可在单个进程里执行成千上万的并发任务，它是Go语言并发设计的核心。</p><ul><li>占用内存更小（几kb）</li><li>调度更灵活(runtime调度)</li></ul><p>goroutine来自协程的概念，让一组可复用的函数运行在一组线程之上，即使有协程阻塞，该线程的其他协程也可以被<code>runtime</code>调度，转移到其他可运行的线程上。十几个 goroutine 可能体现在底层就是五六个线程，而且Go语言内部也实现了 goroutine 之间的内存共享。</p><p>使用 go 关键字就可以创建 goroutine，将 go 声明放到一个需调用的函数之前，在相同地址空间调用运行这个函数，这样该函数执行时便会作为一个独立的并发线程，这种线程在Go语言中则被称为 goroutine。</p><p><strong>使用匿名函数创建goroutine的格式,或者直接go 声明函数</strong></p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span> 参数列表 <span class="token punctuation">)</span><span class="token punctuation">{</span>    函数体<span class="token punctuation">}</span><span class="token punctuation">(</span> 调用参数列表 <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"printTest"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">go</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> times <span class="token builtin">int</span>        <span class="token keyword">for</span> <span class="token punctuation">{</span>            times<span class="token operator">++</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"tick"</span><span class="token punctuation">,</span> times<span class="token punctuation">)</span>            time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> input <span class="token builtin">string</span>    fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>input<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所有 goroutine 在 main() 函数结束时会一同结束。</p><h3 id="channel"><a href="#channel" class="headerlink" title="channel"></a>channel</h3><p>channel 是Go语言在语言级别提供的 goroutine 间的通信方式。我们可以使用 channel 在两个或多个 goroutine 之间传递消息。</p><p>定义一个 channel 时，也需要定义发送到 channel 的值的类型，注意，必须使用 make 创建 channel，</p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a><strong>原理</strong></h4><h5 id="chan数据结构"><a href="#chan数据结构" class="headerlink" title="chan数据结构"></a>chan数据结构</h5><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> hchan <span class="token keyword">struct</span> <span class="token punctuation">{</span>    qcount   <span class="token builtin">uint</span>           <span class="token comment" spellcheck="true">// 当前队列中剩余元素个数</span>    dataqsiz <span class="token builtin">uint</span>           <span class="token comment" spellcheck="true">// 环形队列长度，即可以存放的元素个数</span>    buf      unsafe<span class="token punctuation">.</span>Pointer <span class="token comment" spellcheck="true">// 环形队列指针</span>    elemsize <span class="token builtin">uint16</span>         <span class="token comment" spellcheck="true">// 每个元素的大小</span>    closed   <span class="token builtin">uint32</span>            <span class="token comment" spellcheck="true">// 标识关闭状态</span>    elemtype <span class="token operator">*</span>_type         <span class="token comment" spellcheck="true">// 元素类型</span>    sendx    <span class="token builtin">uint</span>           <span class="token comment" spellcheck="true">// 队列下标，指示元素写入时存放到队列中的位置</span>    recvx    <span class="token builtin">uint</span>           <span class="token comment" spellcheck="true">// 队列下标，指示元素从队列的该位置读出</span>    recvq    waitq          <span class="token comment" spellcheck="true">// 等待读消息的goroutine队列</span>    sendq    waitq          <span class="token comment" spellcheck="true">// 等待写消息的goroutine队列</span>    lock mutex              <span class="token comment" spellcheck="true">// 互斥锁，chan不允许并发读写</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从数据结构可以看出channel由队列、类型信息、goroutine等待队列组成，下面分别说明其原理。</p><p>chan内部实现了一个环形队列作为其缓冲区，队列的长度是创建chan时指定的。</p><h5 id="环形队列"><a href="#环形队列" class="headerlink" title="环形队列"></a><strong>环形队列</strong></h5><p>下图展示了一个可缓存6个元素的channel示意图：</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211117235120.png" alt="image-20211030204652497"></p><ul><li>dataqsiz指示了队列长度为6，即可缓存6个元素；</li><li>buf指向队列的内存，队列中还剩余两个元素；</li><li>qcount表示队列中还有两个元素；</li><li>sendx指示后续写入的数据存储的位置，取值[0, 6)；</li><li>recvx指示从该位置读取数据, 取值[0, 6)；</li></ul><h5 id="等待队列"><a href="#等待队列" class="headerlink" title="等待队列"></a><strong>等待队列</strong></h5><p>从channel读数据，如果channel缓冲区为空或者没有缓冲区，当前goroutine会被阻塞。<br>向channel写数据，如果channel缓冲区已满或者没有缓冲区，当前goroutine会被阻塞。</p><p>被阻塞的goroutine将会挂在channel的等待队列中：</p><ul><li>因读阻塞的goroutine会被向channel写入数据的goroutine唤醒；</li><li>因写阻塞的goroutine会被从channel读数据的goroutine唤醒；</li></ul><p>下图展示了一个没有缓冲区的channel，有几个goroutine阻塞等待读数据：</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211117235129.png" alt="image-20211030204923697"></p><p>注意，一般情况下recvq和sendq至少有一个为空。只有一个例外，那就是同一个goroutine使用select语句向channel一边写数据，一边读数据。</p><h5 id="类型信息"><a href="#类型信息" class="headerlink" title="类型信息"></a>类型信息</h5><p>一个channel只能传递一种类型的值，类型信息存储在hchan数据结构中。</p><ul><li>elemtype代表类型，用于数据传递过程中的赋值；</li><li>elemsize代表类型大小，用于在buf中定位元素位置。</li></ul><h5 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h5><p>一个channel同时仅允许被一个goroutine读写，lock mutex ,为简单起见，本章后续部分说明读写过程时不再涉及加锁和解锁。</p><h4 id="channel读写"><a href="#channel读写" class="headerlink" title="channel读写"></a>channel读写</h4><h5 id="创建channel"><a href="#创建channel" class="headerlink" title="创建channel"></a>创建channel</h5><p>创建channel的过程实际上是初始化hchan结构。其中类型信息和缓冲区长度由make语句传入，buf的大小则与元素大小和缓冲区长度共同决定。</p><p>创建channel的伪代码如下所示：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">makechan</span><span class="token punctuation">(</span>t <span class="token operator">*</span>chantype<span class="token punctuation">,</span> size <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>hchan <span class="token punctuation">{</span>    <span class="token keyword">var</span> c <span class="token operator">*</span>hchan    c <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>hchan<span class="token punctuation">)</span>    c<span class="token punctuation">.</span>buf <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>元素类型大小<span class="token operator">*</span>size<span class="token punctuation">)</span>    c<span class="token punctuation">.</span>elemsize <span class="token operator">=</span> 元素类型大小    c<span class="token punctuation">.</span>elemtype <span class="token operator">=</span> 元素类型    c<span class="token punctuation">.</span>dataqsiz <span class="token operator">=</span> size    <span class="token keyword">return</span> c<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="向channel写数据"><a href="#向channel写数据" class="headerlink" title="向channel写数据"></a>向channel写数据</h5><p>向一个channel中写数据简单过程如下：</p><ol><li>如果等待接收队列recvq不为空，说明缓冲区中没有数据或者没有缓冲区，此时直接从recvq取出G,并把数据写入，最后把该G唤醒，结束发送过程；</li><li>如果缓冲区中有空余位置，将数据写入缓冲区，结束发送过程；</li><li>如果缓冲区中没有空余位置，将待发送数据写入G，将当前G加入sendq，进入睡眠，等待被读goroutine唤醒；</li></ol><p>简单流程图如下</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211117235138.png" alt="image-20211030210615089"></p><h5 id="从channel读数据"><a href="#从channel读数据" class="headerlink" title="从channel读数据"></a>从channel读数据</h5><p>从一个channel读数据简单过程如下：</p><ol><li>如果等待发送队列sendq不为空，且没有缓冲区，直接从sendq中取出G，把G中数据读出，最后把G唤醒，结束读取过程；</li><li>如果等待发送队列sendq不为空，此时说明缓冲区已满，从缓冲区中首部读出数据，把G中数据写入缓冲区尾部，把G唤醒，结束读取过程；</li><li>如果缓冲区中有数据，则从缓冲区取出数据，结束读取过程；</li><li>什么都没有，将当前goroutine加入recvq，进入睡眠，等待被写goroutine唤醒；</li></ol><p>简单流程图如下：</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211117235149.png" alt="image-20211030210810149"></p><h5 id="关闭channel"><a href="#关闭channel" class="headerlink" title="关闭channel"></a>关闭channel</h5><p>关闭channel时会把recvq中的G全部唤醒，本该写入G的数据位置为nil。把sendq中的G全部唤醒，但这些G会panic。</p><p>除此之外，panic出现的常见场景还有：</p><ol><li>关闭值为nil的channel</li><li>关闭已经被关闭的channel</li><li>向已经关闭的channel写数据</li></ol><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><p>channel 是类型相关的，也就是说，一个 channel 只能传递一种类型的值，这个类型需要在声明 channel 时指定。</p><pre class="line-numbers language-go"><code class="language-go">ci <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>cs <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span>cf <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="向通道发送数据"><a href="#向通道发送数据" class="headerlink" title="向通道发送数据"></a><strong>向通道发送数据</strong></h5><pre class="line-numbers language-go"><code class="language-go">chanel <span class="token operator">&lt;-</span> val<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果当前通道满了会阻塞当前goroutine</p><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 创建一个空接口通道</span>ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 将0放入通道中</span>ch <span class="token operator">&lt;-</span> <span class="token number">0</span><span class="token comment" spellcheck="true">// 将hello字符串放入通道中</span>ch <span class="token operator">&lt;-</span> <span class="token string">"hello"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把数据往通道中发送时，如果接收方一直都没有接收，那么发送操作将持续阻塞。Go 程序运行时能智能地发现一些永远无法发送成功的语句并做出提示，代码如下：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> mainfunc <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 创建一个整型通道    </span>  ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 尝试将0通过通道发送    </span>  ch <span class="token operator">&lt;-</span> <span class="token number">0</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行代码，报错：</p><pre class="line-numbers language-go"><code class="language-go">fatal <span class="token builtin">error</span><span class="token punctuation">:</span> all goroutines are asleep <span class="token operator">-</span> deadlock<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>报错的意思是：运行时发现所有的 goroutine（包括main）都处于等待 goroutine。也就是说所有 goroutine 中的 channel 并没有形成发送和接收对应的代码。</p><h5 id="从通道读数据"><a href="#从通道读数据" class="headerlink" title="从通道读数据"></a><strong>从通道读数据</strong></h5><p>阻塞模式接收数据时，将接收变量作为<code>&lt;-</code>操作符的左值，格式如下：</p><pre class="line-numbers language-go"><code class="language-go">data <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行该语句时将会从ch中读取一个数据到data中，如果channal中没有数据，会阻塞读取的goroutine，直到接收到数据并赋值给 data 变量。</p><p>使用非阻塞方式从通道接收数据时，语句不会发生阻塞，格式如下：</p><pre class="line-numbers language-go"><code class="language-go">data<span class="token punctuation">,</span> ok <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>data：表示接收到的数据。未接收到数据时，data 为通道类型的零值。ok：表示是否接收到数据。</p><p><strong>接收任意数据，忽略接收的数据</strong></p><p>阻塞接收数据后，忽略从通道返回的数据，格式如下：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token operator">&lt;-</span>ch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行该语句时将会发生阻塞，直到接收到数据，但接收到的数据会被忽略。这个方式实际上只是通过通道在 goroutine 间阻塞收发实现并发同步。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 构建一个通道</span>    ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 开启一个并发匿名函数</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"start goroutine"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 通过通道通知main的goroutine</span>        ch <span class="token operator">&lt;-</span> <span class="token number">0</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"exit goroutine"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"wait goroutine"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 等待匿名goroutine</span>    <span class="token operator">&lt;-</span>ch    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"all done"</span><span class="token punctuation">)</span>  <span class="token keyword">defer</span> <span class="token function">close</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>【示例 1】在网球比赛中，两位选手会把球在两个人之间来回传递。选手总是处在以下两种状态之一，要么在等待接球，要么将球打向对方。可以使用两个 goroutine 来模拟网球比赛，并使用无缓冲的通道来模拟球的来回，代码如下所示。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 这个示例程序展示如何用无缓冲的通道来模拟</span><span class="token comment" spellcheck="true">// 2 个goroutine 间的网球比赛</span><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"math/rand"</span>    <span class="token string">"sync"</span>    <span class="token string">"time"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// wg 用来等待程序结束</span><span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup<span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    rand<span class="token punctuation">.</span><span class="token function">Seed</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UnixNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// main 是所有Go 程序的入口</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建一个无缓冲的通道</span>    court <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 计数加 2，表示要等待两个goroutine</span>    wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 启动两个选手</span>    <span class="token keyword">go</span> <span class="token function">player</span><span class="token punctuation">(</span><span class="token string">"Nadal"</span><span class="token punctuation">,</span> court<span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token function">player</span><span class="token punctuation">(</span><span class="token string">"Djokovic"</span><span class="token punctuation">,</span> court<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 发球</span>    court <span class="token operator">&lt;-</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true">// 等待游戏结束</span>    wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// player 模拟一个选手在打网球</span><span class="token keyword">func</span> <span class="token function">player</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">,</span> court <span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 在函数退出时调用Done 来通知main 函数工作已经完成</span>    <span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 等待球被击打过来</span>        ball<span class="token punctuation">,</span> ok <span class="token operator">:=</span> <span class="token operator">&lt;-</span>court        <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果通道被关闭，我们就赢了</span>            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Player %s Won\n"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 选随机数，然后用这个数来判断我们是否丢球</span>        n <span class="token operator">:=</span> rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> n<span class="token operator">%</span><span class="token number">13</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Player %s Missed\n"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 关闭通道，表示我们输了</span>            <span class="token function">close</span><span class="token punctuation">(</span>court<span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 显示击球数，并将击球数加1</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Player %s Hit %d\n"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> ball<span class="token punctuation">)</span>        ball<span class="token operator">++</span>        <span class="token comment" spellcheck="true">// 将球打向对手</span>        court <span class="token operator">&lt;-</span> ball    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="循环接收range"><a href="#循环接收range" class="headerlink" title="循环接收range"></a><strong>循环接收range</strong></h5><p>通过range可以持续从channel中读出数据，好像在遍历一个数组一样，当channel中没有数据时会阻塞当前goroutine，与读channel时阻塞处理机制一样。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">for</span> data <span class="token operator">:=</span> <span class="token keyword">range</span> ch <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">chanRange</span><span class="token punctuation">(</span>chanName <span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> e <span class="token operator">:=</span> <span class="token keyword">range</span> chanName <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Get element from chan: %d\n"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果向此channel写数据的goroutine退出时，系统检测到这种情况后会panic，否则range将会永久阻塞。</p><h5 id="创建有缓冲区的channel"><a href="#创建有缓冲区的channel" class="headerlink" title="创建有缓冲区的channel"></a><strong>创建有缓冲区的channel</strong></h5><pre class="line-numbers language-go"><code class="language-go"> <span class="token comment" spellcheck="true">// 创建一个3个元素缓冲大小的整型通道</span>    ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>带缓冲通道在很多特性上和无缓冲通道是类似的。无缓冲通道可以看作是长度永远为 0 的带缓冲通道。因此根据这个特性，带缓冲通道在下面列举的情况下依然会发生阻塞：</p><ul><li>当缓冲通道被填满时，尝试再次发送数据时发生阻塞。</li><li>当缓冲通道为空时，尝试读取数据时发生阻塞。</li></ul><h5 id="select多路复用"><a href="#select多路复用" class="headerlink" title="select多路复用"></a><strong>select多路复用</strong></h5><p>如果在goroutine中需要接受多个channel中的消息时，我们可以使用Go语言中的select关键字提供的多路复用，select的使用方式与switch相类似，但是要求case后面语句必须为I/O操作</p><p>使用select可以监控多channel，比如监控多个channel，当其中某一个channel有数据时，就从其读出数据。</p><p>大体结构如下：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">select</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token operator">&lt;-</span>chan1<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">// 如果chan1成功读到数据，则进行该case处理语句</span>    <span class="token keyword">case</span> chan2 <span class="token operator">&lt;-</span> <span class="token number">1</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">// 如果成功向chan2写入数据，则进行该case处理语句</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">// 如果上面都没有成功，则进入default处理流程</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在一个 select 语句中，Go语言会按顺序从头至尾评估每一个发送和接收的语句。</p><p>如果其中的任意一语句可以继续执行（即没有被阻塞），那么就从那些可以执行的语句中任意选择一条来使用。</p><p>如果没有任意一条语句可以执行（即所有的通道都被阻塞），那么有如下两种可能的情况：</p><ul><li>如果给出了 default 语句，那么就会执行 default 语句，同时程序的执行会从 select 语句后的语句中恢复；</li><li>如果没有 default 语句，那么 select 语句将被阻塞，直到至少有一个通信可以进行下去。</li></ul><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>    quit <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//新开一个协程</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">{</span>            <span class="token keyword">select</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> num <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ch<span class="token punctuation">:</span>                fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"num = "</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span>            <span class="token keyword">case</span> <span class="token operator">&lt;-</span>time<span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token punctuation">:</span>                fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"超时"</span><span class="token punctuation">)</span>                quit <span class="token operator">&lt;-</span> <span class="token boolean">true</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//别忘了()</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        ch <span class="token operator">&lt;-</span> i        time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token operator">&lt;-</span>quit    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"程序结束"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-go"><code class="language-go">num <span class="token operator">=</span>  <span class="token number">0</span>num <span class="token operator">=</span>  <span class="token number">1</span>num <span class="token operator">=</span>  <span class="token number">2</span>num <span class="token operator">=</span>  <span class="token number">3</span>num <span class="token operator">=</span>  <span class="token number">4</span>超时程序结束<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="单向channel"><a href="#单向channel" class="headerlink" title="单向channel"></a>单向channel</h5><p>顾名思义，单向channel指只能用于发送或接收数据，实际上并没有单向channel。</p><p>我们知道channel可以通过参数传递，所谓单向channel只是对channel的一种使用限制，这跟C语言使用const修饰函数参数为只读是一个道理。</p><ul><li>func readChan(chanName &lt;-chan int)： 通过形参限定函数内部只能从channel中读取数据</li><li>func writeChan(chanName chan&lt;- int)： 通过形参限定函数内部只能向channel中写入数据</li></ul><p>一个简单的示例程序如下：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">readChan</span><span class="token punctuation">(</span>chanName <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">&lt;-</span> chanName<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">writeChan</span><span class="token punctuation">(</span>chanName <span class="token keyword">chan</span><span class="token operator">&lt;-</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    chanName <span class="token operator">&lt;-</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> mychan <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token function">writeChan</span><span class="token punctuation">(</span>mychan<span class="token punctuation">)</span>    <span class="token function">readChan</span><span class="token punctuation">(</span>mychan<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mychan是个正常的channel，而readChan()参数限制了传入的channel只能用来读，writeChan()参数限制了传入的channel只能用来写。</p><h5 id="关闭chan"><a href="#关闭chan" class="headerlink" title="关闭chan"></a>关闭chan</h5><p>注意，最后需要关闭ch</p><pre class="line-numbers language-go"><code class="language-go">ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> T<span class="token punctuation">)</span>    <span class="token function">close</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>只关闭一次</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> MyChannel <span class="token keyword">struct</span> <span class="token punctuation">{</span>    C    <span class="token keyword">chan</span> T    once sync<span class="token punctuation">.</span>Once<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">NewMyChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>MyChannel <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>MyChannel<span class="token punctuation">{</span>C<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> T<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>mc <span class="token operator">*</span>MyChannel<span class="token punctuation">)</span> <span class="token function">SafeClose</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    mc<span class="token punctuation">.</span>once<span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">close</span><span class="token punctuation">(</span>mc<span class="token punctuation">.</span>C<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="sync同步包"><a href="#sync同步包" class="headerlink" title="sync同步包"></a>sync同步包</h3><h4 id="Mutex互斥锁"><a href="#Mutex互斥锁" class="headerlink" title="Mutex互斥锁"></a>Mutex互斥锁</h4><p><code>sync.Mutex</code>称为<code>互斥锁</code>，常用在并发编程里面。互斥锁需要保证的是同一个时间段内不能有多个并发协程同时访问某一个资源(临界区)。这就能够保证在某一时间段内有且仅有一个goroutine访问共享资源，其他申请锁的goroutine将会被阻塞直到锁被释放，然后重新争抢锁的持有权。<br><code>sync.Mutex</code>有2个函数<code>Lock</code>和<code>UnLock</code>分别表示获得锁和释放锁。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Mutex<span class="token punctuation">)</span> <span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Mutex<span class="token punctuation">)</span> <span class="token function">UnLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>sync.Mutex初始值为UnLock状态，并且sync.Mutex常做为其它结构体的匿名变量使用。</p><p>举个例子: 我们经常使用网上支付购物东西，就会出现同一个银行账户在某一个时间既有支出也有收入，那银行就得保证我们余额准确，保证数据无误。<br>我们可以简单的实现银行的支出和收入来说明Mutex的使用</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> Bank <span class="token keyword">struct</span> <span class="token punctuation">{</span>    sync<span class="token punctuation">.</span>Mutex    balance <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">float64</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// In 收入</span><span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>Bank<span class="token punctuation">)</span> <span class="token function">In</span><span class="token punctuation">(</span>account <span class="token builtin">string</span><span class="token punctuation">,</span> value <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 加锁 保证同一时间只有一个协程能访问这段代码</span>    b<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">defer</span> b<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> b<span class="token punctuation">.</span>balance<span class="token punctuation">[</span>account<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>        b<span class="token punctuation">.</span>balance<span class="token punctuation">[</span>account<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.0</span>    <span class="token punctuation">}</span>    b<span class="token punctuation">.</span>balance<span class="token punctuation">[</span>account<span class="token punctuation">]</span> <span class="token operator">+=</span> v<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Out 支出</span><span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>Bank<span class="token punctuation">)</span> <span class="token function">Out</span><span class="token punctuation">(</span>account <span class="token builtin">string</span><span class="token punctuation">,</span> value <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 加锁 保证同一时间只有一个协程能访问这段代码</span>    b<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">defer</span> b<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> b<span class="token punctuation">.</span>balance<span class="token punctuation">[</span>account<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token operator">||</span> v <span class="token operator">&lt;</span> value <span class="token punctuation">{</span>        <span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"account not enough balance"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    b<span class="token punctuation">.</span>balance<span class="token punctuation">[</span>account<span class="token punctuation">]</span> <span class="token operator">-=</span> value    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="RWMutex：读写锁"><a href="#RWMutex：读写锁" class="headerlink" title="RWMutex：读写锁"></a>RWMutex：读写锁</h4><p>sync.RWMutex目的是为了能够支持多个并发协程同时读取某一个资源，但只有一个并发协程能够更新资源。也就是说读和写是互斥的，写和写也是互斥的，读和读是不互斥的。</p><p>总结起来如下</p><p>当有一个协程在读的时候，所有写的协程必须等到所有读的协程结束才可以获得锁进行写操作。<br>当有一个协程在读的时候，所有读的协程不受影响都可以进行读操作。<br>当有一个协程在写的时候，所有读、写的协程必须等到写的协程结束才可以获得锁进行读、写操作。</p><p>RWMutex`有5个接口，分别为读和写提供锁操作</p><pre class="line-numbers language-go"><code class="language-go">写操作<span class="token keyword">func</span> <span class="token punctuation">(</span>rw <span class="token operator">*</span>RWMutex<span class="token punctuation">)</span> <span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token punctuation">(</span>rw <span class="token operator">*</span>RWMutex<span class="token punctuation">)</span> <span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>读操作<span class="token keyword">func</span> <span class="token punctuation">(</span>rw <span class="token operator">*</span>RWMutex<span class="token punctuation">)</span> <span class="token function">RLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token punctuation">(</span>rw <span class="token operator">*</span>RWMutex<span class="token punctuation">)</span> <span class="token function">RUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">RLocker</span><span class="token punctuation">(</span><span class="token punctuation">)</span>能获取读锁，然后传递给其他协程使用。<span class="token keyword">func</span> <span class="token punctuation">(</span>rw <span class="token operator">*</span>RWMutex<span class="token punctuation">)</span> <span class="token function">RLocker</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Locker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举个例子，<code>sync.Mutex</code>一节例子里面我们没有提供查询操作，如果用Mutex互斥锁就没有办法支持多人同时查询，所以我们使用<code>sync.RWMutex</code>来改写这个代码</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> Bank <span class="token keyword">struct</span> <span class="token punctuation">{</span>    sync<span class="token punctuation">.</span>RWMutex    balance <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">float64</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>Bank<span class="token punctuation">)</span> <span class="token function">In</span><span class="token punctuation">(</span>account <span class="token builtin">string</span><span class="token punctuation">,</span> value <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    b<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">defer</span> b<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> b<span class="token punctuation">.</span>balance<span class="token punctuation">[</span>account<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>        b<span class="token punctuation">.</span>balance<span class="token punctuation">[</span>account<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.0</span>    <span class="token punctuation">}</span>    b<span class="token punctuation">.</span>balance<span class="token punctuation">[</span>account<span class="token punctuation">]</span> <span class="token operator">+=</span> v<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>Bank<span class="token punctuation">)</span> <span class="token function">Out</span><span class="token punctuation">(</span>account <span class="token builtin">string</span><span class="token punctuation">,</span> value <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    b<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">defer</span> b<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> b<span class="token punctuation">.</span>balance<span class="token punctuation">[</span>account<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token operator">||</span> v <span class="token operator">&lt;</span> value <span class="token punctuation">{</span>        <span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"account not enough balance"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    b<span class="token punctuation">.</span>balance<span class="token punctuation">[</span>account<span class="token punctuation">]</span> <span class="token operator">-=</span> value    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>Bank<span class="token punctuation">)</span> <span class="token function">Query</span><span class="token punctuation">(</span>account <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">{</span>    b<span class="token punctuation">.</span><span class="token function">RLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">defer</span> b<span class="token punctuation">.</span><span class="token function">RUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> b<span class="token punctuation">.</span>balance<span class="token punctuation">[</span>account<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0.0</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> v<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="WaitGroup：并发等待组"><a href="#WaitGroup：并发等待组" class="headerlink" title="WaitGroup：并发等待组"></a>WaitGroup：并发等待组</h4><p><code>sync.WaitGroup</code>指的是等待组，在Golang并发编程里面非常常见，指的是<code>等待一组工作完成后，再进行下一组工作</code>。</p><p>在goroutine调用waitGroup.Wait进行等待之前，需要保证waitGroup中等待数量大于1，即waitGroup.Add方法需要在waitGroup.Wait之前执行，否则等待就会被忽略。除此之外，还需要保证waitGroup.Done执行次数与waitGroup.Add添加的等待数量一致，过少会导致等待goroutine死锁，过多会导致程序panic。<br>sync. WaitGroup适用于执行批量操作，等待所有goroutine执行结束后统一返回结果的情况。</p><p><code>sync.WaitGroup</code>有3个接口</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>wg <span class="token operator">*</span>WaitGroup<span class="token punctuation">)</span> <span class="token function">Add</span><span class="token punctuation">(</span>delta <span class="token builtin">int</span><span class="token punctuation">)</span>  Add添加n个并发协程<span class="token keyword">func</span> <span class="token punctuation">(</span>wg <span class="token operator">*</span>WaitGroup<span class="token punctuation">)</span> <span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  Done完成一个并发协程<span class="token keyword">func</span> <span class="token punctuation">(</span>wg <span class="token operator">*</span>WaitGroup<span class="token punctuation">)</span> <span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  Wait等待其它并发协程结束<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go"><code class="language-go">waitGroup<span class="token operator">:=</span>sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">{</span><span class="token punctuation">}</span>    waitGroup<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>            time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>            waitGroup<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    waitGroup<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"all works done"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还可以设置最大并行数,如果已经达到10个并发协程，只有某一个协程执行了Done才能启动一个新的协程。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     # 最大<span class="token number">10</span>个并发     wg <span class="token operator">:=</span> sizedwaitgroup<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>     <span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>         wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>         fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hello world ~"</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">// 等待所有协程结束</span>     wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"WaitGroup all process done ~"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Map：自带锁的map"><a href="#Map：自带锁的map" class="headerlink" title="Map：自带锁的map"></a>Map：自带锁的map</h4><p>Go在1.9版本之前自带的map对象是不具有并发安全的，很多时候我们都得自己封装支持并发安全的Map结构，如下所示给map加个读写锁sync.RWMutex。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> MapWithLock <span class="token keyword">struct</span> <span class="token punctuation">{</span>    sync<span class="token punctuation">.</span>RWMutex    M <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>Kline<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Go1.9版本新增了<code>sync.Map</code>它是原生支持并发安全的map，sync.Map封装了更为复杂的数据结构实现了比之前<code>加读写锁锁map</code>更优秀的性能。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 查询一个key</span><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Map<span class="token punctuation">)</span> <span class="token function">Load</span><span class="token punctuation">(</span>key <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>value <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> ok <span class="token builtin">bool</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 设置key value</span><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Map<span class="token punctuation">)</span> <span class="token function">Store</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 如果key存在则返回key对应的value，否则设置key value</span><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Map<span class="token punctuation">)</span> <span class="token function">LoadOrStore</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>actual <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> loaded <span class="token builtin">bool</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 删除一个key</span><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Map<span class="token punctuation">)</span> <span class="token function">Delete</span><span class="token punctuation">(</span>key <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 遍历map，仍然是无序的</span><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Map<span class="token punctuation">)</span> <span class="token function">Range</span><span class="token punctuation">(</span>f <span class="token keyword">func</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">bool</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Once：执行一次"><a href="#Once：执行一次" class="headerlink" title="Once：执行一次"></a>Once：执行一次</h4><p><code>sync.Once</code>指的是只执行一次的对象实现，常用来控制某些函数只能被调用一次。<code>sync.Once</code>的使用场景例如单例模式、系统初始化。<br>例如并发情况下多次调用channel的close会导致panic，解决这个问题我们可以使用sync.Once来保证close只会被执行一次。</p><p>sync.Once的结构如下所示，只有一个函数。使用变量done来记录函数的执行状态，使用sync.Mutex和sync.atomic来保证线程安全的读取done。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> Once <span class="token keyword">struct</span> <span class="token punctuation">{</span>    m    Mutex     #互斥锁    done <span class="token builtin">uint32</span>    #执行状态<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>o <span class="token operator">*</span>Once<span class="token punctuation">)</span> <span class="token function">Do</span><span class="token punctuation">(</span>f <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举个例子，1000个并发协程情况下只有一个协程会执行到fmt.Printf，多次执行的情况下输出的内容还不一样，因为这取决于哪个协程先调用到该匿名函数。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     once <span class="token operator">:=</span> <span class="token operator">&amp;</span>sync<span class="token punctuation">.</span>Once<span class="token punctuation">{</span><span class="token punctuation">}</span>     <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>     <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>idx <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        once<span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"hello world index: %d"</span><span class="token punctuation">,</span> idx<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>     <span class="token punctuation">}</span>     time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Cond：信号量"><a href="#Cond：信号量" class="headerlink" title="Cond：信号量"></a>Cond：信号量</h4><p><code>sync.Cond</code>指的是同步条件变量，一般需要与互斥锁组合使用，本质上是一些正在等待某个条件的协程的同步机制。</p><pre><code>// NewCond returns a new Cond with Locker l.func NewCond(l Locker) *Cond {    return &amp;Cond{L: l}}// A Locker represents an object that can be locked and unlocked.type Locker interface {    Lock()    Unlock()}</code></pre><p>sync.Cond<code>有3个函数</code>Wait<code>、</code>Signal<code>、</code>Broadcast</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> Cond <span class="token keyword">struct</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// L is held while observing or changing the condition</span>        L Locker        <span class="token comment" spellcheck="true">// contains filtered or unexported fields</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Cond<span class="token punctuation">)</span> <span class="token function">Broadcast</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 广播唤醒所有wait</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Cond<span class="token punctuation">)</span> <span class="token function">Signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 唤醒其中一个wait</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Cond<span class="token punctuation">)</span> <span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 进入等待状态，释放锁</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Broadcase、Signal<br>唤醒因wait condition而挂起goroutine，Signal只唤醒一个，而Broadcast唤醒所有。允许调用者获取基础锁Locker之后再调用唤醒，但非必需。<br>Wait<br>必须获取该锁之后才能调用Wait()方法，Wait方法在调用时会释放底层锁Locker，并且将当前goroutine挂起，直到另一个goroutine执行Signal或者Broadcase，该goroutine才有机会重新唤醒，并尝试获取Locker，完成后续逻辑。<br>举例：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">var</span> sharedRsc <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup    wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    m <span class="token operator">:=</span> sync<span class="token punctuation">.</span>Mutex<span class="token punctuation">{</span><span class="token punctuation">}</span>    c <span class="token operator">:=</span> sync<span class="token punctuation">.</span><span class="token function">NewCond</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// this go routine wait for changes to the sharedRsc</span>        c<span class="token punctuation">.</span>L<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token function">len</span><span class="token punctuation">(</span>sharedRsc<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>            c<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>sharedRsc<span class="token punctuation">[</span><span class="token string">"rsc1"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        c<span class="token punctuation">.</span>L<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// this go routine wait for changes to the sharedRsc</span>        c<span class="token punctuation">.</span>L<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token function">len</span><span class="token punctuation">(</span>sharedRsc<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>            c<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>sharedRsc<span class="token punctuation">[</span><span class="token string">"rsc2"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        c<span class="token punctuation">.</span>L<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// this one writes changes to sharedRsc</span>    c<span class="token punctuation">.</span>L<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    sharedRsc<span class="token punctuation">[</span><span class="token string">"rsc1"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"foo"</span>    sharedRsc<span class="token punctuation">[</span><span class="token string">"rsc2"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"bar"</span>    c<span class="token punctuation">.</span><span class="token function">Broadcast</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    c<span class="token punctuation">.</span>L<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">tt</span><span class="token punctuation">(</span>cd <span class="token operator">*</span>sync<span class="token punctuation">.</span>Cond<span class="token punctuation">,</span> wg <span class="token operator">*</span>sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">,</span> i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    cd<span class="token punctuation">.</span>L<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"lock: %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>    cd<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"wait end: %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>    cd<span class="token punctuation">.</span>L<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    l <span class="token operator">:=</span> <span class="token operator">&amp;</span>sync<span class="token punctuation">.</span>Mutex<span class="token punctuation">{</span><span class="token punctuation">}</span>    w <span class="token operator">:=</span> <span class="token operator">&amp;</span>sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">{</span><span class="token punctuation">}</span>    cd <span class="token operator">:=</span> sync<span class="token punctuation">.</span><span class="token function">NewCond</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        w<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">go</span> <span class="token function">tt</span><span class="token punctuation">(</span>cd<span class="token punctuation">,</span> w<span class="token punctuation">,</span> i<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Send 5 Signal:"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        cd<span class="token punctuation">.</span><span class="token function">Signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//唤醒一个wait中的goroutine</span>    <span class="token punctuation">}</span>    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Send Broadcast:"</span><span class="token punctuation">)</span>    cd<span class="token punctuation">.</span><span class="token function">Broadcast</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//广播唤醒所有wait中的goroutine</span>    w<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Run end!"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出</p><pre class="line-numbers language-go"><code class="language-go">lock<span class="token punctuation">:</span> <span class="token number">1</span>lock<span class="token punctuation">:</span> <span class="token number">2</span>lock<span class="token punctuation">:</span> <span class="token number">7</span>lock<span class="token punctuation">:</span> <span class="token number">8</span>lock<span class="token punctuation">:</span> <span class="token number">9</span>lock<span class="token punctuation">:</span> <span class="token number">0</span>lock<span class="token punctuation">:</span> <span class="token number">3</span>lock<span class="token punctuation">:</span> <span class="token number">6</span>lock<span class="token punctuation">:</span> <span class="token number">5</span>lock<span class="token punctuation">:</span> <span class="token number">4</span>Send <span class="token number">5</span> Signal<span class="token punctuation">:</span>wait end<span class="token punctuation">:</span> <span class="token number">7</span>wait end<span class="token punctuation">:</span> <span class="token number">9</span>wait end<span class="token punctuation">:</span> <span class="token number">2</span>wait end<span class="token punctuation">:</span> <span class="token number">8</span>wait end<span class="token punctuation">:</span> <span class="token number">1</span>Send Broadcast<span class="token punctuation">:</span>wait end<span class="token punctuation">:</span> <span class="token number">4</span>wait end<span class="token punctuation">:</span> <span class="token number">0</span>wait end<span class="token punctuation">:</span> <span class="token number">3</span>wait end<span class="token punctuation">:</span> <span class="token number">6</span>wait end<span class="token punctuation">:</span> <span class="token number">5</span>Run end<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Pool：临时对象池"><a href="#Pool：临时对象池" class="headerlink" title="Pool：临时对象池"></a>Pool：临时对象池</h4><p>sync.Pool指的是临时对象池，Golang和Java具有GC机制，因此很多开发者基本上都不会考虑内存回收问题，不像C++很多时候开发需要自己回收对象。<br>Gc是一把双刃剑，带来了编程的方便但同时也增加了运行时开销，使用不当可能会严重影响程序的性能，因此性能要求高的场景不能任意产生太多的垃圾。<br>sync.Pool正是用来解决这类问题的，Pool可以作为临时对象池来使用，不再自己单独创建对象，而是从临时对象池中获取出一个对象。</p><p>sync.Pool有2个函数Get和Put，Get负责从临时对象池中取出一个对象，Put用于结束的时候把对象放回临时对象池中。</p><p>PS：如果你使用的Pool代码所需的东西不是大概同质的，那么从Pool中转化检索到所需要的内容的时间可能比重新实例化内容要花费的时间更多。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> Pool <span class="token keyword">struct</span> <span class="token punctuation">{</span>        noCopy noCopy    local     unsafe<span class="token punctuation">.</span>Pointer <span class="token comment" spellcheck="true">// local fixed-size per-P pool, actual type is [P]poolLocal</span>    localSize <span class="token builtin">uintptr</span>        <span class="token comment" spellcheck="true">// size of the local array</span>    victim     unsafe<span class="token punctuation">.</span>Pointer <span class="token comment" spellcheck="true">// local from previous cycle</span>    victimSize <span class="token builtin">uintptr</span>        <span class="token comment" spellcheck="true">// size of victims array</span>    <span class="token comment" spellcheck="true">// New optionally specifies a function to generate</span>    <span class="token comment" spellcheck="true">// a value when Get would otherwise return nil.</span>    <span class="token comment" spellcheck="true">// It may not be changed concurrently with calls to Get.</span>      New <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// contains filtered or unexported fields</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Local per-P Pool appendix.</span><span class="token keyword">type</span> poolLocalInternal <span class="token keyword">struct</span> <span class="token punctuation">{</span>    private <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// Can be used only by the respective P.</span>    shared  poolChain   <span class="token comment" spellcheck="true">// Local P can pushHead/popHead; any P can popTail.</span><span class="token punctuation">}</span><span class="token keyword">type</span> poolLocal <span class="token keyword">struct</span> <span class="token punctuation">{</span>    poolLocalInternal    <span class="token comment" spellcheck="true">// Prevents false sharing on widespread platforms with</span>    <span class="token comment" spellcheck="true">// 128 mod (cache line size) = 0 .</span>    pad <span class="token punctuation">[</span><span class="token number">128</span> <span class="token operator">-</span> unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span>poolLocalInternal<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>local这里面真正的是[P]poolLocal其中P就是GPM模型中的P，有多少个P数组就有多大，也就是每个P维护了一个本地的poolLocal。</p><p>poolLocal里面维护了一个private一个shared，看名字其实就很明显了，private是给自己用的，而shared的是一个队列，可以给别人用的。注释写的也很清楚，自己可以从队列的头部存然后从头部取，而别的P可以从尾部取。</p><p>victim这个从字面上面也可以知道，幸存者嘛，当进行gc的stw时候，会将local中的对象移到victim中去，也就是说幸存了一次gc，</p><p>local和victim两个字段，这两个字段主要用来存储空闲元素。每次垃圾回收的时候，Pool会把victim中的对象移除，然后把local的数据给victim，清空local。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">//function list:</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>Pool<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//从 Pool 中获取元素，元素数量 -1，当 Pool 中没有元素时，会调用 New 生成元素，新元素不会放入 Pool 中，若 New 未定义，则返回 nil</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>Pool<span class="token punctuation">)</span> <span class="token function">Put</span><span class="token punctuation">(</span>x <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 把用完的元素放回Pool中</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Get的逻辑其实非常清晰。</p><ul><li>如果 private 不是空的，那就直接拿来用</li><li>如果 private 是空的，那就先去本地的shared队列里面从头 pop 一个</li><li>如果本地的 shared 也没有了，那 getSlow 去拿，其实就是去别的P的 shared 里面偷，偷不到回去 victim 幸存者里面找</li><li>如果最后都没有，那就只能调用 New 方法创建一个了</li></ul><p>其实Put就很简单了</p><ul><li>如果 private 没有，就放在 private</li><li>如果 private 有了，那么就放到 shared 队列的头部</li></ul><p>通过<code>New</code>去定义你这个池子里面放的究竟是什么东西，在这个池子里面你只能放一种类型的东西。比如在上面的例子中我就在池子里面放了字符串。</p><p>我们随时可以通过<code>Get</code>方法从池子里面获取我们之前在New里面定义类型的数据。</p><p>当我们用完了之后可以通过<code>Put</code>方法放回去，或者放别的同类型的数据进去。</p><p>那么这个池子的目的是什么呢？其实一句话就可以说明白，就是为了复用已经使用过的对象，来达到优化内存使用和回收的目的。说白了，一开始这个池子会初始化一些对象供你使用，如果不够了呢，自己会通过new产生一些，当你放回去了之后这些对象会被别人进行复用，当对象特别大并且使用非常频繁的时候可以大大的减少对象的创建和回收的时间。</p><p>sync.Pool在init的时候注册了一个poolCleanup函数，它会清除所有的pool里面的所有缓存的对象，该函数注册进去之后会在每次Gc之前都会调用，因此sync.Pool缓存的期限只是两次Gc之间这段时间。正因Gc的时候会清掉缓存对象，所以不用担心pool会无限增大的问题。</p><p>举例</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">var</span> pool <span class="token operator">=</span> sync<span class="token punctuation">.</span>Pool<span class="token punctuation">{</span>    New<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"123"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    t <span class="token operator">:=</span> pool<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>    pool<span class="token punctuation">.</span><span class="token function">Put</span><span class="token punctuation">(</span><span class="token string">"321"</span><span class="token punctuation">)</span>    t2 <span class="token operator">:=</span> pool<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出 </p><pre class="line-numbers language-go"><code class="language-go"><span class="token number">123</span><span class="token number">321</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>举例2</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">var</span> pool <span class="token operator">=</span> sync<span class="token punctuation">.</span>Pool<span class="token punctuation">{</span>    New<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"123"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    t <span class="token operator">:=</span> pool<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>    pool<span class="token punctuation">.</span><span class="token function">Put</span><span class="token punctuation">(</span><span class="token string">"321"</span><span class="token punctuation">)</span>    pool<span class="token punctuation">.</span><span class="token function">Put</span><span class="token punctuation">(</span><span class="token string">"321"</span><span class="token punctuation">)</span>    pool<span class="token punctuation">.</span><span class="token function">Put</span><span class="token punctuation">(</span><span class="token string">"321"</span><span class="token punctuation">)</span>    pool<span class="token punctuation">.</span><span class="token function">Put</span><span class="token punctuation">(</span><span class="token string">"321"</span><span class="token punctuation">)</span>    runtime<span class="token punctuation">.</span><span class="token function">GC</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>    t2 <span class="token operator">:=</span> pool<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span>    runtime<span class="token punctuation">.</span><span class="token function">GC</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>    t2 <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token number">123</span><span class="token comment" spellcheck="true">//无对象new一个</span><span class="token number">321</span><span class="token comment" spellcheck="true">//一次GC后 local的对象到victim中，get不到local中的就去victim中取</span><span class="token number">123</span><span class="token comment" spellcheck="true">//再次gc victim中被清楚</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 后端 </tag>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go结构体</title>
      <link href="/2021/11/18/go-struct/"/>
      <url>/2021/11/18/go-struct/</url>
      
        <content type="html"><![CDATA[<h1 id="Go结构体"><a href="#Go结构体" class="headerlink" title="Go结构体"></a>Go结构体</h1><h2 id="Go结构体-1"><a href="#Go结构体-1" class="headerlink" title="Go结构体"></a>Go结构体</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> user <span class="token keyword">struct</span> <span class="token punctuation">{</span>    age  <span class="token builtin">int</span>    name <span class="token builtin">string</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">//方式1 new方式，返回指针类型*T</span>u2 <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//方式2 var的方式，返回T类型，里面的都是0值,如果里面还有个结构体，里面的结构体页初始为0值</span><span class="token keyword">var</span> u1 useru1<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"s"</span>u1<span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">1</span><span class="token comment" spellcheck="true">//方式3字面量的方式</span>u <span class="token operator">:=</span> user<span class="token punctuation">{</span><span class="token punctuation">}</span>u3 <span class="token operator">:=</span> <span class="token operator">&amp;</span>user<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"zz"</span><span class="token punctuation">}</span>u3 <span class="token operator">:=</span> <span class="token operator">&amp;</span>user<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//等价于new(T)</span>u4 <span class="token operator">:=</span> user<span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">"s"</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span>  <span class="token number">1</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//其中可以省略其中一个参数</span><span class="token punctuation">}</span>u5 <span class="token operator">:=</span> user<span class="token punctuation">{</span>   <span class="token string">"s"</span><span class="token punctuation">,</span>   <span class="token number">1</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//必须和属性一一对应，并且不能少其中任何一个</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法与接收器"><a href="#方法与接收器" class="headerlink" title="方法与接收器"></a>方法与接收器</h3><p>在go中，方法是有特定接收器的函数，接收器可以是任意类型而不仅仅是结构体</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>recipient recipentType<span class="token punctuation">)</span> <span class="token function">methodName</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">return</span> params<span class="token punctuation">)</span><span class="token punctuation">{</span>    function body<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>接收器有两种类别，分别是指针类型的接收器和非指针类型的接收器，他们在使用时会产生不同的效果。</p><p>指针类型的接收器传递的是<strong>类型的指针</strong>，指针操作的是接收器的内存区域，而非指针类型的接收器传递的是方法调用时接收器的一份<strong>值拷贝</strong>，所以对接收器的成员改变并不会影响到原接收器。</p><p>当接收器占用内存较大或者需要对原接收器的成员属性进行修改时，建议采用指针类型接收器；</p><p>如果接收器占用内存较小，且方法对其仅需要只读功能，可以采用非指针接收器。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>u user<span class="token punctuation">)</span> <span class="token function">printName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//u.age=2//修改对原接收器并不会改变</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>u <span class="token operator">*</span>user<span class="token punctuation">)</span> <span class="token function">changeName</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    u<span class="token punctuation">.</span>name <span class="token operator">=</span> s<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="内嵌和组合"><a href="#内嵌和组合" class="headerlink" title="内嵌和组合"></a>内嵌和组合</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> Wheel <span class="token keyword">struct</span> <span class="token punctuation">{</span>    shape <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//可以理解为继承</span><span class="token keyword">type</span> Car <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Wheel<span class="token comment" spellcheck="true">//不指定属性名，只能出现一个Wheel</span>    Name <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//也可以理解为对象</span><span class="token keyword">type</span> Car <span class="token keyword">struct</span> <span class="token punctuation">{</span>    a    Wheel    b    Wheel    Name <span class="token builtin">string</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>组合可以理解为多继承</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> Swimming <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">type</span> Flying <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>swim <span class="token operator">*</span>Swimming<span class="token punctuation">)</span> <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"游泳特性"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>fly <span class="token operator">*</span>Flying<span class="token punctuation">)</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"飞行属性"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">type</span> WildDuck <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Swimming    Flying<span class="token punctuation">}</span><span class="token keyword">type</span> HomeDuck <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Swimming<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  wildDuck <span class="token operator">:=</span> WildDuck<span class="token punctuation">{</span><span class="token punctuation">}</span>    homeDuck <span class="token operator">:=</span> HomeDuck<span class="token punctuation">{</span><span class="token punctuation">}</span>    wildDuck<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    wildDuck<span class="token punctuation">.</span><span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    homeDuck<span class="token punctuation">.</span><span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 后端 </tag>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go调度模型</title>
      <link href="/2021/11/18/go-schedule/"/>
      <url>/2021/11/18/go-schedule/</url>
      
        <content type="html"><![CDATA[<h1 id="Go调度模型"><a href="#Go调度模型" class="headerlink" title="Go调度模型"></a>Go调度模型</h1><h2 id="Go调度模型-1"><a href="#Go调度模型-1" class="headerlink" title="Go调度模型"></a>Go调度模型</h2><h3 id="GO-CSP模型"><a href="#GO-CSP模型" class="headerlink" title="GO CSP模型"></a>GO CSP模型</h3><p><strong>常见的线程模型</strong></p><p>线程之间的调度永远是一个复杂的话题，但是并发编程必然会涉及到操作系统对线程的调度。根据资源访问权限的不同，操作系统会把内存分为内核空间和用户空间，内核空间的指令代码具备直接调度计算机底层资源的能力，比如说I/O资源等；用户空间的代码没有访问计算底层资源的能力，需要通过系统调用等方式切换为内核态来实现对计算机底层资源的申请和调度。<br>线程作为操作系统能够调度的最小单位，也分为用户线程和内核线程。<br>（1）用户线程由用户空间的代码创建、管理和销毁，线程的调度由用户空间的线程库完成（可能是编程语言层次的线程库），无需切换内核态，资源消耗少且高效。同一进程下创建的用户线程对CPU的竞争是以进程的维度参与的，这会导致该进程下的用户线程只能分时复用进程被分配的CPU时间片，所以无法很好利用CPU多核运算的优势。我们一般情况下说的线程其实是指用户线程。<br>（2）内核线程由操作系统管理和调度，能够直接操作计算机底层的资源，线程切换的时候CPU需要切换到内核态。它能够很好利用多核CPU并行计算的优势，开发人员可以通过系统调用的方式使用内核线程。<br>用户线程是无法被操作系统感知的，用户线程所属的进程或者内核线程才能被操作系统直接调度，分配CPU的使用时间，下面是不同的线程模型。</p><ol><li><p>用户级线程 1:N关系</p><p>N个协程绑定1个线程，优点就是<strong>协程在用户态线程即完成切换，不会陷入到内核态，这种切换非常的轻量快速</strong>。但也有很大的缺点，1个进程的所有协程都绑定在1个线程上</p><p>缺点：</p><ul><li>某个程序用不了硬件的多核加速能力，只能通过分时复用的方式来轮换</li><li>一旦某协程阻塞，造成线程阻塞，本进程的其他协程都无法执行了，根本就没有并发的能力了。比如线程A请求I/O操作被阻塞，很可能导致整个进程范围内的阻塞，因为此时进程对应的内核线程因为线程A的I/O阻塞而被剥夺CPU执行时间，导致整个进程失去了在CPU执行代码的权利！</li></ul><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211118001839.png" alt="image-20211028223748069"></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211118001853.png" alt="image-20211028223759717"></p></li></ol><ol start="2"><li><p>内核级线程模型 1:1关系</p><p>1个协程绑定1个线程，这种最容易实现。协程的调度都由CPU完成了</p><p>进程内每创建一个新的线程都会调用操作系统的线程库在内核创建一个新的内核线程与之对应，线程的管理和调度由操作系统负责，这将导致每次线程切换上下文时都会从用户态切换到内核态，产生有不小的资源消耗，同时创建线程的数量也会受限于操作系统内核可创建内核线程的数量。</p><p>优点是多线程能够充分利用CPU的多核并行计算能力，因为每个线程可以独立被操作系统调度分配到CPU上执行指令，同时某个线程的阻塞并不会影响到进程内其他线程工作的执行。</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211118001905.png" alt="image-20211028224359295"></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211118001914.png" alt="image-20211028224419735"></p></li></ol><ol start="3"><li><p>两级线程模型 M:N关系</p><p>进程会预先申请一定数量的内核线程，然后将自身创建的线程与内核进程进行对应。线程的调用和管理由进程内的调度器负责，而内核线程的调度和管理由操作系统负责。这种线程模型既能够有效降低线程创建和管理的资源消耗，也能够很好地提供线程并行计算的能力。两级线程模型也给开发人员带来较大的技术挑战，因为开发人员需要在程序代码中模拟线程调度的细节，包括但不限于：线程切换时上下文信息的保存和恢复，栈空间大小的管理等。</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211118001932.png" alt="image-20211028225818561"></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211118001949.png" alt="image-20211028225834485"></p><p>协程跟线程是有区别的，线程由CPU调度是抢占式的，<strong>协程由用户态调度是协作式的</strong>，一个协程让出CPU后，才执行下一个协程。</p></li></ol><h3 id="Go-GMP"><a href="#Go-GMP" class="headerlink" title="Go GMP"></a><strong>Go GMP</strong></h3><h4 id="GMP模型"><a href="#GMP模型" class="headerlink" title="GMP模型"></a>GMP模型</h4><p>Go语言的MPG模型属于一种特殊的两级线程模型，它将CPU、内核线程、线程的关系描述为M、P、G三者的关系</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211118002018.png" alt="image-20211028230921508"></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211118002032.png" alt="image-20211028231309618"></p><p>G为goroutine协程</p><p>P为Processor 一个Prcessor表示执行Go代码片段的所必需的上下文环境，可以理解为用户代码逻辑的处理器</p><p>M为Machine 一个Machine对应一个内核线程，相当于内核线程在Go语言进程中的映射</p><ol><li><strong>全局队列</strong>（Global Queue）：存放等待运行的G。</li><li><strong>P的本地队列</strong>：同全局队列类似，存放的也是等待运行的G，存的数量有限，不超过256个。新建G’时，G’优先加入到P的本地队列，如果队列满了，则会把本地队列中一半的G移动到全局队列。</li><li><strong>P列表</strong>：所有的P都在程序启动时创建，并保存在数组中，最多有<code>GOMAXPROCS</code>(可配置)个。在单个Go语言进程中，P的最大数量决定了程序的并发规模，且P的最大数量是由程序决定的。可以通过修改环境变量GOMAXPROCS和调用函数runtime.GOMAXPROCS来设定P的最大值。</li><li><strong>M</strong>：线程想运行任务就得获取P，从P的本地队列获取G，P队列为空时，M也会尝试从全局队列<strong>拿</strong>一批G放到P的本地队列，或从其他P的本地队列<strong>偷</strong>一半放到自己P的本地队列。M运行G，G执行之后，M会从P获取下一个G，不断重复下去。</li></ol><p>M和P会适时的组合和断开，以保证待执行G队列能够得到及时运行。比如说图4-5中的G0此时因为网络I/O而阻塞了M，那么P就会携带剩余的G投入到其他M中。这个新的M（图4-6中的M1）可能是新创建的，也可能是从调度器空闲M列表中获取的这取决于此时的调度器空闲M列表中是否存在M，这样的机制设计也是为了避免M过多创建。运行机制如图4-6所示。</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211118002042.png" alt="image-20211028232515637"></p><p>当M对应的内核线程被唤醒时，M将会尝试为G0捕获一个P上下文，可能是从调度器的空闲P列表中获取，如果获取不成功，M会把G0放入到调度器的可执行G队列中，等待其他P的查找。为了保证G的均衡执行，非空闲的P运行完自身的可执行G队列后，会周期性从调度器的可执行G队列中获取待执行的G，甚至从其他的P的可执行G队列中掠夺G。</p><p><strong>Goroutine调度器和OS调度器是通过M结合起来的，每个M都代表了1个内核线程，OS调度器负责把内核线程分配到CPU的核上执行</strong>。</p><h4 id="有关P和M的个数问题"><a href="#有关P和M的个数问题" class="headerlink" title="有关P和M的个数问题"></a>有关P和M的个数问题</h4><p>1、P的数量：</p><ul><li>由启动时环境变量<code>$GOMAXPROCS</code>或者是由<code>runtime</code>的方法<code>GOMAXPROCS()</code>决定。这意味着在程序执行的任意时刻都只有<code>$GOMAXPROCS</code>个goroutine在同时运行。</li></ul><p>2、M的数量:</p><ul><li>go语言本身的限制：go程序启动时，会设置M的最大数量，默认10000.但是内核很难支持这么多的线程数，所以这个限制可以忽略。</li><li>runtime/debug中的SetMaxThreads函数，设置M的最大数量</li><li>一个M阻塞了，会创建新的M。</li></ul><p>M与P的数量没有绝对关系，一个M阻塞，P就会去创建或者切换另一个M，所以，即使P的默认数量是1，也有可能会创建很多个M出来。</p><h4 id="P和M何时会被创建"><a href="#P和M何时会被创建" class="headerlink" title="P和M何时会被创建"></a>P和M何时会被创建</h4><p>1、P何时创建：在确定了P的最大数量n后，运行时系统会根据这个数量创建n个P。</p><p>2、M何时创建：没有足够的M来关联P并运行其中的可运行的G。比如所有的M此时都阻塞住了，而P中还有很多就绪任务，就会去寻找空闲的M，而没有空闲的，就会去创建新的M。</p><h4 id="调度器的设计策略"><a href="#调度器的设计策略" class="headerlink" title="调度器的设计策略"></a>调度器的设计策略</h4><p><strong>复用线程</strong>：避免频繁的创建、销毁线程，而是对线程的复用。</p><p>1）work stealing机制</p><p>​    当本线程无可运行的G时，尝试从其他线程绑定的P偷取G，而不是销毁线程。</p><p>2）hand off机制</p><p>​    当本线程因为G进行系统调用阻塞时，线程释放绑定的P，把P转移给其他空闲的线程执行。</p><p><strong>利用并行</strong>：<code>GOMAXPROCS</code>设置P的数量，最多有<code>GOMAXPROCS</code>个线程分布在多个CPU上同时运行。<code>GOMAXPROCS</code>也限制了并发的程度，比如<code>GOMAXPROCS = 核数/2</code>，则最多利用了一半的CPU核进行并行。</p><p><strong>抢占</strong>：在coroutine中要等待一个协程主动让出CPU才执行下一个协程，在Go中，一个goroutine最多占用CPU 10ms，防止其他goroutine被饿死，这就是goroutine不同于coroutine的一个地方。</p><p><strong>全局G队列</strong>：在新的调度器中依然有全局G队列，但功能已经被弱化了，当M执行work stealing从其他P偷不到G时，它可以从全局G队列获取G。</p><h4 id="go-func-调度流程"><a href="#go-func-调度流程" class="headerlink" title="go func() 调度流程"></a>go func() 调度流程</h4><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211118002052.png" alt="image-20211028234903398"></p><p>从上图我们可以分析出几个结论：</p><p>​    1、我们通过 go func()来创建一个goroutine；</p><p>​    2、有两个存储G的队列，一个是局部调度器P的本地队列、一个是全局G队列。新创建的G会先保存在P的本地队列中，如果P的本地队列已经满了就会保存在全局的队列中；</p><p>​    3、G只能运行在M中，一个M必须持有一个P，M与P是1：1的关系。M会从P的本地队列弹出一个可执行状态的G来执行，如果P的本地队列为空，就会想其他的MP组合偷取一个可执行的G来执行；</p><p>​    4、一个M调度G执行的过程是一个循环机制；</p><p>​    5、当M执行某一个G时候如果发生了syscall或则其余阻塞操作，M会阻塞，如果当前有一些G在执行，runtime会把这个线程M从P中摘除(detach)，然后再创建一个新的操作系统的线程(如果有空闲的线程可用就复用空闲线程)来服务于这个P；</p><p>​    6、当M系统调用结束时候，这个G会尝试获取一个空闲的P执行，并放入到这个P的本地队列。如果获取不到P，那么这个线程M变成休眠状态， 加入到空闲线程中，然后这个G会被放入全局队列中。</p><h4 id="调度器的生命周期"><a href="#调度器的生命周期" class="headerlink" title="调度器的生命周期"></a>调度器的生命周期</h4><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211118002111.png" alt="image-20211028235448182"></p><p>特殊的M0和G0</p><p><strong>M0</strong></p><p><code>M0</code>是启动程序后的编号为0的主线程，这个M对应的实例会在全局变量runtime.m0中，不需要在heap上分配，M0负责执行初始化操作和启动第一个G， 在之后M0就和其他的M一样了。</p><p><strong>G0</strong></p><p><code>G0</code>是每次启动一个M都会第一个创建的gourtine，G0仅用于负责调度的G，G0不指向任何可执行的函数, 每个M都会有一个自己的G0。在调度或系统调用时会使用G0的栈空间, 全局变量的G0是M0的G0。</p><p>我们来跟踪一段代码</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Hello world"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>runtime创建最初的线程m0和goroutine g0，并把2者关联。</li><li>调度器初始化：初始化m0、栈、垃圾回收，以及创建和初始化由GOMAXPROCS个P构成的P列表。</li><li>示例代码中的main函数是<code>main.main</code>，<code>runtime</code>中也有1个main函数——<code>runtime.main</code>，代码经过编译后，<code>runtime.main</code>会调用<code>main.main</code>，程序启动时会为<code>runtime.main</code>创建goroutine，称它为main goroutine吧，然后把main goroutine加入到P的本地队列。</li><li>启动m0，m0已经绑定了P，会从P的本地队列获取G，获取到main goroutine。</li><li>G拥有栈，M根据G中的栈信息和调度信息设置运行环境</li><li>M运行G</li><li>G退出，再次回到M获取可运行的G，这样重复下去，直到<code>main.main</code>退出，<code>runtime.main</code>执行Defer和Panic处理，或调用<code>runtime.exit</code>退出程序。</li></ol><p>调度器的生命周期几乎占满了一个Go程序的一生，<code>runtime.main</code>的goroutine执行之前都是为调度器做准备工作，<code>runtime.main</code>的goroutine运行，才是调度器的真正开始，直到<code>runtime.main</code>结束而结束。</p><h4 id="可视化GMP编程"><a href="#可视化GMP编程" class="headerlink" title="可视化GMP编程"></a>可视化GMP编程</h4><p>方式1<strong>go tool trace</strong></p><p>trace记录了运行时的信息，能提供可视化的Web页面。</p><p>简单测试代码：main函数创建trace，trace会运行在单独的goroutine中，然后main打印”Hello World”退出。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"os"</span>    <span class="token string">"fmt"</span>    <span class="token string">"runtime/trace"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//创建trace文件</span>    f<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token string">"trace.out"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">defer</span> f<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//启动trace goroutine</span>    err <span class="token operator">=</span> trace<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">defer</span> trace<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//main</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211118002129.png" alt="image-20211029000827142"></p><p><strong>方式2：Debug trace</strong></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211118002137.png" alt="image-20211029000901166"></p><h4 id="Go调度器调度场景过程全解析"><a href="#Go调度器调度场景过程全解析" class="headerlink" title="Go调度器调度场景过程全解析"></a>Go调度器调度场景过程全解析</h4><p>(1)场景1</p><p>P拥有G1，M1获取P后开始运行G1，G1使用<code>go func()</code>创建了G2，为了局部性G2优先加入到P1的本地队列。</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211118002153.png" alt="image-20211029154535759"></p><p><strong>(2)场景</strong></p><p>G1运行完成后(函数：<code>goexit</code>)，M上运行的goroutine切换为G0，G0负责调度时协程的切换（函数：<code>schedule</code>）。从P的本地队列取G2，从G0切换到G2，并开始运行G2(函数：<code>execute</code>)。实现了线程M1的复用。</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211118002215.png" alt="image-20211029154718039"></p><p><strong>(3)场景3</strong></p><p>假设每个P的本地队列只能存3个G。G2要创建了6个G，前3个G（G3, G4, G5）已经加入p1的本地队列，p1本地队列满了。</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211118002226.png" alt="image-20211029154902935"></p><p><strong>(4)场景4</strong></p><p>G2在创建G7的时候，发现P1的本地队列已满，需要执行<strong>负载均衡</strong>(把P1中本地队列中前一半的G，还有新创建G<strong>转移</strong>到全局队列)</p><p>（实现中并不一定是新的G，如果G是G2之后就执行的，会被保存在本地队列，利用某个老的G替换新G加入全局队列）</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211118002239.png" alt="image-20211029155022551"></p><p>这些G被转移到全局队列时，会被打乱顺序。所以G3,G4,G7被转移到全局队列</p><p><strong>(5)场景</strong></p><p>G2创建G8时，P1的本地队列未满，所以G8会被加入到P1的本地队列。</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211118002301.png" alt="image-20211029155132213"></p><p>​    G8加入到P1点本地队列的原因还是因为P1此时在与M1绑定，而G2此时是M1在执行。所以G2创建的新的G会优先放置到自己的M绑定的P上。</p><p><strong>(6)场景6</strong></p><p>规定：<strong>在创建G时，运行的G会尝试唤醒其他空闲的P和M组合去执行</strong>。</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211118002316.png" alt="image-20211029155253175"></p><p>假定G2唤醒了M2，M2绑定了P2，并运行G0，但P2本地队列没有G，M2此时为自旋线程<strong>（没有G但为运行状态的线程，不断寻找G）</strong>。</p><p><strong>(7)场景7</strong></p><p>M2尝试从全局队列(简称“GQ”)取一批G放到P2的本地队列（函数：<code>findrunnable()</code>）。M2从全局队列取的G数量符合下面的公式：</p><pre class="line-numbers language-go"><code class="language-go">n <span class="token operator">=</span>  <span class="token function">min</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>GQ<span class="token punctuation">)</span> <span class="token operator">/</span> GOMAXPROCS <span class="token operator">+</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token function">cap</span><span class="token punctuation">(</span>LQ<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211118002332.png" alt="image-20211029155429957"></p><p><strong>(8)场景8</strong></p><p>假设G2一直在M1上运行，经过2轮后，M2已经把G7、G4从全局队列获取到了P2的本地队列并完成运行，全局队列和P2的本地队列都空了,如场景8图的左半部分。</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211118002350.png" alt="image-20211029155546220"></p><p><strong>全局队列已经没有G，那m就要执行work stealing(偷取)：从其他有G的P哪里偷取一半G过来，放到自己的P本地队列</strong>。P2从P1的本地队列尾部取一半的G，本例中一半则只有1个G8，放到P2的本地队列并执行。</p><p><strong>(9)场景9</strong></p><p>G1本地队列G5、G6已经被其他M偷走并运行完成，当前M1和M2分别在运行G2和G8，M3和M4没有goroutine可以运行，M3和M4处于<strong>自旋状态</strong>，它们不断寻找goroutine。</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211118002404.png" alt="image-20211029155628703"></p><p>为什么要让m3和m4自旋，自旋本质是在运行，线程在运行却没有执行G，就变成了浪费CPU. 为什么不销毁现场，来节约CPU资源。因为创建和销毁CPU也会浪费时间，我们<strong>希望当有新goroutine创建时，立刻能有M运行它</strong>，如果销毁再新建就增加了时延，降低了效率。当然也考虑了过多的自旋线程是浪费CPU，所以系统中最多有<code>GOMAXPROCS</code>个自旋的线程(当前例子中的<code>GOMAXPROCS</code>=4，所以一共4个P)，多余的没事做线程会让他们休眠。</p><p><strong>(10)场景10</strong></p><p>假定当前除了M3和M4为自旋线程，还有M5和M6为空闲的线程(没有得到P的绑定，注意我们这里最多就只能够存在4个P，所以P的数量应该永远是M&gt;=P, 大部分都是M在抢占需要运行的P)，G8创建了G9，G8进行了<strong>阻塞的系统调用</strong>，M2和P2立即解绑，P2会执行以下判断：如果P2本地队列有G、全局队列有G或有空闲的M，P2都会立马唤醒1个M和它绑定，否则P2则会加入到空闲P列表，等待M来获取可用的p。本场景中，P2本地队列有G9，可以和其他空闲的线程M5绑定。</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211118002421.png" alt="image-20211029155858400"></p><p><strong>(11)场景11</strong></p><p>G8创建了G9，假如G8进行了<strong>非阻塞系统调用</strong>。</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20211118002440.png" alt="image-20211029160044718"></p><p>​    M2和P2会解绑，但M2会记住P2，然后G8和M2进入<strong>系统调用</strong>状态。当G8和M2退出系统调用时，会尝试获取P2，如果无法获取，则获取空闲的P，如果依然没有，G8会被记为可运行状态，并加入到全局队列,M2因为没有P的绑定而变成休眠状态(长时间休眠等待GC回收销毁)。</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 后端 </tag>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go switch 语句</title>
      <link href="/2021/11/18/go-switch/"/>
      <url>/2021/11/18/go-switch/</url>
      
        <content type="html"><![CDATA[<h1 id="switch-语句"><a href="#switch-语句" class="headerlink" title="switch 语句"></a>switch 语句</h1><h3 id="switch-语句-1"><a href="#switch-语句-1" class="headerlink" title="switch 语句"></a>switch 语句</h3><h4 id="不需要break"><a href="#不需要break" class="headerlink" title="不需要break"></a>不需要break</h4><p>go会帮你隐式break掉。</p><h4 id="case表达式的结果类型的转换"><a href="#case表达式的结果类型的转换" class="headerlink" title="case表达式的结果类型的转换"></a>case表达式的结果类型的转换</h4><p>要求case表达式的结果能转换为switch表示式结果的类型</p><p>并且如果switch或case表达式的是无类型的常量时，会被自动转换为此种常量的默认类型的值。比如整数1的默认类型是int, 浮点数3.14的默认类型是float64</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    value1 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int8</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span>    <span class="token keyword">switch</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> value1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> value1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"0 or 1"</span><span class="token punctuation">)</span>        <span class="token keyword">case</span> value1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> value1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"2 or 3"</span><span class="token punctuation">)</span>        <span class="token keyword">case</span> value1<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> value1<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> value1<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"4 or 5 or 6"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>会报错， switch 表达式的结果是int类型，case表达式的结果是int8类型，而int8不能转换为int类型，所以上述会报错误</p><pre class="line-numbers language-go"><code class="language-go"><span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span> invalid <span class="token keyword">case</span> value1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> in <span class="token keyword">switch</span> on <span class="token number">1</span> <span class="token operator">+</span> <span class="token function">3</span> <span class="token punctuation">(</span>mismatched types <span class="token builtin">int8</span> and <span class="token builtin">int</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="包含多个表达式的-case"><a href="#包含多个表达式的-case" class="headerlink" title="包含多个表达式的 case"></a>包含多个表达式的 case</h4><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     letter <span class="token operator">:=</span> <span class="token string">"i"</span>    <span class="token keyword">switch</span> letter <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"e"</span><span class="token punctuation">,</span> <span class="token string">"i"</span><span class="token punctuation">,</span> <span class="token string">"o"</span><span class="token punctuation">,</span> <span class="token string">"u"</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//multiple expressions in case</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"vowel"</span><span class="token punctuation">)</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"not a vowel"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="没有表达式的-switch"><a href="#没有表达式的-switch" class="headerlink" title="没有表达式的 switch"></a>没有表达式的 switch</h4><p>switch 中的表达式是可选的，可以省略。如果省略表达式，则相当于 switch true，这种情况下会将每一个 case 的表达式的求值结果与 true 做比较，如果相等，则执行相应的代码。 </p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     num <span class="token operator">:=</span> <span class="token number">75</span>    <span class="token keyword">switch</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// expression is omitted</span>    <span class="token keyword">case</span> num <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> num <span class="token operator">&lt;=</span> <span class="token number">50</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"num is greater than 0 and less than 50"</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> num <span class="token operator">>=</span> <span class="token number">51</span> <span class="token operator">&amp;&amp;</span> num <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"num is greater than 51 and less than 100"</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> num <span class="token operator">>=</span> <span class="token number">101</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"num is greater than 100"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="fallthrough"><a href="#fallthrough" class="headerlink" title="fallthrough"></a>fallthrough</h4><p>fallthrough语句用于标明执行完当前 case 语句之后按顺序执行下一个case 语句。</p><p><strong>fallthrough强制执行后面的case代码，fallthrough不会判断下一条case的expr结果是否为true。</strong></p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> num <span class="token operator">:=</span> <span class="token function">number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//num is not a constant</span>    <span class="token keyword">case</span> num <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d is lesser than 50\n"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span>        <span class="token keyword">fallthrough</span>    <span class="token keyword">case</span> num <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d is lesser than 100\n"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span>        <span class="token keyword">fallthrough</span>    <span class="token keyword">case</span> num <span class="token operator">&lt;</span> <span class="token number">200</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d is lesser than 200"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Type-Switch-的基本用法"><a href="#Type-Switch-的基本用法" class="headerlink" title="Type Switch 的基本用法"></a>Type Switch 的基本用法</h4><p>Type Switch 是 Go 语言中一种特殊的 switch 语句，它比较的是类型而不是具体的值。它判断某个接口变量的类型，然后根据具体类型再做相应处理。注意，在 Type Switch 语句的 case 子句中不能使用<code>fallthrough</code>。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">switch</span> x<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">case</span> Type1<span class="token punctuation">:</span>    <span class="token function">doSomeThingWithType1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">case</span> Type2<span class="token punctuation">:</span>    <span class="token function">doSomeThingWithType2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">default</span><span class="token punctuation">:</span>    <span class="token function">doSomeDefaultThing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，<code>x</code>必须是一个接口类型的变量，而所有的<code>case</code>语句后面跟的类型必须实现了<code>x</code>的接口类型。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> Animal <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">type</span> Dog <span class="token keyword">struct</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>self Dog<span class="token punctuation">)</span> <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"wang wang"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">type</span> Cat <span class="token keyword">struct</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>self Cat<span class="token punctuation">)</span> <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"miao miao"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> animal Animal <span class="token operator">=</span> Dog<span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">switch</span> animal<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> Dog<span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"animal'type is Dog"</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> Cat<span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"animal'type is Cat"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的例子中，<code>Cat</code>和<code>Dog</code>类型都实现了接口<code>Animal</code>，所以它们可以跟在<code>case</code>语句后面，判断接口变量<code>animal</code>是否是对应的类型。</p><h4 id="在Switch的语句表达式中声明变量"><a href="#在Switch的语句表达式中声明变量" class="headerlink" title="在Switch的语句表达式中声明变量"></a>在Switch的语句表达式中声明变量</h4><p>如果我们不仅想要判断某个接口变量的类型，还想要获得其类型转换后的值的话，我们可以在 Switch 的语句表达式中声明一个变量来获得这个值。</p><p>其用法如下所示</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"reflect"</span><span class="token punctuation">)</span><span class="token keyword">type</span> Animal <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">type</span> Dog <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>self Dog<span class="token punctuation">)</span> <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"wang wang"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">type</span> Cat <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>self Cat<span class="token punctuation">)</span> <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"miao miao"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">type</span> Tiger <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>self Tiger<span class="token punctuation">)</span> <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"hou hou"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// var animal Animal = Tiger{}</span>    <span class="token comment" spellcheck="true">// var animal Animal  // 验证 case nil</span>    <span class="token comment" spellcheck="true">// var animal Animal = Wolf{} // 验证 default</span>    <span class="token keyword">var</span> animal Animal <span class="token operator">=</span> Dog<span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">"s"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    <span class="token keyword">switch</span> a <span class="token operator">:=</span> animal<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token boolean">nil</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">// a的类型是 Animal</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"nil"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>    <span class="token keyword">case</span> Dog<span class="token punctuation">,</span> Cat<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">// a的类型是 Animal</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 输出 {}</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//这里会报错，因为 Animal 类型没有成员name</span>    <span class="token keyword">case</span> Tiger<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">// a的类型是 Tiger</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 这里可以直接取出 name 成员</span>    <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">// a的类型是 Animal</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"default"</span><span class="token punctuation">,</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述代码中，我们可以看到<code>a := animal.(type)</code>语句隐式地为每个<code>case</code>子句声明了一个变量<code>a</code>。</p><p>变量<code>a</code>类型的判定规则如下:</p><ul><li>如果<code>case</code>后面跟着一个类型，那么变量<code>a</code>在这个<code>case</code>子句中就是这个类型。例如在<code>case Tiger</code>子句中<code>a</code>的类型就是<code>Tiger</code></li><li>如果<code>case</code>后面跟着多个类型，那么变量<code>a</code>的类型就是接口变量<code>animal</code>的类型，例如在<code>case Dog, Cat</code>子句中<code>a</code>的类型就是<code>Animal</code></li><li>如果<code>case</code>后面跟着<code>nil</code>，那么变量<code>a</code>的类型就是接口变量<code>animal</code>的类型<code>Animal</code>，通常这种子句用来判断未赋值的接口变量</li><li><code>default</code>子句中变量<code>a</code>的类型是接口变量<code>animal</code>的类型</li></ul><p>### </p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 后端 </tag>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 使用</title>
      <link href="/2021/11/18/go-use/"/>
      <url>/2021/11/18/go-use/</url>
      
        <content type="html"><![CDATA[<h1 id="Go-使用"><a href="#Go-使用" class="headerlink" title="Go 使用"></a>Go 使用</h1><h2 id="Go-使用-1"><a href="#Go-使用-1" class="headerlink" title="Go 使用"></a>Go 使用</h2><h3 id="包管理"><a href="#包管理" class="headerlink" title="包管理"></a>包管理</h3><p>GoPath 的坑<br>当使用 <code>go get &lt;package&gt;</code> 时，GoPath 会在 GOPATH 路径（一个环境变量）上安装第三方包。<br>并且在 Go 里，你的代码必须放在 GOPATH 里才能运行。 </p><p>会有两种选择：</p><ol><li><p>不同项目使用不同的 $GOPATH：这个优点很明显，就像 javascript 里的 node_modules 一样，不同项目自有一套自己的依赖。缺点也很明显，一是重复下载相同的依赖，占用空间大；二是 GoPath 非常垃圾，你下载的第三方包会直接下到你的 src 文件夹里，就是说和你自己写的代码放在一起，导致目录结构极其混乱，意义不明。</p></li><li><p>不同项目使用同一个 $GOPATH：解决了重复依赖占用空间的问题，但是项目结构就会极其极其混乱，不仅不同项目文件混在一起，而且还和第三方包混在一起。</p></li></ol><p>使用Gomodule</p><p>令人震惊的是，Go 居然直到 1.11 版本才解决这个问题<br>解决方案就是 GoModule。<br>GoModule 解决的问题非常简单，就是在 GoPath 之外再弄一个 GoModule 目录（就是 <code>go mod init</code> 的那个目录），这样自己的代码安装在 GoModule 目录里，第三方则安装在 GoPath 目录里。虽然我不知道为什么这种东西还要等 1.11 版本才能出来，但这就是 GO。 </p><p>GoModule 的优势：</p><ol><li>如上面所说，自己的代码和第三方包分成了两个路径，项目结构的问题解决了。</li><li>这样就可以只设置一个 GoPath，所有项目共用这一个 GoPath，依赖重复的问题也解决了。</li><li>GoModule 终于有了依赖管理，终于有了版本管理，版本冲突问题也得到了控制。（但是看网上一些帖子说还是很垃圾，这个等我遇到了再提）</li></ol><p>在 GoPath 时代，代码只能在 GoPath 上运行，而有了 GoModule 之后，就可以在 GoModule 目录上运行代码。而 GoPath 只是作为一个仓库存放第三方包了。</p><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>在GoPath外，使用Go mod init 需要+项目名，否则会出现 outside GoPath的错误，</p><p>而项目在GoPath下创建，则可以直接使用Go mod init 命令，原因是在GoPath下可以发现项目名。</p><p>所以新建项目的步骤：</p><ol><li>创建项目：</li><li>命令行：go mod init 项目名</li><li>使用第三方包的时候，需要go mod  tidy 将第三方包的依赖引入，第三方包存在GoPath中，避免重复下载</li></ol>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 后端 </tag>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 排序</title>
      <link href="/2021/11/18/go-sort/"/>
      <url>/2021/11/18/go-sort/</url>
      
        <content type="html"><![CDATA[<h1 id="Go-排序"><a href="#Go-排序" class="headerlink" title="Go 排序"></a>Go 排序</h1><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="对整数，浮点数，字符串切片排序"><a href="#对整数，浮点数，字符串切片排序" class="headerlink" title="对整数，浮点数，字符串切片排序"></a>对整数，浮点数，字符串切片排序</h3><p>对于<code>[]int</code>, <code>[]float</code>, <code>[]string</code>这种元素类型是基础类型的切片使用<code>sort</code>包提供的下面几个函数进行排序。</p><ul><li><code>sort.Ints</code></li><li><code>sort.Floats</code></li><li><code>sort.Strings</code></li></ul><pre class="line-numbers language-go"><code class="language-go">s <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span>sort<span class="token punctuation">.</span><span class="token function">Ints</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 输出[1 2 3 4]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="使用自定义比较器排序"><a href="#使用自定义比较器排序" class="headerlink" title="使用自定义比较器排序"></a>使用自定义比较器排序</h3><ul><li><p>使用sort.Slice函数排序，它使用一个用户提供的函数来对序列进行排序，函数类型为func(i, j int) bool，其中参数i, j是序列中的索引。</p></li><li><p>sort.SliceStable在排序切片时会保留相等元素的原始顺序。</p></li><li><p>上面两个函数让我们可以排序结构体切片(order by struct field value),也可以自定义排序规则.</p></li><li><blockquote><p>1,2的参数都是一样的，建议用2(官方说更稳定)</p></blockquote><p><code>func SliceStable(slice interface{}, less func(i int, j int) bool)</code>有两个参数：</p><p>第一个：<code>slice interface{}</code>是切片的接口</p><p>第二个：<code>less func(i int, j int) bool</code>是一个less函数，less函数需要自行定义</p></li></ul><pre class="line-numbers language-go"><code class="language-go">family <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">struct</span> <span class="token punctuation">{</span>    Name <span class="token builtin">string</span>    Age  <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token punctuation">{</span>    <span class="token punctuation">{</span><span class="token string">"Alice"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"David"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"Eve"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"Bob"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 用 age 排序，年龄相等的元素保持原始顺序</span>sort<span class="token punctuation">.</span><span class="token function">SliceStable</span><span class="token punctuation">(</span>family<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> family<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Age <span class="token operator">&lt;</span> family<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>Age<span class="token punctuation">}</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>family<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [{David 2} {Eve 2} {Alice 23} {Bob 25}]</span><span class="token comment" spellcheck="true">//示例2</span>people <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">}</span>less <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> people<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> people<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> people<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> people<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> people<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> people<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 调用排序函数</span>sort<span class="token punctuation">.</span><span class="token function">SliceStable</span><span class="token punctuation">(</span>people<span class="token punctuation">,</span> less<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="排序任意数据结构"><a href="#排序任意数据结构" class="headerlink" title="排序任意数据结构"></a>排序任意数据结构</h3><ul><li>使用<code>sort.Sort</code>或者<code>sort.Stable</code>函数。</li><li>他们可以排序实现了sort.Interface接口的任意类型</li></ul><p>一个内置的排序算法需要知道三个东西：序列的长度，表示两个元素比较的结果，一种交换两个元素的方式；这就是sort.Interface的三个方法：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> Interface <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span>    <span class="token function">Less</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token comment" spellcheck="true">// i, j 是元素的索引</span>    <span class="token function">Swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们为切片类型自定义一个类型名，然后在自定义的类型上实现 srot.Interface 接口</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Name <span class="token builtin">string</span>    Age  <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ByAge 通过对age排序实现了sort.Interface接口</span><span class="token keyword">type</span> ByAge <span class="token punctuation">[</span><span class="token punctuation">]</span>Person<span class="token keyword">func</span> <span class="token punctuation">(</span>a ByAge<span class="token punctuation">)</span> <span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span>           <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>a ByAge<span class="token punctuation">)</span> <span class="token function">Less</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Age <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>Age <span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>a ByAge<span class="token punctuation">)</span> <span class="token function">Swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    family <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>Person<span class="token punctuation">{</span>        <span class="token punctuation">{</span><span class="token string">"David"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span><span class="token string">"Alice"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span><span class="token string">"Eve"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span><span class="token string">"Bob"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    sort<span class="token punctuation">.</span><span class="token function">Sort</span><span class="token punctuation">(</span><span class="token function">ByAge</span><span class="token punctuation">(</span>family<span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>family<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [{David, 2} {Eve 2} {Alice 23} {Bob 25}]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现了sort.Interface的具体类型不一定是切片类型；下面的customSort是一个结构体类型。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> customSort <span class="token keyword">struct</span> <span class="token punctuation">{</span>    p    <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Person    less <span class="token keyword">func</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">*</span>Person<span class="token punctuation">)</span> <span class="token builtin">bool</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>x customSort<span class="token punctuation">)</span> <span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token function">len</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>p<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>x customSort<span class="token punctuation">)</span> <span class="token function">Less</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x<span class="token punctuation">.</span><span class="token function">less</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">.</span>p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>x customSort<span class="token punctuation">)</span> <span class="token function">Swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span> x<span class="token punctuation">.</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">.</span>p<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">.</span>p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">.</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">}</span>sort<span class="token punctuation">.</span><span class="token function">Sort</span><span class="token punctuation">(</span>customSort<span class="token punctuation">{</span>persons<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">*</span>Person<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> x<span class="token punctuation">.</span>Age <span class="token operator">!=</span> y<span class="token punctuation">.</span>Age <span class="token punctuation">{</span>        <span class="token keyword">return</span> x<span class="token punctuation">.</span>Age <span class="token operator">&lt;</span> y<span class="token punctuation">.</span>Age    <span class="token punctuation">}</span>    <span class="token keyword">if</span> x<span class="token punctuation">.</span>Name <span class="token operator">!=</span> y<span class="token punctuation">.</span>Name <span class="token punctuation">{</span>        <span class="token keyword">return</span> x<span class="token punctuation">.</span>Name <span class="token operator">></span> y<span class="token punctuation">.</span>Name    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="排序具体的算法和复杂度"><a href="#排序具体的算法和复杂度" class="headerlink" title="排序具体的算法和复杂度"></a>排序具体的算法和复杂度</h3><p>Go 的sort包中所有的排序算法在最坏的情况下会做 n log n次 比较，n 是被排序序列的长度，所以排序的时间复杂度是 O(n log n)。其大多数的函数都是用改良后的快速排序算法实现的。</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 后端 </tag>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis-Plus增删查改操作</title>
      <link href="/2021/06/29/mybatis-plus/"/>
      <url>/2021/06/29/mybatis-plus/</url>
      
        <content type="html"><![CDATA[<h1 id="Mybatis-Plus增删查改操作"><a href="#Mybatis-Plus增删查改操作" class="headerlink" title="Mybatis-Plus增删查改操作"></a>Mybatis-Plus增删查改操作</h1><h2 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h2><p>增加操作由于Mybatis-plus已经封装好了，所以直接可以调用service层的save函数,或者mapper层的insert函数</p><h3 id="service层"><a href="#service层" class="headerlink" title="service层"></a>service层</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//service层包装了几个方法</span>    <span class="token keyword">boolean</span> <span class="token function">save</span><span class="token punctuation">(</span>T entity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//保存一个</span>      <span class="token keyword">boolean</span> <span class="token function">saveOrUpdate</span><span class="token punctuation">(</span>T entity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//更新或者插入，有主键存在就执行更新，如果没有主键就执行插入，批量</span>    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>        rollbackFor <span class="token operator">=</span> <span class="token punctuation">{</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span>    <span class="token punctuation">)</span>    <span class="token keyword">default</span> <span class="token keyword">boolean</span> <span class="token function">saveBatch</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span>T<span class="token operator">></span> entityList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//保存多个，传入List，默认的batchSize为1000</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">saveBatch</span><span class="token punctuation">(</span>entityList<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">boolean</span> <span class="token function">saveBatch</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span>T<span class="token operator">></span> entityList<span class="token punctuation">,</span> <span class="token keyword">int</span> batchSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//存多个，传入List，可以指定batchSize大小</span>    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>        rollbackFor <span class="token operator">=</span> <span class="token punctuation">{</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span>    <span class="token punctuation">)</span>    <span class="token keyword">default</span> <span class="token keyword">boolean</span> <span class="token function">saveOrUpdateBatch</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span>T<span class="token operator">></span> entityList<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//批量更新或者插入，有主键存在就执行更新，如果没有主键就执行插入</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">saveOrUpdateBatch</span><span class="token punctuation">(</span>entityList<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">boolean</span> <span class="token function">saveOrUpdateBatch</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span>T<span class="token operator">></span> entityList<span class="token punctuation">,</span> <span class="token keyword">int</span> batchSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//同上，可以指定batchsize大小</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="mapper层"><a href="#mapper层" class="headerlink" title="mapper层"></a>mapper层</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">int</span> <span class="token function">insert</span><span class="token punctuation">(</span>T entity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用时插入对象</span>        userMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          user<span class="token punctuation">.</span><span class="token function">setPaswword</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1.使用service新增</span>        userService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.使用mapper 新增</span>        userMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><h3 id="service层-1"><a href="#service层-1" class="headerlink" title="service层"></a>service层</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//service层中包含了4个方法</span>    <span class="token keyword">boolean</span> <span class="token function">removeById</span><span class="token punctuation">(</span>Serializable id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过id来删除</span>    <span class="token keyword">boolean</span> <span class="token function">removeByMap</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> columnMap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Map里存放条件</span>    <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span>Wrapper<span class="token operator">&lt;</span>T<span class="token operator">></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用Wrapper语句</span>    <span class="token keyword">boolean</span> <span class="token function">removeByIds</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Serializable</span><span class="token operator">></span> idList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过id批量删除</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="mapper层-1"><a href="#mapper层-1" class="headerlink" title="mapper层"></a>mapper层</h3><p>可以发现，与service层其实是一一对应的，不用看源码就可以知道，mybatis-plus的封装service层用了mapper的函数。</p><pre class="line-numbers language-java"><code class="language-java">         <span class="token keyword">int</span> <span class="token function">deleteById</span><span class="token punctuation">(</span>Serializable id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过id删除</span>    <span class="token keyword">int</span> <span class="token function">deleteByMap</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"cm"</span><span class="token punctuation">)</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> columnMap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过mapper属性来删除，mapper可以放多个条件属性</span>    <span class="token keyword">int</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"ew"</span><span class="token punctuation">)</span> Wrapper<span class="token operator">&lt;</span>T<span class="token operator">></span> wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过wrapper语句来删除</span>    <span class="token keyword">int</span> <span class="token function">deleteBatchIds</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"coll"</span><span class="token punctuation">)</span> Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Serializable</span><span class="token operator">></span> idList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过批量id来批量删除</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><pre class="line-numbers language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//根据 id 删除</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    userMapper<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>1278951504018575369L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//根据 id 批量删除</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDeleteBatchIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    userMapper<span class="token punctuation">.</span><span class="token function">deleteBatchIds</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>1278951504018575367L<span class="token punctuation">,</span>1278951504018575368L<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//使用 map 删除</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDeleteByMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userMapper<span class="token punctuation">.</span><span class="token function">deleteByMap</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//使用wapper语句</span>QueryWrapper<span class="token operator">&lt;</span>User<span class="token operator">></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queryWrapper        <span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">ge</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">isNotNull</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">int</span> result <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回删除的数量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Mybatis中的逻辑删除"><a href="#Mybatis中的逻辑删除" class="headerlink" title="Mybatis中的逻辑删除"></a>Mybatis中的逻辑删除</h3><p>物理删除：从数据库中直接删除数据<br>逻辑删除：并没有在数据库中直接删除数据，而是通过一个变量，让这个数据失效<br>逻辑删除目的：防止数据的丢失，管理员可以看见删除的数</p><ol><li><p>首先修改数据库，增加 deleted 字段，默认为 0</p></li><li><p>修改实体类，并添加注释</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@TableLogic</span><span class="token keyword">private</span> Integer deleted<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>配置 properties</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">mybatis-plus.global-config.db-config.logic-not-delete-value</span><span class="token punctuation">=</span><span class="token attr-value">0</span><span class="token attr-name">mybatis-plus.global-config.db-config.logic-delete-value</span><span class="token punctuation">=</span><span class="token attr-value">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>测试</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//逻辑删除</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLogicDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    userMapper<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>1L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210629161254.png" alt></p><p>可以看到走的是更新操作：</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210629161337.png" alt></p><p>同样，我们假如对逻辑表的查询和更新操作，会自动帮我们加上deleted=0的属性值，</p><p>如查询：</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210629161530.png" alt></p><p>deleted=1的已经删除的记录，查询不出</p></li></ol><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><h3 id="service层-2"><a href="#service层-2" class="headerlink" title="service层"></a>service层</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">boolean</span> <span class="token function">updateById</span><span class="token punctuation">(</span>T entity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过id来更新，传入的是实体，实体中包含了id，entity有什么属性就更新什么属性</span>    <span class="token keyword">boolean</span> <span class="token function">update</span><span class="token punctuation">(</span>T entity<span class="token punctuation">,</span> Wrapper<span class="token operator">&lt;</span>T<span class="token operator">></span> updateWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//entity为需要更新的值，wrapper语句为条件条件，entity有什么属性就更新什么属性</span>    <span class="token keyword">default</span> <span class="token keyword">boolean</span> <span class="token function">update</span><span class="token punctuation">(</span>Wrapper<span class="token operator">&lt;</span>T<span class="token operator">></span> updateWrapper<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//默认第一个传入null,需要更新的属性的值，可以在wrapper语句中设置</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Object<span class="token punctuation">)</span>null<span class="token punctuation">,</span> updateWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>        rollbackFor <span class="token operator">=</span> <span class="token punctuation">{</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span>    <span class="token punctuation">)</span>    <span class="token keyword">default</span> <span class="token keyword">boolean</span> <span class="token function">updateBatchById</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span>T<span class="token operator">></span> entityList<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//批量更新，传入一个List，默认的batchSize为1000</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateBatchById</span><span class="token punctuation">(</span>entityList<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">boolean</span> <span class="token function">updateBatchById</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span>T<span class="token operator">></span> entityList<span class="token punctuation">,</span> <span class="token keyword">int</span> batchSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//批量更新，可以指定batchSize大小</span>    <span class="token keyword">boolean</span> <span class="token function">saveOrUpdate</span><span class="token punctuation">(</span>T entity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//批量更新或者插入，有主键存在就执行更新，如果没有主键就执行插入</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="mapper层-2"><a href="#mapper层-2" class="headerlink" title="mapper层"></a>mapper层</h3><pre class="line-numbers language-java"><code class="language-java">        <span class="token keyword">int</span> <span class="token function">updateById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"et"</span><span class="token punctuation">)</span> T entity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//传入entity，entity自带id 属性，entity有什么属性就更新什么属性</span>    <span class="token keyword">int</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"et"</span><span class="token punctuation">)</span> T entity<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"ew"</span><span class="token punctuation">)</span> Wrapper<span class="token operator">&lt;</span>T<span class="token operator">></span> updateWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//传入entity为更新的值，wrapper为条件语句，entity有什么属性就更新什么属性</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"344"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"test333"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UpdateWrapper<span class="token operator">&lt;</span>User<span class="token operator">></span> updateWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UpdateWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        updateWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1.user 中封装修改的属性值， updateWrapper 中封装修改的条件参数值</span>        userService<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span>updateWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.根据条件修改对应的参数属性值,下语句对应，set name 2 where age= 23</span>        userService<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>Wrappers<span class="token punctuation">.</span>&lt;User<span class="token operator">></span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>User<span class="token operator">:</span><span class="token operator">:</span>getName<span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>User<span class="token operator">:</span><span class="token operator">:</span>getAge<span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　　　　　　　　 <span class="token comment" spellcheck="true">// 3.判断参数是否为空,并进行修改</span>　　　　 String name <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">;</span>　　　　 userService<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>Wrappers<span class="token punctuation">.</span>&lt;User<span class="token operator">></span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span>User<span class="token operator">:</span><span class="token operator">:</span>getName<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>User<span class="token operator">:</span><span class="token operator">:</span>getAge<span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//    4.不实用lamda表达式</span>      <span class="token comment" spellcheck="true">//修改值</span>      User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"Andy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//修改条件</span>    UpdateWrapper<span class="token operator">&lt;</span>User<span class="token operator">></span> userUpdateWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UpdateWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userUpdateWrapper<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"h"</span><span class="token punctuation">)</span>                     <span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                     <span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*相当于              UPDATE user      SET name=?, age=?, update_time=?      WHERE deleted=0 AND name LIKE ? OR age BETWEEN ? AND ?      */</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> userUpdateWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 5.</span>       <span class="token comment" spellcheck="true">//修改值</span>    User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//修改条件</span>    UpdateWrapper<span class="token operator">&lt;</span>User<span class="token operator">></span> userUpdateWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UpdateWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userUpdateWrapper<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"h"</span><span class="token punctuation">)</span>                     <span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"老李头"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//除了可以查询还可以使用set设置修改的字段</span>                     <span class="token punctuation">.</span><span class="token function">setSql</span><span class="token punctuation">(</span><span class="token string">" email = '123@qq.com'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可以有子查询</span>     <span class="token comment" spellcheck="true">/*             UPDATE user        SET age=? name=?, email = ‘123@qq.com’        WHERE deleted=0 AND name LIKE ?     */</span>      <span class="token keyword">int</span> result <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> userUpdateWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><h3 id="service层-3"><a href="#service层-3" class="headerlink" title="service层"></a>service层</h3><pre class="line-numbers language-java"><code class="language-java">         T <span class="token function">getById</span><span class="token punctuation">(</span>Serializable id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过id查询</span>    Collection<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">listByIds</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Serializable</span><span class="token operator">></span> idList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过多个id查询多个id</span>    Collection<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">listByMap</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> columnMap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过map属性键对值查询</span>    <span class="token keyword">default</span> T <span class="token function">getOne</span><span class="token punctuation">(</span>Wrapper<span class="token operator">&lt;</span>T<span class="token operator">></span> queryWrapper<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//通过wrapper语句查询一条记录，默认抛出异常，</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getOne</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    T <span class="token function">getOne</span><span class="token punctuation">(</span>Wrapper<span class="token operator">&lt;</span>T<span class="token operator">></span> queryWrapper<span class="token punctuation">,</span> <span class="token keyword">boolean</span> throwEx<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过wrapper语句查询一条记录，可以指定throwEx</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">getMap</span><span class="token punctuation">(</span>Wrapper<span class="token operator">&lt;</span>T<span class="token operator">></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过wrapper语句，查询一条记录，返回的形式是map</span>    <span class="token keyword">int</span> <span class="token function">count</span><span class="token punctuation">(</span>Wrapper<span class="token operator">&lt;</span>T<span class="token operator">></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//查询符合条件的数量</span>    <span class="token keyword">default</span> <span class="token keyword">int</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>Wrappers<span class="token punctuation">.</span><span class="token function">emptyWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//默认是0条</span>    <span class="token punctuation">}</span>    List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">list</span><span class="token punctuation">(</span>Wrapper<span class="token operator">&lt;</span>T<span class="token operator">></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过wrapper语句查询，返回对象的list</span>    <span class="token keyword">default</span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//默认空查询，即返回空</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>Wrappers<span class="token punctuation">.</span><span class="token function">emptyWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    IPage<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">page</span><span class="token punctuation">(</span>IPage<span class="token operator">&lt;</span>T<span class="token operator">></span> page<span class="token punctuation">,</span> Wrapper<span class="token operator">&lt;</span>T<span class="token operator">></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//  翻页查询</span>    <span class="token keyword">default</span> IPage<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">page</span><span class="token punctuation">(</span>IPage<span class="token operator">&lt;</span>T<span class="token operator">></span> page<span class="token punctuation">)</span> <span class="token punctuation">{</span>                             <span class="token comment" spellcheck="true">//  翻页查询，默认空查询</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> Wrappers<span class="token punctuation">.</span><span class="token function">emptyWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> <span class="token function">listMaps</span><span class="token punctuation">(</span>Wrapper<span class="token operator">&lt;</span>T<span class="token operator">></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 查询列表，返回map 的List</span>    <span class="token keyword">default</span> List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> <span class="token function">listMaps</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">listMaps</span><span class="token punctuation">(</span>Wrappers<span class="token punctuation">.</span><span class="token function">emptyWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="mapper层-3"><a href="#mapper层-3" class="headerlink" title="mapper层"></a>mapper层</h3><pre class="line-numbers language-java"><code class="language-java">    T <span class="token function">selectById</span><span class="token punctuation">(</span>Serializable id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过id查询</span>    List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">selectBatchIds</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"coll"</span><span class="token punctuation">)</span> Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Serializable</span><span class="token operator">></span> idList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过多个id的List查询多条记录</span>    List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">selectByMap</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"cm"</span><span class="token punctuation">)</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> columnMap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过Map键值对来查询记录</span>    T <span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"ew"</span><span class="token punctuation">)</span> Wrapper<span class="token operator">&lt;</span>T<span class="token operator">></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//查询一条记录</span>    Integer <span class="token function">selectCount</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"ew"</span><span class="token punctuation">)</span> Wrapper<span class="token operator">&lt;</span>T<span class="token operator">></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//条件符合的记录数量</span>    List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">selectList</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"ew"</span><span class="token punctuation">)</span> Wrapper<span class="token operator">&lt;</span>T<span class="token operator">></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过Wrapper来查询记录</span>    List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> <span class="token function">selectMaps</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"ew"</span><span class="token punctuation">)</span> Wrapper<span class="token operator">&lt;</span>T<span class="token operator">></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过Wrapper来查询记录，返回的是Map属性对的List</span>    List<span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token function">selectObjs</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"ew"</span><span class="token punctuation">)</span> Wrapper<span class="token operator">&lt;</span>T<span class="token operator">></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过Wrapper查询，返回Object的List</span>    IPage<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">selectPage</span><span class="token punctuation">(</span>IPage<span class="token operator">&lt;</span>T<span class="token operator">></span> page<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"ew"</span><span class="token punctuation">)</span> Wrapper<span class="token operator">&lt;</span>T<span class="token operator">></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//分页查询</span>    IPage<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> <span class="token function">selectMapsPage</span><span class="token punctuation">(</span>IPage<span class="token operator">&lt;</span>T<span class="token operator">></span> page<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"ew"</span><span class="token punctuation">)</span> Wrapper<span class="token operator">&lt;</span>T<span class="token operator">></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//分页查询</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><ol><li><p>在配置类中增加配置</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//分页插件</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> PaginationInterceptor <span class="token function">paginationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PaginationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Page 中的参数有两个：long current、long size。current 表示了当前页数，size 表示了每页数据个数</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//分页插件</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//selectPage(IPage&lt;T> var1，Page 是 Ipage的实现类</span>    <span class="token comment" spellcheck="true">// Page的参数有两个，long current, long size</span>    <span class="token comment" spellcheck="true">// 第一个是当前页，</span>    <span class="token comment" spellcheck="true">// 第二个是每页显示数据的个数</span>    Page<span class="token operator">&lt;</span>User<span class="token operator">></span> userPage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userMapper<span class="token punctuation">.</span><span class="token function">selectPage</span><span class="token punctuation">(</span>userPage<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    userPage<span class="token punctuation">.</span><span class="token function">getRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userPage<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//数据的总数</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userPage<span class="token punctuation">.</span><span class="token function">getCurrent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//当前页数</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实际上，MyBatisPlus 的分页底层采用的还是 limit</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210629180726.png" alt></p></li></ol><h3 id="使用-3"><a href="#使用-3" class="headerlink" title="使用"></a>使用</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//下面是许多查询操作</span><span class="token annotation punctuation">@Test</span><span class="token comment" spellcheck="true">//通过id查询</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectById</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    User user <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>1L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//批量查询用户</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectBatchIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectBatchIds</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//按条件查询，使用 map 查询</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectByMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//map 里放的是查询的条件 查询名字是 Czx 的人的信息</span>    hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"Czx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//条件可以拼接，往进 put 一个，就是一个条件 WHERE name = ? AND age =</span>    hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span>200L<span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectByMap</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">)</span><span class="token punctuation">;</span>    users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//</span>QueryWrapper<span class="token operator">&lt;</span>User<span class="token operator">></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queryWrapper<span class="token punctuation">.</span><span class="token function">notLike</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"e"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">likeRight</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">,</span> <span class="token string">"t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//返回值是Map列表</span>    List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> maps <span class="token operator">=</span>                     userMapper<span class="token punctuation">.</span><span class="token function">selectMaps</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    maps<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Wrapper构造器"><a href="#Wrapper构造器" class="headerlink" title="Wrapper构造器"></a>Wrapper构造器</h2><h3 id="Wrapper类的结构"><a href="#Wrapper类的结构" class="headerlink" title="Wrapper类的结构"></a>Wrapper类的结构</h3><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210629190144.png" alt="Wrapper类构造图"></p><ol><li>AbstractWrapper: 用于查询条件封装，生成sql的where条件</li><li>AbstractLambdaWrapper: Lambda语法使用Wrapper统一处理解析lambda获取column</li><li>QueryWrapper: Entity 对象封装操作类，不是用lambda</li><li>UpdateWrapper: Update条件封装，用于Entity对象更新操作</li></ol><p>常用的为QueryWrapper&amp;UpdateWrapper</p><h3 id="常见用法"><a href="#常见用法" class="headerlink" title="常见用法"></a>常见用法</h3><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210629190619.png" alt="函数"></p><ul><li>allEq：全部eq(或个别isNull)    <pre><code> 例1: allEq({id:1,name:&quot;老王&quot;,age:null})---&gt;id = 1 and name = &#39;老王&#39; and age is null 例2: allEq({id:1,name:&quot;老王&quot;,age:null}, false)---&gt;id = 1 and name = &#39;老王&#39;</code></pre></li><li>eq：等于 =<pre><code> 例1: allEq((k,v) -&gt; k.indexOf(&quot;a&quot;) &gt; 0, {id:1,name:&quot;老王&quot;,age:null})---&gt;name = &#39;老王&#39; and age is null 例2: allEq((k,v) -&gt; k.indexOf(&quot;a&quot;) &gt; 0, {id:1,name:&quot;老王&quot;,age:null}, false)---&gt;name = &#39;老王&#39;</code></pre></li><li>ne：不等于 &lt;&gt;<pre><code> 例: ne(&quot;name&quot;, &quot;老王&quot;)---&gt;name &lt;&gt; &#39;老王&#39;</code></pre></li><li>gt：大于 &gt;<pre><code> 例: gt(&quot;age&quot;, 18)---&gt;age &gt; 18</code></pre></li><li>ge：大于等于 &gt;=<pre><code> 例: ge(&quot;age&quot;, 18)---&gt;age &gt;= 18</code></pre></li><li>lt：小于 &lt;<pre><code> 例: lt(&quot;age&quot;, 18)---&gt;age &lt; 18</code></pre></li><li>le：小于等于 &lt;=<pre><code> 例: le(&quot;age&quot;, 18)---&gt;age &lt;= 18</code></pre></li><li>between：BETWEEN 值1 AND 值2<pre><code> 例: between(&quot;age&quot;, 18, 30)---&gt;age between 18 and 30</code></pre></li><li>notBetween：NOT BETWEEN 值1 AND 值2<pre><code> 例: notBetween(&quot;age&quot;, 18, 30)---&gt;age not between 18 and 30</code></pre></li><li>like：LIKE ‘%值%’<pre><code>  例: like(&quot;name&quot;, &quot;王&quot;)---&gt;name like &#39;%王%&#39;</code></pre></li><li>notLike：NOT LIKE ‘%值%’<pre><code>  例: notLike(&quot;name&quot;, &quot;王&quot;)---&gt;name not like &#39;%王%&#39;</code></pre></li><li>likeLeft：LIKE ‘%值’<pre><code>  例: likeLeft(&quot;name&quot;, &quot;王&quot;)---&gt;name like &#39;%王&#39;</code></pre></li><li>likeRight：LIKE ‘值%’<pre><code>  例: likeRight(&quot;name&quot;, &quot;王&quot;)---&gt;name like &#39;王%&#39;</code></pre></li><li>isNull：字段 IS NULL<pre><code>  例: isNull(&quot;name&quot;)---&gt;name is null</code></pre></li><li>isNotNull：字段 IS NULL<pre><code>  例: isNotNull(&quot;name&quot;)---&gt;name is not null</code></pre></li><li>in：字段 IN (value.get(0), value.get(1), …)<pre><code>  例: in(&quot;age&quot;,{1,2,3})---&gt;age in (1,2,3)</code></pre></li><li>notIn：字段 IN (value.get(0), value.get(1), …)<pre><code>  例: notIn(&quot;age&quot;,{1,2,3})---&gt;age not in (1,2,3)</code></pre></li><li>inSql：字段 IN ( sql语句 )<pre><code>  例: inSql(&quot;age&quot;, &quot;1,2,3,4,5,6&quot;)---&gt;age in (1,2,3,4,5,6)  例: inSql(&quot;id&quot;, &quot;select id from table where id &lt; 3&quot;)---&gt;id in (select id from table where id &lt; 3)</code></pre></li><li>notInSql：字段 NOT IN ( sql语句 )<pre><code>  例: notInSql(&quot;age&quot;, &quot;1,2,3,4,5,6&quot;)---&gt;age not in (1,2,3,4,5,6)  例: notInSql(&quot;id&quot;, &quot;select id from table where id &lt; 3&quot;)---&gt;age not in (select id from table where id &lt; 3)</code></pre></li><li>groupBy：分组：GROUP BY 字段, …<pre><code>  例: groupBy(&quot;id&quot;, &quot;name&quot;)---&gt;group by id,name</code></pre></li><li>orderByAsc：排序：ORDER BY 字段, … ASC<pre><code>  例: orderByAsc(&quot;id&quot;, &quot;name&quot;)---&gt;order by id ASC,name ASC</code></pre></li><li>orderByDesc：排序：ORDER BY 字段, … DESC<pre><code>  例: orderByDesc(&quot;id&quot;, &quot;name&quot;)---&gt;order by id DESC,name DESC</code></pre></li><li>orderBy：排序：ORDER BY 字段, …<pre><code>  例: orderBy(true, true, &quot;id&quot;, &quot;name&quot;)---&gt;order by id ASC,name ASC</code></pre></li><li>having：HAVING ( sql语句 )<pre><code>  例: having(&quot;sum(age) &gt; 10&quot;)---&gt;having sum(age) &gt; 10  例: having(&quot;sum(age) &gt; {0}&quot;, 11)---&gt;having sum(age) &gt; 11</code></pre></li><li>or：拼接 OR 。注意事项:主动调用or表示紧接着下一个方法不是用and连接!(不调用or则默认为使用and连接)<pre><code>  例: eq(&quot;id&quot;,1).or().eq(&quot;name&quot;,&quot;老王&quot;)---&gt;id = 1 or name = &#39;老王&#39;  例: or(i -&gt; i.eq(&quot;name&quot;, &quot;李白&quot;).ne(&quot;status&quot;, &quot;活着&quot;))---&gt;or (name = &#39;李白&#39; and status &lt;&gt; &#39;活着&#39;)</code></pre></li><li>and：AND 嵌套<pre><code>  例: and(i -&gt; i.eq(&quot;name&quot;, &quot;李白&quot;).ne(&quot;status&quot;, &quot;活着&quot;))---&gt;and (name = &#39;李白&#39; and status &lt;&gt; &#39;活着&#39;)</code></pre>apply：拼接 sql 。 注意事项:该方法可用于数据库函数 动态入参的params对应前面sqlHaving内部的{index}部分.这样是不会有sql注入风险的,反之会有!<pre><code> 例: apply(&quot;id = 1&quot;)---&gt;having sum(age) &gt; 10 例: apply(&quot;date_format(dateColumn,&#39;%Y-%m-%d&#39;) = &#39;2008-08-08&#39;&quot;)---&gt;date_format(dateColumn,&#39;%Y-%m-%d&#39;) = &#39;2008-08-08&#39;&quot;) 例: apply(&quot;date_format(dateColumn,&#39;%Y-%m-%d&#39;) = {0}&quot;, &quot;2008-08-08&quot;)---&gt;date_format(dateColumn,&#39;%Y-%m-%d&#39;) = &#39;2008-08-08&#39;&quot;)</code></pre></li><li>last：无视优化规则直接拼接到 sql 的最后。注意事项:只能调用一次,多次调用以最后一次为准 有sql注入的风险,请谨慎使用<pre><code> 例: last(&quot;limit 1&quot;)</code></pre></li><li>exists：拼接 EXISTS ( sql语句 )<pre><code> 例: exists(&quot;select id from table where age = 1&quot;)---&gt;exists (select id from table where age = 1)</code></pre></li><li>notExists：拼接 NOT EXISTS ( sql语句 )<pre><code> 例: notExists(&quot;select id from table where age = 1&quot;)---&gt;not exists (select id from table where age = 1)</code></pre></li><li>nested：正常嵌套 不带 AND 或者 OR<pre><code> 例: nested(i -&gt; i.eq(&quot;name&quot;, &quot;李白&quot;).ne(&quot;status&quot;, &quot;活着&quot;))---&gt;(name = &#39;李白&#39; and status &lt;&gt; &#39;活着&#39;)</code></pre></li></ul><h2 id="构建复杂的数据库操作"><a href="#构建复杂的数据库操作" class="headerlink" title="构建复杂的数据库操作"></a>构建复杂的数据库操作</h2><ol><li><p>先构造Wrapper语句，可以直接在service层上构造wrapper语句。</p></li><li><p>在service层上封装函数，构造wrapper语句 使用mapper的方法，在service层上封装成一个函数，这样controller可以直接传参调用service层的函数。</p></li><li><p>mapper接口文件中定义好方法，然后在对应的xml文件中，编写对应的SQL就好，最后还是要在service层上将mapper的函数进行封装。</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210629191356.png" alt></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210629191304.png" alt></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210629192918.png" alt></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 后端 </tag>
            
            <tag> 开发 </tag>
            
            <tag> Mybatis </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕业啦</title>
      <link href="/2021/06/24/graduation/"/>
      <url>/2021/06/24/graduation/</url>
      
        <content type="html"><![CDATA[<h1 id="毕业啦"><a href="#毕业啦" class="headerlink" title="毕业啦"></a>毕业啦</h1><p>毕业一直都很忙碌很仓促，所以没有时间停下来记录。</p><p>2017.9-2021.6时间真的过得好快，从刚来学校的嫌弃没有独卫、大澡堂，到现在的不想离开，我想不是我认识到了南农有多好，而是遇到了你们这群有趣的小伙伴。</p><p>拿到毕业证书的时候激动又紧张、差点忘记让校长翻麦穗了。</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210624140653.JPG" alt></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210624140914.JPG" alt></p><p>​        首先是我最最亲爱的舍友们，四年来非常感谢你们的照顾，对于我来说你们就是我的家人，会容忍我的小脾气，会安慰鼓励我，祝愿你们能变得更好，早点喝上大家的喜酒，虽然毕业了，我还是228的爸爸。我们的照片虽然很少，那是因为每天一起生活，出去吃饭都懒得拍了哈哈。</p><p><img src="/Users/zhulingang/Downloads/IMG_5520(20210603-013654).JPG" alt></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210624141252.JPG" alt></p><p>这三个是让我又爱又恨的人，小午，cd，大臀，和你们在一起很开心，一起王者，一起捣蛋，一起洗澡，永远都会记得这份难能可贵的友情，虽然有时候你们真的很狗，但这就是快乐的源泉哈哈哈。祝我的狗儿子们一路向前冲，早日暴富</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210624142606.JPG" alt></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210624142139.JPG" alt></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210624142226.JPG" alt></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210624142334.JPG" alt></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210624142431.JPG" alt></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210624142507.JPG" alt></p><p>宋哥三哥希望你们之后一切都好，早日找到对的她，你们对小猪的好，我一直都记得。</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210624142834.JPG" alt></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210624143039.JPG" alt></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210624143158.JPG" alt></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210624143215.JPG" alt></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210624143232.JPG" alt></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210624143318.JPG" alt></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210624143337.JPG" alt></p><p>还有我最最爱的男篮和女篮，就像家一般温暖，和你们在一起训练、吃饭的日子也很难忘，虽然我们没拿过冠军，但是我们在场上一起拼搏战斗，我们是最好的信息院。</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210624144256.JPG" alt></p><p>虽然玩狼人杀的时间很少，但是也很高兴能认识你们，下马坊狼王们，下次我们再杀。</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210624144429.JPG" alt></p><p>还有就是生活部和外联，从不后悔加入学生会，在这里与你们一起工作，一起团建真的很开心，虽然再也没有信息院学生会了，但是它一直在我心里。</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210624144852.jpg" alt="信息院学生会总结大会"></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210624144938.jpg" alt="生活部"></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210624145010.jpg" alt="生活部"></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210624145048.jpg" alt="外联"></p><p>非常幸运能成为计科182和192的班助，遇到了一群可爱的同学，你们给我的惊喜，对我的好我都还收藏着呢，生日卡片，圣诞祝福都藏在收纳箱里，真心祝愿你们前程似锦，加油～</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210624145325.jpg" alt="计科182"></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210624145419.jpg" alt="计科192"></p><p>也遇到了难能可贵的朋友们，夏姐、蕊蕊、家齐、小二、达达…还有一个非常欣赏的人，和你们的回忆都在心里，祝你们变得更好～</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210624150516.jpg" alt></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210624150535.jpg" alt></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210624150604.jpg" alt></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210624150706.jpg" alt></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210624150734.jpg" alt></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210624150826.jpg" alt></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210624150851.jpg" alt></p><p>四年真的过得好快，这是一段美好难忘的旅程，再见啦大家，我们一定会再见。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>细粒度识别模型-BCNN模型详解</title>
      <link href="/2021/06/10/bcnn/"/>
      <url>/2021/06/10/bcnn/</url>
      
        <content type="html"><![CDATA[<h1 id="细粒度识别模型-BCNN模型详解"><a href="#细粒度识别模型-BCNN模型详解" class="headerlink" title="细粒度识别模型-BCNN模型详解"></a>细粒度识别模型-BCNN模型详解</h1><p>Lin等提出的双线性卷积神经网络(Bilinear CNN，BCNN)，BCNN 网络将两个特征提取网络提取的特征进行双线性融合操作，相比于一般的网络模型直接将特征送入全连接层，BCNN 多了双线性融合操作。</p><p>下图为B-CNN网络结构图</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210609221727.png" alt="BCNN网络结构图"></p><p>我在项目中使用的是对称的网络结构：</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210609222149.png" alt="BCNN对称网络结构"></p><p>对于双线性融合操作可以这么理解：</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210609222311.png" alt="双线性融合操作"></p><p>对于特征图的相同位置做外积操作，然后对所有位置的进行全局池化，即相加所有位置的外积结果，总共可以得到P*P个，即为双线性融合特征。</p><p>对得到的双线性融合特征需要做开方和归一化操作，最后送入全连接层分类，得到分类结果。</p><p>BCNN网络结构代码：bilinear_model.py</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torchvision<span class="token keyword">import</span> torch<span class="token punctuation">.</span>optim <span class="token keyword">as</span> optim<span class="token keyword">import</span> torchvision<span class="token punctuation">.</span>transforms <span class="token keyword">as</span> transforms<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F<span class="token comment" spellcheck="true"># vgg16 = torchvision.models.vgg16(pretrained=True)</span><span class="token comment" spellcheck="true"># import os</span><span class="token comment" spellcheck="true"># os.environ["CUDA_VISIBLE_DEVICES"] = "2"</span>num_class<span class="token operator">=</span><span class="token number">115</span><span class="token keyword">class</span> <span class="token class-name">Net</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>Net<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>features <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true"># nn.BatchNorm2d(64),</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true"># nn.BatchNorm2d(128),</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true"># nn.BatchNorm2d(256),</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true"># nn.BatchNorm2d(512),</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true"># nn.MaxPool2d(kernel_size=2, stride=2, padding=0),</span>        <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>classifiers <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">512</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">,</span> num_class<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>features<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        batch_size <span class="token operator">=</span> x<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> x<span class="token punctuation">.</span>view<span class="token punctuation">(</span>batch_size<span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">28</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#将（batch_size,channel ,h,w）变为（batch_size,channel,h*w）维度的</span>        x <span class="token operator">=</span> <span class="token punctuation">(</span>torch<span class="token punctuation">.</span>bmm<span class="token punctuation">(</span>x<span class="token punctuation">,</span> torch<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">28</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#torch.transpose(x, 1, 2))转置矩阵，将维度1和2的转置</span>        <span class="token comment" spellcheck="true"># torch.bmm做外积 torch.bmm(a,b),tensor a 的size为(b,h,w),tensor b的size为(b,w,h),注意两个tensor的维度必须为3. 得到(batch_szie,512,512)</span>        <span class="token comment" spellcheck="true"># / 28 ** 2平均池化</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>        x<span class="token operator">=</span>x<span class="token punctuation">.</span>view<span class="token punctuation">(</span>batch_size<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># view(batch_size, -1)变成一维的张量</span>        <span class="token comment" spellcheck="true">#normalize标准化,开方和归一化操作</span>        x <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional<span class="token punctuation">.</span>normalize<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>sign<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">*</span> torch<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>abs<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1e</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># feature = feature.view(feature.size(0), -1)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>classifiers<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>训练过程分为两步：</p><p>由于特征提取网络使用的是预训练的VGG-16，特征提取能力较强，所以可以只训练全连接层，对所有层的参数进行微调可以进一步提高准确率</p><p>第一步：固定特征提取网络参数，只训练全连接层</p><p>train_last.py</p><pre class="line-numbers language-python"><code class="language-python">model <span class="token operator">=</span> bilinear_model<span class="token punctuation">.</span>Net<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>model<span class="token punctuation">)</span>model<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>pretrained <span class="token operator">=</span> <span class="token boolean">True</span><span class="token keyword">if</span> pretrained<span class="token punctuation">:</span>    pre_dic <span class="token operator">=</span> torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"./vgg16-397923af.pth"</span><span class="token punctuation">)</span>    Low_rankmodel_dic <span class="token operator">=</span> model<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span>    pre_dic <span class="token operator">=</span> <span class="token punctuation">{</span>k<span class="token punctuation">:</span> v <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> pre_dic<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> k <span class="token keyword">in</span> Low_rankmodel_dic<span class="token punctuation">}</span>    Low_rankmodel_dic<span class="token punctuation">.</span>update<span class="token punctuation">(</span>pre_dic<span class="token punctuation">)</span>    model<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>Low_rankmodel_dic<span class="token punctuation">)</span>criterion <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#特征提取网络所有的输入都不需要保存梯度，那么输出的requires_grad会自动设置为False。既然没有了相关的梯度值，自然进行反向传播时会将这部分子图从计算中剔除</span>model<span class="token punctuation">.</span>features<span class="token punctuation">.</span>requires_grad <span class="token operator">=</span> <span class="token boolean">False</span>optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span><span class="token punctuation">[</span>                       <span class="token punctuation">{</span><span class="token string">'params'</span><span class="token punctuation">:</span> model<span class="token punctuation">.</span>classifiers<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'lr'</span><span class="token punctuation">:</span> <span class="token number">1.0</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> momentum<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span> weight_decay<span class="token operator">=</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>epoch<span class="token punctuation">)</span><span class="token punctuation">:</span>    model<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> batch_idx<span class="token punctuation">,</span> <span class="token punctuation">(</span>data<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>trainloader<span class="token punctuation">)</span><span class="token punctuation">:</span>        data<span class="token punctuation">,</span> target <span class="token operator">=</span> data<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> target<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        output <span class="token operator">=</span> model<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        loss <span class="token operator">=</span> criterion<span class="token punctuation">(</span>output<span class="token punctuation">,</span> target<span class="token punctuation">)</span>        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> batch_idx <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Train Epoch: {} [{}/{} ({:.0f}%)]\tLoss: {:.6f}\tLR: {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>                epoch<span class="token punctuation">,</span> batch_idx <span class="token operator">*</span> len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>trainloader<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span><span class="token punctuation">,</span>                       <span class="token number">100</span><span class="token punctuation">.</span> <span class="token operator">*</span> batch_idx <span class="token operator">/</span> len<span class="token punctuation">(</span>trainloader<span class="token punctuation">)</span><span class="token punctuation">,</span> loss<span class="token punctuation">.</span>data<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                optimizer<span class="token punctuation">.</span>param_groups<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'lr'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">###</span><span class="token comment" spellcheck="true">###</span><span class="token comment" spellcheck="true">###省略代码</span>torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>model<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'bcnn_lastlayer.pth'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将第一步训练的参数保存，在第二步中加载</p><p>第二步：加载第一步的预训练参数,对所有层的参数进行微调</p><p>train_fintune.py</p><pre class="line-numbers language-python"><code class="language-python">model <span class="token operator">=</span> bilinear_model<span class="token punctuation">.</span>Net<span class="token punctuation">(</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>pretrained <span class="token operator">=</span> <span class="token boolean">True</span><span class="token keyword">if</span> pretrained<span class="token punctuation">:</span>    pre_dic <span class="token operator">=</span> torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'bcnn_lastlayer.pth'</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>pre_dic<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> m <span class="token keyword">in</span> model<span class="token punctuation">.</span>modules<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>m<span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">)</span><span class="token punctuation">:</span>            n <span class="token operator">=</span> m<span class="token punctuation">.</span>kernel_size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> m<span class="token punctuation">.</span>kernel_size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> m<span class="token punctuation">.</span>out_channels            m<span class="token punctuation">.</span>weight<span class="token punctuation">.</span>data<span class="token punctuation">.</span>normal_<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">.</span> <span class="token operator">/</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> isinstance<span class="token punctuation">(</span>m<span class="token punctuation">,</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">)</span><span class="token punctuation">:</span>            m<span class="token punctuation">.</span>weight<span class="token punctuation">.</span>data<span class="token punctuation">.</span>fill_<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            m<span class="token punctuation">.</span>bias<span class="token punctuation">.</span>data<span class="token punctuation">.</span>zero_<span class="token punctuation">(</span><span class="token punctuation">)</span>criterion <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">,</span> momentum<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span> weight_decay<span class="token operator">=</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>epoch<span class="token punctuation">)</span><span class="token punctuation">:</span>    model<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> batch_idx<span class="token punctuation">,</span> <span class="token punctuation">(</span>data<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>trainloader<span class="token punctuation">)</span><span class="token punctuation">:</span>        data<span class="token punctuation">,</span> target <span class="token operator">=</span> data<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> target<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        output <span class="token operator">=</span> model<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        loss <span class="token operator">=</span> criterion<span class="token punctuation">(</span>output<span class="token punctuation">,</span> target<span class="token punctuation">)</span>        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> batch_idx <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Train Epoch: {} [{}/{} ({:.0f}%)]\tLoss: {:.6f}\tLR: {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>                epoch<span class="token punctuation">,</span> batch_idx <span class="token operator">*</span> len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>trainloader<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span><span class="token punctuation">,</span>                       <span class="token number">100</span><span class="token punctuation">.</span> <span class="token operator">*</span> batch_idx <span class="token operator">/</span> len<span class="token punctuation">(</span>trainloader<span class="token punctuation">)</span><span class="token punctuation">,</span> loss<span class="token punctuation">.</span>data<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                optimizer<span class="token punctuation">.</span>param_groups<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'lr'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">###省略代码</span>torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>model<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'bcnn_alllayer.pth'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完整代码可上Github上<a href="https://github.com/zhulingang/BCNN" target="_blank" rel="noopener">BCNN</a>浏览，经过实验，微调参数确实比直接训练全连接层准确率高。</p>]]></content>
      
      
      <categories>
          
          <category> 图像识别 </category>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 细粒度图像识别 </tag>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>菊花细粒度识别——NTS-Net模型详解</title>
      <link href="/2021/06/09/nts-net/"/>
      <url>/2021/06/09/nts-net/</url>
      
        <content type="html"><![CDATA[<h1 id="菊花细粒度识别——NTS-Net模型详解"><a href="#菊花细粒度识别——NTS-Net模型详解" class="headerlink" title="菊花细粒度识别——NTS-Net模型详解"></a>菊花细粒度识别——NTS-Net模型详解</h1><p>​    Nts-Net(Navigator-Teacher-Scrutinizer Network,Nts-Net)应用于细粒度图像识别中。NTS-Net 将整张图像以及那些具有能强烈表示类别特征的区域所提取 的特征进行融合，有利于细粒度图像识别。所以，NTS-Net 进行识别的关键是如何定位最具有语义信息的局部区域。</p><p>​    如NTS-Net的名字所示，模型主要由三个网络部分组成：Navigator、Teacher、Scrutinizer网络。</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210608210935.png" alt></p><p>​    Navigator 的作用是让整个模型关注最具判别性的区域，Navigator 通过预测图像各个区域的信息量，提取出最具判别性的局部区域。当图像输入 Navigator 网络后，Navigator 网络会根据不同的比例和尺寸产生一系列矩形信息区域，并根据信息丰富度 排序。最后取其中信息度最大的 <em>M</em> 个区域，随后从完整的图像中映射对应的区域，把它们按照规定的尺寸，提取特征并送入到 Teacher 网络中，得到这 <em>M</em> 个区域的置信度并排序。局部区域的信息度反映的是对物体细粒度分类的表征能力，如果对 Teacher网络中的置信度进行排序，区域置信度的排序应与信息度的排序一致。所以，我们可以计算区域信息度和置信度的一致性的损失值，来对 Navigator 网络进行训练和优化。</p><p>​    下图是Teacher网络和Navigator网络自监督机制示意图：</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210608211044.png" alt="自监督机制示意图"></p><p>​    需要注意的是：局部区域经过特征提取网络提取特征后送入Teacher网络，经Teacher网络的全连接层得到菊花分类向量，再与标签进行交叉熵得到置信度。</p><p>​    Navigator网络将信息度最大的K个区域送往Scrutinizer网络，Scrutinizer网络提取这些局部区域的特征，然后将全局图像的特征和局部区域的特征拼接，最后送入全连接层分类。</p><p>​    下图是NTS-Net的检测过程：</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210608211445.png" alt="NTS-Net的检测过程"></p><p>需要注意的是：局部区域是根据特征图与全局图像的映射关系上采样得到的。</p><h2 id="核心代码理解："><a href="#核心代码理解：" class="headerlink" title="核心代码理解："></a>核心代码理解：</h2><h3 id="NTS-Net的网络代码：model-py"><a href="#NTS-Net的网络代码：model-py" class="headerlink" title="NTS-Net的网络代码：model.py"></a>NTS-Net的网络代码：model.py</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F<span class="token keyword">from</span> torch<span class="token punctuation">.</span>autograd <span class="token keyword">import</span> Variable<span class="token keyword">from</span> core <span class="token keyword">import</span> resnet<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> core<span class="token punctuation">.</span>anchors <span class="token keyword">import</span> generate_default_anchor_maps<span class="token punctuation">,</span> hard_nms<span class="token keyword">from</span> config <span class="token keyword">import</span> CAT_NUM<span class="token punctuation">,</span> PROPOSAL_NUMnum_class<span class="token operator">=</span><span class="token number">115</span><span class="token keyword">class</span> <span class="token class-name">ProposalNet</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#不同尺寸的特征图要在不同大小的特征图上采样，。Navigator 网络在不同尺度的全局特征图上抠取不同尺寸的候选框的局部特征图。尺度为48、96、192的局部区域应该分别在大小为14</span>    <span class="token comment" spellcheck="true"># ×14、7×7、4×4的特征图上抠取局部特征图</span>    <span class="token comment" spellcheck="true">#ProposalNet得到不同尺度的特征图</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>ProposalNet<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>down1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>down2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>down3 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>ReLU <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>tidy1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>tidy2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>tidy3 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        batch_size <span class="token operator">=</span> x<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        d1 <span class="token operator">=</span> self<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>self<span class="token punctuation">.</span>down1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        d2 <span class="token operator">=</span> self<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>self<span class="token punctuation">.</span>down2<span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">)</span>        d3 <span class="token operator">=</span> self<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>self<span class="token punctuation">.</span>down3<span class="token punctuation">(</span>d2<span class="token punctuation">)</span><span class="token punctuation">)</span>        t1 <span class="token operator">=</span> self<span class="token punctuation">.</span>tidy1<span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span>batch_size<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        t2 <span class="token operator">=</span> self<span class="token punctuation">.</span>tidy2<span class="token punctuation">(</span>d2<span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span>batch_size<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        t3 <span class="token operator">=</span> self<span class="token punctuation">.</span>tidy3<span class="token punctuation">(</span>d3<span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span>batch_size<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span> t2<span class="token punctuation">,</span> t3<span class="token punctuation">)</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">attention_net</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> topN<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>attention_net<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pretrained_model <span class="token operator">=</span> resnet<span class="token punctuation">.</span>resnet50<span class="token punctuation">(</span>pretrained<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#特征提取网络、使用的是预训练网络RestNet-50</span>        self<span class="token punctuation">.</span>pretrained_model<span class="token punctuation">.</span>avgpool <span class="token operator">=</span> nn<span class="token punctuation">.</span>AdaptiveAvgPool2d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pretrained_model<span class="token punctuation">.</span>fc <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">512</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">,</span> num_class<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>proposal_net <span class="token operator">=</span> ProposalNet<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>topN <span class="token operator">=</span> topN <span class="token comment" spellcheck="true">#topN为送往Teacher网络的局部区域数量</span>        self<span class="token punctuation">.</span>concat_net <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">2048</span> <span class="token operator">*</span> <span class="token punctuation">(</span>CAT_NUM <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> num_class<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#concat_net为Scrutinizer的全连接层，</span>                                                                    <span class="token comment" spellcheck="true"># 输入的是拼接后局部特征向量和全局向量的特征向量 输出菊花各个种类的概率</span>        self<span class="token punctuation">.</span>partcls_net <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">512</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">,</span> num_class<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#Teacher网络中的全连接层，输入经特征提取网络的局部区域的特征图，输出菊花分类向量</span>        _<span class="token punctuation">,</span> edge_anchors<span class="token punctuation">,</span> _ <span class="token operator">=</span> generate_default_anchor_maps<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pad_side <span class="token operator">=</span> <span class="token number">224</span>        self<span class="token punctuation">.</span>edge_anchors <span class="token operator">=</span> <span class="token punctuation">(</span>edge_anchors <span class="token operator">+</span> <span class="token number">224</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>int<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#产生候选框</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        resnet_out<span class="token punctuation">,</span> rpn_feature<span class="token punctuation">,</span> feature <span class="token operator">=</span> self<span class="token punctuation">.</span>pretrained_model<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#第一步先得到全局图像的特征图</span>        x_pad <span class="token operator">=</span> F<span class="token punctuation">.</span>pad<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>pad_side<span class="token punctuation">,</span> self<span class="token punctuation">.</span>pad_side<span class="token punctuation">,</span> self<span class="token punctuation">.</span>pad_side<span class="token punctuation">,</span> self<span class="token punctuation">.</span>pad_side<span class="token punctuation">)</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">'constant'</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>        batch <span class="token operator">=</span> x<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># we will reshape rpn to shape: batch * nb_anchor</span>        rpn_score <span class="token operator">=</span> self<span class="token punctuation">.</span>proposal_net<span class="token punctuation">(</span>rpn_feature<span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#继续下采样得到不同尺寸的特征图</span>        all_cdds <span class="token operator">=</span> <span class="token punctuation">[</span>            np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>edge_anchors<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> x <span class="token keyword">in</span> rpn_score<span class="token punctuation">.</span>data<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        top_n_cdds <span class="token operator">=</span> <span class="token punctuation">[</span>hard_nms<span class="token punctuation">(</span>x<span class="token punctuation">,</span> topn<span class="token operator">=</span>self<span class="token punctuation">.</span>topN<span class="token punctuation">,</span> iou_thresh<span class="token operator">=</span><span class="token number">0.25</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> all_cdds<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#候选框极大值抑制，保留topN个候选框</span>        top_n_cdds <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>top_n_cdds<span class="token punctuation">)</span>        top_n_index <span class="token operator">=</span> top_n_cdds<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>int<span class="token punctuation">)</span>        top_n_index <span class="token operator">=</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>top_n_index<span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>        top_n_index<span class="token operator">=</span>top_n_index<span class="token punctuation">.</span>long<span class="token punctuation">(</span><span class="token punctuation">)</span>        top_n_prob <span class="token operator">=</span> torch<span class="token punctuation">.</span>gather<span class="token punctuation">(</span>rpn_score<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> index<span class="token operator">=</span>top_n_index<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#top_n_prob为信息量</span>        part_imgs <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">[</span>batch<span class="token punctuation">,</span> self<span class="token punctuation">.</span>topN<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>batch<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>self<span class="token punctuation">.</span>topN<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token punctuation">[</span>y0<span class="token punctuation">,</span> x0<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x1<span class="token punctuation">]</span> <span class="token operator">=</span> top_n_cdds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>int<span class="token punctuation">)</span>                part_imgs<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> F<span class="token punctuation">.</span>interpolate<span class="token punctuation">(</span>x_pad<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> y0<span class="token punctuation">:</span>y1<span class="token punctuation">,</span> x0<span class="token punctuation">:</span>x1<span class="token punctuation">]</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">224</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">'bilinear'</span><span class="token punctuation">,</span>                                                      align_corners<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#上采样得到局部区域图像</span>        part_imgs <span class="token operator">=</span> part_imgs<span class="token punctuation">.</span>view<span class="token punctuation">(</span>batch <span class="token operator">*</span> self<span class="token punctuation">.</span>topN<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#part_imgs为所有局部区域图像</span>        _<span class="token punctuation">,</span> _<span class="token punctuation">,</span> part_features <span class="token operator">=</span> self<span class="token punctuation">.</span>pretrained_model<span class="token punctuation">(</span>part_imgs<span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#part_feartures为所有局部区域图的特征图</span>        part_feature <span class="token operator">=</span> part_features<span class="token punctuation">.</span>view<span class="token punctuation">(</span>batch<span class="token punctuation">,</span> self<span class="token punctuation">.</span>topN<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#变换维度</span>        part_feature <span class="token operator">=</span> part_feature<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span>CAT_NUM<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">.</span>contiguous<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#根据信息量选择前几个</span>        part_feature <span class="token operator">=</span> part_feature<span class="token punctuation">.</span>view<span class="token punctuation">(</span>batch<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#转换维度</span>        <span class="token comment" spellcheck="true"># concat_logits have the shape: B*200</span>        concat_out <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">[</span>part_feature<span class="token punctuation">,</span> feature<span class="token punctuation">]</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#将局部特征图与全局特征图进行拼接</span>        concat_logits <span class="token operator">=</span> self<span class="token punctuation">.</span>concat_net<span class="token punctuation">(</span>concat_out<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#concat_logits为全局和局部拼接后的特征分类向量</span>        raw_logits <span class="token operator">=</span> resnet_out        <span class="token comment" spellcheck="true"># part_logits have the shape: B*N*200</span>        part_logits <span class="token operator">=</span> self<span class="token punctuation">.</span>partcls_net<span class="token punctuation">(</span>part_features<span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span>batch<span class="token punctuation">,</span> self<span class="token punctuation">.</span>topN<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#raw_logits为原图的特征向量，concat为原图和局部区域生成的特征分类向量，part_logits为所有局部区域的分类特征向量</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>raw_logits<span class="token punctuation">,</span> concat_logits<span class="token punctuation">,</span> part_logits<span class="token punctuation">,</span> top_n_index<span class="token punctuation">,</span> top_n_prob<span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">list_loss</span><span class="token punctuation">(</span>logits<span class="token punctuation">,</span> targets<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#输入的是part_logits为局部区域的分类特征向量，targets为标签</span>    <span class="token comment" spellcheck="true">#TODO 计算置信度</span>    temp <span class="token operator">=</span> F<span class="token punctuation">.</span>log_softmax<span class="token punctuation">(</span>logits<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#softmax，相当于将相加总和1。log再对每个进行log计算，方便计算交叉熵</span>    loss <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>targets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>logits<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#计算交叉熵</span>    <span class="token keyword">return</span> torch<span class="token punctuation">.</span>stack<span class="token punctuation">(</span>loss<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#将loss中每个batch的loss拼接在一起</span><span class="token keyword">def</span> <span class="token function">ranking_loss</span><span class="token punctuation">(</span>score<span class="token punctuation">,</span> targets<span class="token punctuation">,</span> proposal_num<span class="token operator">=</span>PROPOSAL_NUM<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#输入score为top_n_prob，targets为part_loss</span>    <span class="token comment" spellcheck="true">#计算信息度和置信度的排序是否一致、Navigator的损失函数</span>    loss <span class="token operator">=</span> Variable<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    batch_size <span class="token operator">=</span> score<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>proposal_num<span class="token punctuation">)</span><span class="token punctuation">:</span>        targets_p <span class="token operator">=</span> <span class="token punctuation">(</span>targets <span class="token operator">></span> targets<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> i<span class="token punctuation">]</span><span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>type<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>FloatTensor<span class="token punctuation">)</span>        pivot <span class="token operator">=</span> score<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> i<span class="token punctuation">]</span><span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        loss_p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> pivot <span class="token operator">+</span> score<span class="token punctuation">)</span> <span class="token operator">*</span> targets_p        loss_p <span class="token operator">=</span> torch<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>loss_p<span class="token punctuation">)</span><span class="token punctuation">)</span>        loss <span class="token operator">+=</span> loss_p    <span class="token keyword">return</span> loss <span class="token operator">/</span> batch_size<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="训练过程：train-py"><a href="#训练过程：train-py" class="headerlink" title="训练过程：train.py"></a>训练过程：train.py</h3><pre class="line-numbers language-python"><code class="language-python">trainset <span class="token operator">=</span> data<span class="token punctuation">.</span>MyDataset<span class="token punctuation">(</span><span class="token string">'./CUB200/new_train.txt'</span><span class="token punctuation">,</span> transform<span class="token operator">=</span>transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>                                                transforms<span class="token punctuation">.</span>Resize<span class="token punctuation">(</span><span class="token number">448</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                                transforms<span class="token punctuation">.</span>RandomHorizontalFlip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                                transforms<span class="token punctuation">.</span>CenterCrop<span class="token punctuation">(</span><span class="token number">448</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                                transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                                transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span>mean<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0.485</span><span class="token punctuation">,</span> <span class="token number">0.456</span><span class="token punctuation">,</span> <span class="token number">0.406</span><span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0.229</span><span class="token punctuation">,</span> <span class="token number">0.224</span><span class="token punctuation">,</span> <span class="token number">0.225</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                                <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>trainloader <span class="token operator">=</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>trainset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">,</span>                                          shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> num_workers<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>testset <span class="token operator">=</span> data<span class="token punctuation">.</span>MyDataset<span class="token punctuation">(</span><span class="token string">'./CUB200/test.txt'</span><span class="token punctuation">,</span> transform<span class="token operator">=</span>transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>                                                transforms<span class="token punctuation">.</span>Resize<span class="token punctuation">(</span><span class="token number">448</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                                transforms<span class="token punctuation">.</span>CenterCrop<span class="token punctuation">(</span><span class="token number">448</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                                transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                                transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span>mean<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0.485</span><span class="token punctuation">,</span> <span class="token number">0.456</span><span class="token punctuation">,</span> <span class="token number">0.406</span><span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0.229</span><span class="token punctuation">,</span> <span class="token number">0.224</span><span class="token punctuation">,</span> <span class="token number">0.225</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                                <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>testloader <span class="token operator">=</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>testset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">,</span>                                         shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> num_workers<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># define model</span>net <span class="token operator">=</span> model_cuda<span class="token punctuation">.</span>attention_net<span class="token punctuation">(</span>topN<span class="token operator">=</span>PROPOSAL_NUM<span class="token punctuation">)</span><span class="token keyword">if</span> resume<span class="token punctuation">:</span>    ckpt <span class="token operator">=</span> torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span>resume<span class="token punctuation">)</span>    net<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>ckpt<span class="token punctuation">[</span><span class="token string">'net_state_dict'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    start_epoch <span class="token operator">=</span> ckpt<span class="token punctuation">[</span><span class="token string">'epoch'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>creterion <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># define optimizers</span>raw_parameters <span class="token operator">=</span> list<span class="token punctuation">(</span>net<span class="token punctuation">.</span>pretrained_model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>part_parameters <span class="token operator">=</span> list<span class="token punctuation">(</span>net<span class="token punctuation">.</span>proposal_net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>concat_parameters <span class="token operator">=</span> list<span class="token punctuation">(</span>net<span class="token punctuation">.</span>concat_net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>partcls_parameters <span class="token operator">=</span> list<span class="token punctuation">(</span>net<span class="token punctuation">.</span>partcls_net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>raw_optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>raw_parameters<span class="token punctuation">,</span> lr<span class="token operator">=</span>LR<span class="token punctuation">,</span> momentum<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span> weight_decay<span class="token operator">=</span>WD<span class="token punctuation">)</span>concat_optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>concat_parameters<span class="token punctuation">,</span> lr<span class="token operator">=</span>LR<span class="token punctuation">,</span> momentum<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span> weight_decay<span class="token operator">=</span>WD<span class="token punctuation">)</span>part_optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>part_parameters<span class="token punctuation">,</span> lr<span class="token operator">=</span>LR<span class="token punctuation">,</span> momentum<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span> weight_decay<span class="token operator">=</span>WD<span class="token punctuation">)</span>partcls_optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>partcls_parameters<span class="token punctuation">,</span> lr<span class="token operator">=</span>LR<span class="token punctuation">,</span> momentum<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span> weight_decay<span class="token operator">=</span>WD<span class="token punctuation">)</span>schedulers <span class="token operator">=</span> <span class="token punctuation">[</span>MultiStepLR<span class="token punctuation">(</span>raw_optimizer<span class="token punctuation">,</span> milestones<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">,</span> gamma<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              MultiStepLR<span class="token punctuation">(</span>concat_optimizer<span class="token punctuation">,</span> milestones<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">,</span> gamma<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              MultiStepLR<span class="token punctuation">(</span>part_optimizer<span class="token punctuation">,</span> milestones<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">,</span> gamma<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              MultiStepLR<span class="token punctuation">(</span>partcls_optimizer<span class="token punctuation">,</span> milestones<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">,</span> gamma<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>net <span class="token operator">=</span> net<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>net <span class="token operator">=</span> DataParallel<span class="token punctuation">(</span>net<span class="token punctuation">)</span><span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span>start_epoch<span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># begin training</span>    _print<span class="token punctuation">(</span><span class="token string">'--'</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>    net<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> data <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>trainloader<span class="token punctuation">)</span><span class="token punctuation">:</span>        img<span class="token punctuation">,</span> label <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>        niter <span class="token operator">=</span> epoch <span class="token operator">*</span> len<span class="token punctuation">(</span>trainloader<span class="token punctuation">)</span> <span class="token operator">+</span> i        batch_size <span class="token operator">=</span> img<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        raw_optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        part_optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        concat_optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        partcls_optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># raw_logits为原图的分类特征向量，concat为原图和局部区域生成的特征向量，part_logits为局部区域的分类特征向量</span>        raw_logits<span class="token punctuation">,</span> concat_logits<span class="token punctuation">,</span> part_logits<span class="token punctuation">,</span> _<span class="token punctuation">,</span> top_n_prob <span class="token operator">=</span> net<span class="token punctuation">(</span>img<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#part_loss计算置信度</span>        part_loss <span class="token operator">=</span> model_cuda<span class="token punctuation">.</span>list_loss<span class="token punctuation">(</span>part_logits<span class="token punctuation">.</span>view<span class="token punctuation">(</span>batch_size <span class="token operator">*</span> PROPOSAL_NUM<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                         label<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>repeat<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> PROPOSAL_NUM<span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span>batch_size<span class="token punctuation">,</span> PROPOSAL_NUM<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#raw_loss是原图的特征分类向量与正确类别的交叉熵</span>        raw_loss <span class="token operator">=</span> creterion<span class="token punctuation">(</span>raw_logits<span class="token punctuation">,</span> label<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#是合并特征经全连接层输出的特征分类向量与正确类别的交叉熵</span>        concat_loss <span class="token operator">=</span> creterion<span class="token punctuation">(</span>concat_logits<span class="token punctuation">,</span> label<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#Scrutinizer损失值</span>        <span class="token comment" spellcheck="true">#top_n_prob为信息量，part_loss为置信度</span>        rank_loss <span class="token operator">=</span> model_cuda<span class="token punctuation">.</span>ranking_loss<span class="token punctuation">(</span>top_n_prob<span class="token punctuation">,</span> part_loss<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#navigator网络损失，比较信息度和置信度排序，计算损失值</span>        <span class="token comment" spellcheck="true">#为为局部区域的分类特征向量与正确类别的交叉熵</span>        partcls_loss <span class="token operator">=</span> creterion<span class="token punctuation">(</span>part_logits<span class="token punctuation">.</span>view<span class="token punctuation">(</span>batch_size <span class="token operator">*</span> PROPOSAL_NUM<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                 label<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>repeat<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> PROPOSAL_NUM<span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#局部区域的损失值，即Teacher网络=局部区域+整个图像</span>        total_loss <span class="token operator">=</span> raw_loss <span class="token operator">+</span> rank_loss <span class="token operator">+</span> concat_loss <span class="token operator">+</span> partcls_loss        total_loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>        raw_optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        part_optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        concat_optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        partcls_optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        writer1<span class="token punctuation">.</span>add_scalars<span class="token punctuation">(</span><span class="token string">'Train_loss'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'train_loss'</span><span class="token punctuation">:</span> total_loss<span class="token punctuation">.</span>data<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> niter<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#        progress_bar(i, len(trainloader), 'train')</span>    <span class="token comment" spellcheck="true">#调整学习率   </span>    <span class="token keyword">for</span> scheduler <span class="token keyword">in</span> schedulers<span class="token punctuation">:</span>        scheduler<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实验过程使用的预训练模型为RestNet-50，完整的代码可以去我的GitHub上<a href="https://github.com/zhulingang/NTS-Net" target="_blank" rel="noopener">NTS-Net</a>上查看。</p>]]></content>
      
      
      <categories>
          
          <category> 图像识别 </category>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 细粒度图像识别 </tag>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客部署Gitalk评论踩坑</title>
      <link href="/2021/05/17/hexo-gitalk/"/>
      <url>/2021/05/17/hexo-gitalk/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo博客部署Gitalk评论踩坑"><a href="#Hexo博客部署Gitalk评论踩坑" class="headerlink" title="Hexo博客部署Gitalk评论踩坑"></a>Hexo博客部署Gitalk评论踩坑</h1><p>算了算自己瞎折腾好久，查了好久的百度都没能解决，最后在Google和Github上找到了正确的方案。只能说Github yyds～</p><h2 id="在OAuth已搭建Gitalk"><a href="#在OAuth已搭建Gitalk" class="headerlink" title="在OAuth已搭建Gitalk"></a>在OAuth已搭建Gitalk</h2><p>搭建步骤可自行百度，主要搭建完毕之后的后续步骤坑较大</p><h2 id="起因：Request-failed-with-status-code-403"><a href="#起因：Request-failed-with-status-code-403" class="headerlink" title="起因：Request failed with status code 403"></a>起因：Request failed with status code 403</h2><p>一直不明白这个原因是怎么造成的<img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210517022318.jpg" alt></p><p>最后参考了这篇博客<a href="https://cuiqingcai.com/30010.html" target="_blank" rel="noopener">Gitalk 评论登录 403 问题解决</a></p><p>原因是：主题模版中的cors-anywhere反向代理已不支持直接使用，Gitalk的默认proxy为</p><pre><code>Default: https://cors-anywhere.herokuapp.com/https://github.com/login/oauth/access_token.</code></pre><p>所以在代理访问Github时会直接forbidden。参考博客中，对403出现的原因做了详细说明</p><h2 id="解决403"><a href="#解决403" class="headerlink" title="解决403"></a>解决403</h2><p>博主的做法是：更换反向代理，直接白嫖别人代理。我也参照了博主的做法</p><p>我的博客主题是matery，所以在/thems/matery/_config.yml里添加自己定义的proxy</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">gitalk</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span>   <span class="token key atrule">owner</span><span class="token punctuation">:</span>   <span class="token key atrule">repo</span><span class="token punctuation">:</span>   <span class="token key atrule">oauth</span><span class="token punctuation">:</span>    <span class="token key atrule">clientId</span><span class="token punctuation">:</span>     <span class="token key atrule">clientSecret</span><span class="token punctuation">:</span>   <span class="token key atrule">admin</span><span class="token punctuation">:</span>   <span class="token key atrule">proxy</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//netnr<span class="token punctuation">-</span>proxy.cloudno.de/https<span class="token punctuation">:</span>//github.com/login/oauth/access_token<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="出先新问题429"><a href="#出先新问题429" class="headerlink" title="出先新问题429"></a>出先新问题429</h2><p>但是会出现新的问题，Code：429</p><p>429的含义是收到了太多的请求，一开始还没意识到白嫖代理的问题，一直在想429就该怎么解决。知道后来才恍然大悟，我会白嫖，许多人也会白嫖，这个代理很多人都会使用，但是使用次数有限制，就会造成过多的人使用请求。</p><p>最后在Github的<a href="https://github.com/gitalk/gitalk/issues/429" target="_blank" rel="noopener">Gitalk后出现403错误</a>讨论上搜到了比较简单的解决方案，自己部署反向代理。</p><h2 id="自己部署反向代理"><a href="#自己部署反向代理" class="headerlink" title="自己部署反向代理"></a>自己部署反向代理</h2><p>十分感谢Github上的问题讨论，为我提供了比较便捷的解决方案。虽然许多朋友都是白嫖别人代码的哈哈哈，我也想白嫖，但是我都耗在这个问题这么久了，不彻底解决不甘心啊。</p><p>于是参考了另一篇博客<a href="https://www.chenhanpeng.com/create-own-cors-anywhere-to-resolve-the-request-with-403/" target="_blank" rel="noopener">在cloudflare上创建一个免费的在线代理来解决gitalk授权登录报403问题</a></p><p>首先创建自己的一个ClOUDFLARE账号  点击<a href="https://dash.cloudflare.com/login" target="_blank" rel="noopener">CLOUDFLARE注册</a></p><p>选择Workers，创建免费的Workers</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210517025103.png" alt></p><p>免费版只有10w次请求，但是个人使用足以，填写二级域名后就可以创建完成。</p><p>随后：</p><ol><li><p>将脚本代码删除</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210517025939.png" alt></p></li></ol><ol start="2"><li><p>进入Zibri大佬的Github的repo中<a href="https://github.com/Zibri/cloudflare-cors-anywhere" target="_blank" rel="noopener">cloudflare-cors-anywhere</a>复制index.js的内容到脚本文件中</p><p>我看许多人的index.js都是参考他的，我是直接复制参考博主的index.js  指路<a href="https://github.com/Hanpeng-Chen/cloudflare-cors-anywhere" target="_blank" rel="noopener">博主仓库</a></p></li><li><p>保存并部署，复制自己的域名</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210517030725.png" alt></p></li></ol><ol start="4"><li><p>修改_config.yml里的proxy</p><p>将上述复制的值，作为proxy</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210517030720.png" alt></p><p>一定要注意连接的地方，要加?,不然会出现no access token的错误</p></li><li><p>最后重新部署博客，搞定</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210517030933.png" alt></p></li></ol><h2 id="出现Error-Validation-Failed"><a href="#出现Error-Validation-Failed" class="headerlink" title="出现Error: Validation Failed."></a>出现Error: Validation Failed.</h2><p>原因文章对应的 URL 过长，修改文件名长度，建议用英文，不然中文很容易太长</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210517033739.png" alt></p><p>Github真的yyds，上面有好多百度不到的问题解决方案，所以还是练好英文，多看看Google和Github吧～～终于解决问题了，可以睡个好觉了，现在是凌晨3：38.</p>]]></content>
      
      
      <categories>
          
          <category> 服务部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> Gitalk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>菊花细粒度识别模型可视化软件</title>
      <link href="/2021/05/13/chrysanthemum/"/>
      <url>/2021/05/13/chrysanthemum/</url>
      
        <content type="html"><![CDATA[<h1 id="菊花细粒度识别模型可视化软件"><a href="#菊花细粒度识别模型可视化软件" class="headerlink" title="菊花细粒度识别模型可视化软件"></a>菊花细粒度识别模型可视化软件</h1><h2 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h2><ul><li>Python==3.7</li><li>torch==1.7.0</li><li>Pyqt5 </li></ul><h2 id="软件使用"><a href="#软件使用" class="headerlink" title="软件使用"></a>软件使用</h2><ol><li><p>图片初始打开路径修改</p><p>由于系统原因，需要修改系统路径，在main.py中修改</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210514171323.png" alt></p></li></ol><ol start="2"><li><p>运行main.py</p><ul><li>选择图像</li></ul><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210514171528.png" alt></p><ul><li><p>选择识别模型</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210514171802.png" alt></p></li><li><p>开始识别</p></li><li><p>查看识别过程</p><p>识别过程图片会保存在当前目录的NTSfeautures和BCNNfeautures目录下</p></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 图像识别 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Es学习</title>
      <link href="/2020/11/12/es-study/"/>
      <url>/2020/11/12/es-study/</url>
      
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210514012832.png" alt></p><h1 id="ES查询"><a href="#ES查询" class="headerlink" title="ES查询"></a>ES查询</h1><h2 id="filter-DSL和query-DSL"><a href="#filter-DSL和query-DSL" class="headerlink" title="filter DSL和query DSL"></a>filter DSL和query DSL</h2><ul><li><p>filter DSL</p><p>在过滤器上下文中，查询会回答这个问题——“这个文档匹不匹配？”</p></li></ul><p>答案很简单，是或者不是。它不会去计算任何分值，也不会关心返回的排序问题，因此效率会高一点。</p><p>过滤上下文 是在使用filter参数时候的执行环境</p><ul><li><p>query DSL</p><p>在查询上下文中，查询会回答这个问题——“这个文档匹不匹配这个查询，它的相关度高么？”</p><p>如何验证匹配很好理解，如何计算相关度呢？ES中索引的数据都会存储一个_score分值，分值越高就代表越匹配。另外关于某个搜索的分值计算还是很复杂的，因此也需要一定的时间。</p></li></ul><h2 id="精确查找"><a href="#精确查找" class="headerlink" title="精确查找"></a>精确查找</h2><p>想要精确匹配一个字段,属性为keyword</p><ul><li><p>term方法</p><p>term是代表完全匹配，即不进行分词器分析，文档中必须包含整个搜索的词汇。主要用于精确匹配哪些值，比如数字，日期，布尔值或 not_analyzed 的字符串</p><p>term 必须对应 keyword的属性，不然查询不出，所谓keyword就是必须完全匹配，text可以模糊查询</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210514012843.png" alt></p><p>如果仅用s.value 查询不出，因为s.value是text属性，</p></li><li><p>match</p><p>match查询会先对搜索词进行分词,分词完毕后再逐个对分词结果进行匹配，因此相比于term的精确搜索.</p><p>match 是queryDSL</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210514012852.png" alt></p></li></ul><h2 id="term"><a href="#term" class="headerlink" title="term"></a>term</h2><p>term是代表完全匹配，即不进行分词器分析，文档中必须包含整个搜索的词汇。主要用于精确匹配哪些值，比如数字，日期，布尔值或 not_analyzed 的字符串</p><h2 id="terms"><a href="#terms" class="headerlink" title="terms"></a>terms</h2><p>terms 跟 term 有点类似，但 terms 允许指定多个匹配条件。 如果某个字段指定了多个值，那么文档需要一起去做匹配：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>“terms”<span class="token operator">:</span> <span class="token punctuation">{</span>“tag”<span class="token operator">:</span> <span class="token punctuation">[</span> “search”<span class="token punctuation">,</span> “full_text”<span class="token punctuation">,</span> “nosql” <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="range-过滤"><a href="#range-过滤" class="headerlink" title="range 过滤"></a>range 过滤</h2><p>ange过滤允许我们按照指定范围查找一批数据：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>“range”<span class="token operator">:</span> <span class="token punctuation">{</span>“age”<span class="token operator">:</span> <span class="token punctuation">{</span>“gte”<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>“lt”<span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>范围操作符包含：</p><p>gt :: 大于<br>gte:: 大于等于<br>lt :: 小于<br>lte:: 小于等于</p><h2 id="exists-和-missing-过滤"><a href="#exists-和-missing-过滤" class="headerlink" title="exists 和 missing 过滤"></a>exists 和 missing 过滤</h2><p>exists 和 missing 过滤可以用于查找文档中是否包含指定字段或没有某个字段，类似于SQL语句中的IS_NULL条件.这两个过滤只是针对已经查出一批数据来，但是想区分出某个字段是否存在的时候使用。</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>“exists”<span class="token operator">:</span> <span class="token punctuation">{</span>“field”<span class="token operator">:</span> “title”<span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="bool-过滤"><a href="#bool-过滤" class="headerlink" title="bool 过滤"></a>bool 过滤</h2><p>bool 过滤可以用来合并多个过滤条件查询结果的布尔逻辑，它包含一下操作符：</p><p>must :: 多个查询条件的完全匹配,相当于 and。<br>must_not :: 多个查询条件的相反匹配，相当于 not。<br>should :: 至少有一个查询条件匹配, 相当于 or。<br>这些参数可以分别继承一个过滤条件或者一个过滤条件的数组：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>“bool”<span class="token operator">:</span> <span class="token punctuation">{</span>“must”<span class="token operator">:</span> <span class="token punctuation">{</span> “term”<span class="token operator">:</span> <span class="token punctuation">{</span> “folder”<span class="token operator">:</span> “inbox” <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>“must_not”<span class="token operator">:</span> <span class="token punctuation">{</span> “term”<span class="token operator">:</span> <span class="token punctuation">{</span> “tag”<span class="token operator">:</span> “spam” <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>“should”<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> “term”<span class="token operator">:</span> <span class="token punctuation">{</span> “starred”<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span> “term”<span class="token operator">:</span> <span class="token punctuation">{</span> “unread”<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="match-all-查询"><a href="#match-all-查询" class="headerlink" title="match_all 查询"></a>match_all 查询</h2><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>“match_all”<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="match-查询"><a href="#match-查询" class="headerlink" title="match 查询"></a>match 查询</h2><p>match查询会先对搜索词进行分词,分词完毕后再逐个对分词结果进行匹配.它会在真正查询之前用分析器先分析match一下查询字符：</p><p>例如查询和”我的宝马多少马力”这个查询语句匹配的文档。</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"content"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"query"</span> <span class="token operator">:</span> <span class="token string">"我的宝马多少马力"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的查询匹配就会进行分词，比如”宝马多少马力”会被分词为”宝马 多少 马力”, 所有有关”宝马 多少 马力”, 那么所有包含这三个词中的一个或多个的文档就会被搜索出来。<br>并且根据lucene的评分机制(TF/IDF)来进行评分。</p><h2 id="multi-match-查询"><a href="#multi-match-查询" class="headerlink" title="multi_match 查询"></a>multi_match 查询</h2><p>如果我们希望两个字段进行匹配，其中一个字段有这个文档就满足的话，使用multi_match</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"multi_match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"query"</span> <span class="token operator">:</span> <span class="token string">"我的宝马多少马力"</span><span class="token punctuation">,</span>        <span class="token property">"fields"</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"title"</span><span class="token punctuation">,</span> <span class="token string">"content"</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="match-phrase"><a href="#match-phrase" class="headerlink" title="match_phrase"></a>match_phrase</h2><p>比如上面一个例子，一个文档”我的保时捷马力不错”也会被搜索出来，那么想要精确匹配所有同时包含”宝马 多少 马力”的文档怎么做？就要使用 match_phrase 了</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"match_phrase"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"content"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"query"</span> <span class="token operator">:</span> <span class="token string">"我的宝马多少马力"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完全匹配可能比较严，我们会希望有个可调节因子，少匹配一个也满足，那就需要使用到slop。</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"match_phrase"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"content"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"query"</span> <span class="token operator">:</span> <span class="token string">"我的宝马多少马力"</span><span class="token punctuation">,</span>            <span class="token property">"slop"</span> <span class="token operator">:</span> <span class="token number">1</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="通配符查询"><a href="#通配符查询" class="headerlink" title="通配符查询"></a>通配符查询</h2><ul><li><p>wildcards 查询</p><p>查询能够匹配包含W1F 7HW和W2F 8HW的文档：</p></li></ul><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>“query”<span class="token operator">:</span> <span class="token punctuation">{</span>“wildcard”<span class="token operator">:</span> <span class="token punctuation">{</span>“postcode”<span class="token operator">:</span> “W?F*HW”<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token punctuation">{</span>“query”<span class="token operator">:</span> <span class="token punctuation">{</span>“wildcard”<span class="token operator">:</span> <span class="token punctuation">{</span>“hostname”<span class="token operator">:</span> “wxopen*”<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>regexp 查询</li></ul><p>您只想匹配以W开头，紧跟着数字的邮政编码。使用regexp查询能够让你写下更复杂的模式：</p><pre class="line-numbers language-jsom"><code class="language-jsom">{“query”: {“regexp”: {“postcode”: “W[0-9].+”}}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所有以 wxopen 开头的正则</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>“query”<span class="token operator">:</span> <span class="token punctuation">{</span>“regexp”<span class="token operator">:</span> <span class="token punctuation">{</span>“hostname”<span class="token operator">:</span> “wxopen.*”<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Nested查询"><a href="#Nested查询" class="headerlink" title="Nested查询"></a>Nested查询</h2><p>结构</p><pre class="line-numbers language-json"><code class="language-json">PUT /blog_new<span class="token punctuation">{</span>  <span class="token property">"mappings"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"blog"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"title"</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"body"</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"tags"</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"published_on"</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"comments"</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"nested"</span><span class="token punctuation">,</span>          <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"comment"</span><span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"age"</span><span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"short"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"rating"</span><span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"short"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"commented_on"</span><span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询评论字段中评论姓名=William并且评论age=34的blog信息。</p><pre class="line-numbers language-json"><code class="language-json">GET /blog_new/_search?pretty<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"bool"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"must"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token property">"nested"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"comments"</span><span class="token punctuation">,</span>            <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token property">"bool"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"must"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                  <span class="token punctuation">{</span>                    <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                      <span class="token property">"comments.name"</span><span class="token operator">:</span> <span class="token string">"William"</span>                    <span class="token punctuation">}</span>                  <span class="token punctuation">}</span><span class="token punctuation">,</span>                  <span class="token punctuation">{</span>                    <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                      <span class="token property">"comments.age"</span><span class="token operator">:</span> <span class="token number">34</span>                    <span class="token punctuation">}</span>                  <span class="token punctuation">}</span>                <span class="token punctuation">]</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="ES创建索引"><a href="#ES创建索引" class="headerlink" title="ES创建索引"></a>ES创建索引</h1><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210514012904.png" alt="image-20201024152731520"></p><p>Post 方法，tt3为index，zlg为类型_type</p><pre class="line-numbers language-json"><code class="language-json">POST /tt3/zlg<span class="token punctuation">{</span><span class="token property">"mappings"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"subj"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token property">"height"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"integer"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token property">"weight"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"integer"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token property">"po"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"nested"</span><span class="token punctuation">,</span><span class="token property">"properties"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"pred"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"keyword"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token property">"obj"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"keyword"</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>PUT方法</p><p>类型为_doc</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210514012913.png" alt="image-20201024152930767"></p><pre class="line-numbers language-json"><code class="language-json">PUT /tt1<span class="token punctuation">{</span><span class="token property">"mappings"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"subj"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token property">"height"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"integer"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token property">"weight"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"integer"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token property">"po"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"nested"</span><span class="token punctuation">,</span><span class="token property">"properties"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"pred"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"keyword"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token property">"obj"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"keyword"</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="ES添加文档（数据）"><a href="#ES添加文档（数据）" class="headerlink" title="ES添加文档（数据）"></a>ES添加文档（数据）</h1><p>POST 或PUT</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210514012919.png" alt></p><p>demo1为index，_doc为类型，3位id，id可以省略（省略就系统自动生成)</p><pre class="line-numbers language-json"><code class="language-json">POST demo1/_doc/<span class="token number">3</span><span class="token punctuation">{</span>    <span class="token property">"subj"</span><span class="token operator">:</span> <span class="token string">"qj"</span><span class="token punctuation">,</span>    <span class="token property">"weight"</span><span class="token operator">:</span> <span class="token number">111</span><span class="token punctuation">,</span>    <span class="token property">"height"</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>    <span class="token property">"po"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>               <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"pred"</span><span class="token operator">:</span> <span class="token string">"爱好"</span><span class="token punctuation">,</span>                <span class="token property">"obj"</span><span class="token operator">:</span> <span class="token string">"tv"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"pred"</span><span class="token operator">:</span> <span class="token string">"性别"</span><span class="token punctuation">,</span>                <span class="token property">"obj"</span><span class="token operator">:</span> <span class="token string">"男"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>批量插入需要id，命令行使用_bulk命令</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210514012930.png" alt></p><p>/index/type/_bulk </p><p>跟上id，再跟里面的数据。</p><pre class="line-numbers language-json"><code class="language-json">POST /demo6/_doc/_bulk<span class="token punctuation">{</span><span class="token property">"index"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"_id"</span><span class="token operator">:</span><span class="token string">"20"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span> <span class="token property">"s"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"uri"</span><span class="token punctuation">,</span> <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"hnmb-01OrQN70"</span> <span class="token punctuation">}</span>  <span class="token punctuation">,</span> <span class="token property">"p"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"uri"</span><span class="token punctuation">,</span> <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"P1_1"</span> <span class="token punctuation">}</span>   <span class="token punctuation">,</span> <span class="token property">"o"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"literal"</span><span class="token punctuation">,</span> <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"浏阳古乐应鼓"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token property">"index"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"_id"</span><span class="token operator">:</span><span class="token string">"21"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span> <span class="token property">"s"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"uri"</span><span class="token punctuation">,</span> <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"hnmb-01OrQN70"</span> <span class="token punctuation">}</span>  <span class="token punctuation">,</span> <span class="token property">"p"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"uri"</span><span class="token punctuation">,</span> <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"P2_12"</span> <span class="token punctuation">}</span>  <span class="token punctuation">,</span> <span class="token property">"o"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"uri"</span><span class="token punctuation">,</span> <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"文物"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>python 批量插入，读取每行的json数据，处理后构建插入的数据_source，然后自动生成id，组成action</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> os<span class="token keyword">from</span> elasticsearch <span class="token keyword">import</span> Elasticsearch<span class="token keyword">from</span> elasticsearch <span class="token keyword">import</span> helpers<span class="token keyword">def</span> <span class="token function">get_files_to_import</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>    f_list <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    files_ <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> f_list<span class="token punctuation">:</span>        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>splitext<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.json'</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>            files_<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">return</span> files_<span class="token comment" spellcheck="true"># es = Elasticsearch('http://elastic:One4all4one@es-cn-mp90kb1bx0019j3cc.elasticsearch.aliyuncs.com:443')</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 默认不开启嗅探功能 es = Elasticsearch()</span>    es <span class="token operator">=</span> Elasticsearch<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># es = Elasticsearch(["***:9200", "***:9200"],</span>    <span class="token comment" spellcheck="true">#                    sniff_on_start=True,</span>    <span class="token comment" spellcheck="true">#                    sniff_on_connection_fail=True,</span>    <span class="token comment" spellcheck="true">#                    sniffer_timeout=60,</span>    <span class="token comment" spellcheck="true">#                    sniff_timeout=10</span>    <span class="token comment" spellcheck="true">#                    )</span>    actions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    workspace <span class="token operator">=</span> <span class="token string">'/Users/zhulingang/Desktop/json'</span>    files <span class="token operator">=</span> get_files_to_import<span class="token punctuation">(</span>workspace<span class="token punctuation">)</span>    id_num<span class="token punctuation">,</span> errors<span class="token punctuation">,</span> success <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>    <span class="token keyword">for</span> json <span class="token keyword">in</span> files<span class="token punctuation">:</span>        json <span class="token operator">=</span> workspace <span class="token operator">+</span> <span class="token string">'/'</span><span class="token operator">+</span>json        <span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%y-%m-%d %H:%M:%S'</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        this_file <span class="token operator">=</span> open<span class="token punctuation">(</span>json<span class="token punctuation">)</span>        <span class="token keyword">for</span> line <span class="token keyword">in</span> this_file<span class="token punctuation">:</span>            <span class="token keyword">if</span> line<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">',\n'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true">#读取的数据处理 假如每行最后有一个, 把逗号字符去除</span>                line<span class="token operator">=</span>line<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span>            action <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token string">"_index"</span><span class="token punctuation">:</span> <span class="token string">"test"</span><span class="token punctuation">,</span>                <span class="token string">"_type"</span><span class="token punctuation">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token string">"_id"</span><span class="token punctuation">:</span> id_num<span class="token punctuation">,</span>                <span class="token string">"_source"</span><span class="token punctuation">:</span> line            <span class="token punctuation">}</span>            id_num <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token comment" spellcheck="true"># if id_num == 900000:</span>            <span class="token comment" spellcheck="true">#     print("++++++++++++++++++++++")</span>            actions<span class="token punctuation">.</span>append<span class="token punctuation">(</span>action<span class="token punctuation">)</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>actions<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2000</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># print("======================")</span>                err<span class="token punctuation">,</span> suc <span class="token operator">=</span> helpers<span class="token punctuation">.</span>bulk<span class="token punctuation">(</span>es<span class="token punctuation">,</span> actions<span class="token punctuation">,</span> chunk_size<span class="token operator">=</span><span class="token number">2000</span><span class="token punctuation">,</span> raise_on_error<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> stats_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>                errors <span class="token operator">+=</span> err                success <span class="token operator">+=</span> suc                <span class="token keyword">del</span> actions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>len<span class="token punctuation">(</span>actions<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>actions<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            suc<span class="token punctuation">,</span> err <span class="token operator">=</span> helpers<span class="token punctuation">.</span>bulk<span class="token punctuation">(</span>es<span class="token punctuation">,</span> actions<span class="token punctuation">,</span> chunk_size<span class="token operator">=</span><span class="token number">2000</span><span class="token punctuation">,</span> raise_on_error<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> stats_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>            errors <span class="token operator">+=</span> err            success <span class="token operator">+=</span> suc            <span class="token keyword">del</span> actions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>len<span class="token punctuation">(</span>actions<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"finish process file:%s"</span> <span class="token operator">%</span> json<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">" down!\n success_num:\t %d"</span> <span class="token operator">%</span> success <span class="token operator">+</span> <span class="token string">" \n errors_num:\t %d"</span> <span class="token operator">%</span> errors<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="ES查看数据"><a href="#ES查看数据" class="headerlink" title="ES查看数据"></a>ES查看数据</h1><p>GET 索引名/文档类型/文档id</p><pre class="line-numbers language-json"><code class="language-json">GET /demo6/_doc/<span class="token number">20</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210514012944.png" alt></p><h1 id="ES数据修改"><a href="#ES数据修改" class="headerlink" title="ES数据修改"></a>ES数据修改</h1><p>put方式修改</p><pre class="line-numbers language-json"><code class="language-json">put /索引名/文档类型/文档Id<span class="token punctuation">{</span>  <span class="token property">"age"</span><span class="token operator">:</span><span class="token number">19</span><span class="token punctuation">,</span>(修改的新值<span class="token punctuation">)</span>  <span class="token property">"content"</span><span class="token operator">:</span><span class="token string">"1"</span>(修改的新值<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210514012959.png" alt></p><pre class="line-numbers language-json"><code class="language-json">PUT /demo6/_doc/<span class="token number">20</span><span class="token punctuation">{</span>  <span class="token property">"s.type"</span><span class="token operator">:</span><span class="token string">"uri"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>要注意的是，当只修改一个属性的时候，如果只填这个属性，其他属性的值会消失。</p><p>如</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210514013008.png" alt></p><p>s.value p.value 等属性消失。</p><p>Post 方式修改，当只修改一个属性，不会让其他属性消失。</p><pre class="line-numbers language-json"><code class="language-json">POST /索引名/文档类型/文档Id/_update<span class="token punctuation">{</span>    <span class="token property">"doc"</span><span class="token operator">:</span><span class="token punctuation">{</span>   <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"张三的名字叫李四"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210514013016.png" alt></p><pre class="line-numbers language-json"><code class="language-json">POST /demo6/_doc/<span class="token number">6</span>/_update<span class="token punctuation">{</span><span class="token property">"doc"</span><span class="token operator">:</span><span class="token punctuation">{</span>  <span class="token property">"s"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"u1u1"</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>POST /demo1/_doc/<span class="token number">1</span>/_update/<span class="token punctuation">{</span> <span class="token property">"doc"</span><span class="token operator">:</span><span class="token punctuation">{</span>  <span class="token property">"subj"</span><span class="token operator">:</span><span class="token string">"sas"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>假如属性值不存在 则会追加这个属性</p><h1 id="删除文档-amp-索引"><a href="#删除文档-amp-索引" class="headerlink" title="删除文档&amp;索引"></a>删除文档&amp;索引</h1><p><strong>删除索引</strong>：delete 索引名</p><p><strong>删除文档</strong>：delete 索引名/文档类型/文档id</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210514013024.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
