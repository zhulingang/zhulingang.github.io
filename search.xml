<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>菊花细粒度识别——NTS-Net模型详解</title>
      <link href="/2021/05/17/nts-net/"/>
      <url>/2021/05/17/nts-net/</url>
      
        <content type="html"><![CDATA[<h1 id="菊花细粒度识别——NTS-Net模型详解"><a href="#菊花细粒度识别——NTS-Net模型详解" class="headerlink" title="菊花细粒度识别——NTS-Net模型详解"></a>菊花细粒度识别——NTS-Net模型详解</h1><p>​    Nts-Net(Navigator-Teacher-Scrutinizer Network,Nts-Net)应用于细粒度图像识别中。NTS-Net 将整张图像以及那些具有能强烈表示类别特征的区域所提取 的特征进行融合，有利于细粒度图像识别。所以，NTS-Net 进行识别的关键是如何定位最具有语义信息的局部区域。</p><p>​    如NTS-Net的名字所示，模型主要由三个网络部分组成：Navigator、Teacher、Scrutinizer网络。</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210608210935.png" alt="image-20210608210928688"></p><p>​    Navigator 的作用是让整个模型关注最具判别性的区域，Navigator 通过预测图像各个区域的信息量，提取出最具判别性的局部区域。当图像输入 Navigator 网络后，Navigator 网络会根据不同的比例和尺寸产生一系列矩形信息区域，并根据信息丰富度 排序。最后取其中信息度最大的 <em>M</em> 个区域，随后从完整的图像中映射对应的区域，把它们按照规定的尺寸，提取特征并送入到 Teacher 网络中，得到这 <em>M</em> 个区域的置信度并排序。局部区域的信息度反映的是对物体细粒度分类的表征能力，如果对 Teacher网络中的置信度进行排序，区域置信度的排序应与信息度的排序一致。所以，我们可以计算区域信息度和置信度的一致性的损失值，来对 Navigator 网络进行训练和优化。</p><p>​    下图是Teacher网络和Navigator网络自监督机制示意图：</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210608211044.png" alt="image-20210608211043003"></p><p>​    需要注意的是：局部区域经过特征提取网络提取特征后送入Teacher网络，经Teacher网络的全连接层得到菊花分类向量，再与标签进行交叉熵得到置信度。</p><p>​    Navigator网络将信息度最大的K个区域送往Scrutinizer网络，Scrutinizer网络提取这些局部区域的特征，然后将全局图像的特征和局部区域的特征拼接，最后送入全连接层分类。</p><p>​    下图是NTS-Net的检测过程：</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210608211445.png" alt="image-20210608211443922"></p><p>需要注意的是：局部区域是根据特征图与全局图像的映射关系上采样得到的。</p><h2 id="核心代码理解："><a href="#核心代码理解：" class="headerlink" title="核心代码理解："></a>核心代码理解：</h2><h3 id="NTS-Net的网络代码：model-py"><a href="#NTS-Net的网络代码：model-py" class="headerlink" title="NTS-Net的网络代码：model.py"></a>NTS-Net的网络代码：model.py</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F<span class="token keyword">from</span> torch<span class="token punctuation">.</span>autograd <span class="token keyword">import</span> Variable<span class="token keyword">from</span> core <span class="token keyword">import</span> resnet<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> core<span class="token punctuation">.</span>anchors <span class="token keyword">import</span> generate_default_anchor_maps<span class="token punctuation">,</span> hard_nms<span class="token keyword">from</span> config <span class="token keyword">import</span> CAT_NUM<span class="token punctuation">,</span> PROPOSAL_NUMnum_class<span class="token operator">=</span><span class="token number">115</span><span class="token keyword">class</span> <span class="token class-name">ProposalNet</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#不同尺寸的特征图要在不同大小的特征图上采样，。Navigator 网络在不同尺度的全局特征图上抠取不同尺寸的候选框的局部特征图。尺度为48、96、192的局部区域应该分别在大小为14</span>    <span class="token comment" spellcheck="true"># ×14、7×7、4×4的特征图上抠取局部特征图</span>    <span class="token comment" spellcheck="true">#ProposalNet得到不同尺度的特征图</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>ProposalNet<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>down1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>down2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>down3 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>ReLU <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>tidy1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>tidy2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>tidy3 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        batch_size <span class="token operator">=</span> x<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        d1 <span class="token operator">=</span> self<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>self<span class="token punctuation">.</span>down1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        d2 <span class="token operator">=</span> self<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>self<span class="token punctuation">.</span>down2<span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">)</span>        d3 <span class="token operator">=</span> self<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>self<span class="token punctuation">.</span>down3<span class="token punctuation">(</span>d2<span class="token punctuation">)</span><span class="token punctuation">)</span>        t1 <span class="token operator">=</span> self<span class="token punctuation">.</span>tidy1<span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span>batch_size<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        t2 <span class="token operator">=</span> self<span class="token punctuation">.</span>tidy2<span class="token punctuation">(</span>d2<span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span>batch_size<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        t3 <span class="token operator">=</span> self<span class="token punctuation">.</span>tidy3<span class="token punctuation">(</span>d3<span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span>batch_size<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span> t2<span class="token punctuation">,</span> t3<span class="token punctuation">)</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">attention_net</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> topN<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>attention_net<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pretrained_model <span class="token operator">=</span> resnet<span class="token punctuation">.</span>resnet50<span class="token punctuation">(</span>pretrained<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#特征提取网络、使用的是预训练网络RestNet-50</span>        self<span class="token punctuation">.</span>pretrained_model<span class="token punctuation">.</span>avgpool <span class="token operator">=</span> nn<span class="token punctuation">.</span>AdaptiveAvgPool2d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pretrained_model<span class="token punctuation">.</span>fc <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">512</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">,</span> num_class<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>proposal_net <span class="token operator">=</span> ProposalNet<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>topN <span class="token operator">=</span> topN <span class="token comment" spellcheck="true">#topN为送往Teacher网络的局部区域数量</span>        self<span class="token punctuation">.</span>concat_net <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">2048</span> <span class="token operator">*</span> <span class="token punctuation">(</span>CAT_NUM <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> num_class<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#concat_net为Scrutinizer的全连接层，</span>                                                                    <span class="token comment" spellcheck="true"># 输入的是拼接后局部特征向量和全局向量的特征向量 输出菊花各个种类的概率</span>        self<span class="token punctuation">.</span>partcls_net <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">512</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">,</span> num_class<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#Teacher网络中的全连接层，输入经特征提取网络的局部区域的特征图，输出菊花分类向量</span>        _<span class="token punctuation">,</span> edge_anchors<span class="token punctuation">,</span> _ <span class="token operator">=</span> generate_default_anchor_maps<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pad_side <span class="token operator">=</span> <span class="token number">224</span>        self<span class="token punctuation">.</span>edge_anchors <span class="token operator">=</span> <span class="token punctuation">(</span>edge_anchors <span class="token operator">+</span> <span class="token number">224</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>int<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#产生候选框</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        resnet_out<span class="token punctuation">,</span> rpn_feature<span class="token punctuation">,</span> feature <span class="token operator">=</span> self<span class="token punctuation">.</span>pretrained_model<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#第一步先得到全局图像的特征图</span>        x_pad <span class="token operator">=</span> F<span class="token punctuation">.</span>pad<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>pad_side<span class="token punctuation">,</span> self<span class="token punctuation">.</span>pad_side<span class="token punctuation">,</span> self<span class="token punctuation">.</span>pad_side<span class="token punctuation">,</span> self<span class="token punctuation">.</span>pad_side<span class="token punctuation">)</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">'constant'</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>        batch <span class="token operator">=</span> x<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># we will reshape rpn to shape: batch * nb_anchor</span>        rpn_score <span class="token operator">=</span> self<span class="token punctuation">.</span>proposal_net<span class="token punctuation">(</span>rpn_feature<span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#继续下采样得到不同尺寸的特征图</span>        all_cdds <span class="token operator">=</span> <span class="token punctuation">[</span>            np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>edge_anchors<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> x <span class="token keyword">in</span> rpn_score<span class="token punctuation">.</span>data<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        top_n_cdds <span class="token operator">=</span> <span class="token punctuation">[</span>hard_nms<span class="token punctuation">(</span>x<span class="token punctuation">,</span> topn<span class="token operator">=</span>self<span class="token punctuation">.</span>topN<span class="token punctuation">,</span> iou_thresh<span class="token operator">=</span><span class="token number">0.25</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> all_cdds<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#候选框极大值抑制，保留topN个候选框</span>        top_n_cdds <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>top_n_cdds<span class="token punctuation">)</span>        top_n_index <span class="token operator">=</span> top_n_cdds<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>int<span class="token punctuation">)</span>        top_n_index <span class="token operator">=</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>top_n_index<span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>        top_n_index<span class="token operator">=</span>top_n_index<span class="token punctuation">.</span>long<span class="token punctuation">(</span><span class="token punctuation">)</span>        top_n_prob <span class="token operator">=</span> torch<span class="token punctuation">.</span>gather<span class="token punctuation">(</span>rpn_score<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> index<span class="token operator">=</span>top_n_index<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#top_n_prob为信息量</span>        part_imgs <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">[</span>batch<span class="token punctuation">,</span> self<span class="token punctuation">.</span>topN<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>batch<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>self<span class="token punctuation">.</span>topN<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token punctuation">[</span>y0<span class="token punctuation">,</span> x0<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x1<span class="token punctuation">]</span> <span class="token operator">=</span> top_n_cdds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>int<span class="token punctuation">)</span>                part_imgs<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> F<span class="token punctuation">.</span>interpolate<span class="token punctuation">(</span>x_pad<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> y0<span class="token punctuation">:</span>y1<span class="token punctuation">,</span> x0<span class="token punctuation">:</span>x1<span class="token punctuation">]</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">224</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">'bilinear'</span><span class="token punctuation">,</span>                                                      align_corners<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#上采样得到局部区域图像</span>        part_imgs <span class="token operator">=</span> part_imgs<span class="token punctuation">.</span>view<span class="token punctuation">(</span>batch <span class="token operator">*</span> self<span class="token punctuation">.</span>topN<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#part_imgs为所有局部区域图像</span>        _<span class="token punctuation">,</span> _<span class="token punctuation">,</span> part_features <span class="token operator">=</span> self<span class="token punctuation">.</span>pretrained_model<span class="token punctuation">(</span>part_imgs<span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#part_feartures为所有局部区域图的特征图</span>        part_feature <span class="token operator">=</span> part_features<span class="token punctuation">.</span>view<span class="token punctuation">(</span>batch<span class="token punctuation">,</span> self<span class="token punctuation">.</span>topN<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#变换维度</span>        part_feature <span class="token operator">=</span> part_feature<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span>CAT_NUM<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">.</span>contiguous<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#根据信息量选择前几个</span>        part_feature <span class="token operator">=</span> part_feature<span class="token punctuation">.</span>view<span class="token punctuation">(</span>batch<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#转换维度</span>        <span class="token comment" spellcheck="true"># concat_logits have the shape: B*200</span>        concat_out <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">[</span>part_feature<span class="token punctuation">,</span> feature<span class="token punctuation">]</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#将局部特征图与全局特征图进行拼接</span>        concat_logits <span class="token operator">=</span> self<span class="token punctuation">.</span>concat_net<span class="token punctuation">(</span>concat_out<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#concat_logits为全局和局部拼接后的特征分类向量</span>        raw_logits <span class="token operator">=</span> resnet_out        <span class="token comment" spellcheck="true"># part_logits have the shape: B*N*200</span>        part_logits <span class="token operator">=</span> self<span class="token punctuation">.</span>partcls_net<span class="token punctuation">(</span>part_features<span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span>batch<span class="token punctuation">,</span> self<span class="token punctuation">.</span>topN<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#raw_logits为原图的特征向量，concat为原图和局部区域生成的特征分类向量，part_logits为所有局部区域的分类特征向量</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>raw_logits<span class="token punctuation">,</span> concat_logits<span class="token punctuation">,</span> part_logits<span class="token punctuation">,</span> top_n_index<span class="token punctuation">,</span> top_n_prob<span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">list_loss</span><span class="token punctuation">(</span>logits<span class="token punctuation">,</span> targets<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#输入的是part_logits为局部区域的分类特征向量，targets为标签</span>    <span class="token comment" spellcheck="true">#TODO 计算置信度</span>    temp <span class="token operator">=</span> F<span class="token punctuation">.</span>log_softmax<span class="token punctuation">(</span>logits<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#softmax，相当于将相加总和1。log再对每个进行log计算，方便计算交叉熵</span>    loss <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>targets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>logits<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#计算交叉熵</span>    <span class="token keyword">return</span> torch<span class="token punctuation">.</span>stack<span class="token punctuation">(</span>loss<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#将loss中每个batch的loss拼接在一起</span><span class="token keyword">def</span> <span class="token function">ranking_loss</span><span class="token punctuation">(</span>score<span class="token punctuation">,</span> targets<span class="token punctuation">,</span> proposal_num<span class="token operator">=</span>PROPOSAL_NUM<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#输入score为top_n_prob，targets为part_loss</span>    <span class="token comment" spellcheck="true">#计算信息度和置信度的排序是否一致、Navigator的损失函数</span>    loss <span class="token operator">=</span> Variable<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    batch_size <span class="token operator">=</span> score<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>proposal_num<span class="token punctuation">)</span><span class="token punctuation">:</span>        targets_p <span class="token operator">=</span> <span class="token punctuation">(</span>targets <span class="token operator">></span> targets<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> i<span class="token punctuation">]</span><span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>type<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>FloatTensor<span class="token punctuation">)</span>        pivot <span class="token operator">=</span> score<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> i<span class="token punctuation">]</span><span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        loss_p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> pivot <span class="token operator">+</span> score<span class="token punctuation">)</span> <span class="token operator">*</span> targets_p        loss_p <span class="token operator">=</span> torch<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>loss_p<span class="token punctuation">)</span><span class="token punctuation">)</span>        loss <span class="token operator">+=</span> loss_p    <span class="token keyword">return</span> loss <span class="token operator">/</span> batch_size<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="训练过程：train-py"><a href="#训练过程：train-py" class="headerlink" title="训练过程：train.py"></a>训练过程：train.py</h3><pre class="line-numbers language-python"><code class="language-python">trainset <span class="token operator">=</span> data<span class="token punctuation">.</span>MyDataset<span class="token punctuation">(</span><span class="token string">'./CUB200/new_train.txt'</span><span class="token punctuation">,</span> transform<span class="token operator">=</span>transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>                                                transforms<span class="token punctuation">.</span>Resize<span class="token punctuation">(</span><span class="token number">448</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                                transforms<span class="token punctuation">.</span>RandomHorizontalFlip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                                transforms<span class="token punctuation">.</span>CenterCrop<span class="token punctuation">(</span><span class="token number">448</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                                transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                                transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span>mean<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0.485</span><span class="token punctuation">,</span> <span class="token number">0.456</span><span class="token punctuation">,</span> <span class="token number">0.406</span><span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0.229</span><span class="token punctuation">,</span> <span class="token number">0.224</span><span class="token punctuation">,</span> <span class="token number">0.225</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                                <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>trainloader <span class="token operator">=</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>trainset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">,</span>                                          shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> num_workers<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>testset <span class="token operator">=</span> data<span class="token punctuation">.</span>MyDataset<span class="token punctuation">(</span><span class="token string">'./CUB200/test.txt'</span><span class="token punctuation">,</span> transform<span class="token operator">=</span>transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>                                                transforms<span class="token punctuation">.</span>Resize<span class="token punctuation">(</span><span class="token number">448</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                                transforms<span class="token punctuation">.</span>CenterCrop<span class="token punctuation">(</span><span class="token number">448</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                                transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                                transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span>mean<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0.485</span><span class="token punctuation">,</span> <span class="token number">0.456</span><span class="token punctuation">,</span> <span class="token number">0.406</span><span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0.229</span><span class="token punctuation">,</span> <span class="token number">0.224</span><span class="token punctuation">,</span> <span class="token number">0.225</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                                <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>testloader <span class="token operator">=</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>testset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">,</span>                                         shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> num_workers<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># define model</span>net <span class="token operator">=</span> model_cuda<span class="token punctuation">.</span>attention_net<span class="token punctuation">(</span>topN<span class="token operator">=</span>PROPOSAL_NUM<span class="token punctuation">)</span><span class="token keyword">if</span> resume<span class="token punctuation">:</span>    ckpt <span class="token operator">=</span> torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span>resume<span class="token punctuation">)</span>    net<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>ckpt<span class="token punctuation">[</span><span class="token string">'net_state_dict'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    start_epoch <span class="token operator">=</span> ckpt<span class="token punctuation">[</span><span class="token string">'epoch'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>creterion <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># define optimizers</span>raw_parameters <span class="token operator">=</span> list<span class="token punctuation">(</span>net<span class="token punctuation">.</span>pretrained_model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>part_parameters <span class="token operator">=</span> list<span class="token punctuation">(</span>net<span class="token punctuation">.</span>proposal_net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>concat_parameters <span class="token operator">=</span> list<span class="token punctuation">(</span>net<span class="token punctuation">.</span>concat_net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>partcls_parameters <span class="token operator">=</span> list<span class="token punctuation">(</span>net<span class="token punctuation">.</span>partcls_net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>raw_optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>raw_parameters<span class="token punctuation">,</span> lr<span class="token operator">=</span>LR<span class="token punctuation">,</span> momentum<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span> weight_decay<span class="token operator">=</span>WD<span class="token punctuation">)</span>concat_optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>concat_parameters<span class="token punctuation">,</span> lr<span class="token operator">=</span>LR<span class="token punctuation">,</span> momentum<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span> weight_decay<span class="token operator">=</span>WD<span class="token punctuation">)</span>part_optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>part_parameters<span class="token punctuation">,</span> lr<span class="token operator">=</span>LR<span class="token punctuation">,</span> momentum<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span> weight_decay<span class="token operator">=</span>WD<span class="token punctuation">)</span>partcls_optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>partcls_parameters<span class="token punctuation">,</span> lr<span class="token operator">=</span>LR<span class="token punctuation">,</span> momentum<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span> weight_decay<span class="token operator">=</span>WD<span class="token punctuation">)</span>schedulers <span class="token operator">=</span> <span class="token punctuation">[</span>MultiStepLR<span class="token punctuation">(</span>raw_optimizer<span class="token punctuation">,</span> milestones<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">,</span> gamma<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              MultiStepLR<span class="token punctuation">(</span>concat_optimizer<span class="token punctuation">,</span> milestones<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">,</span> gamma<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              MultiStepLR<span class="token punctuation">(</span>part_optimizer<span class="token punctuation">,</span> milestones<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">,</span> gamma<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              MultiStepLR<span class="token punctuation">(</span>partcls_optimizer<span class="token punctuation">,</span> milestones<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">,</span> gamma<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>net <span class="token operator">=</span> net<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>net <span class="token operator">=</span> DataParallel<span class="token punctuation">(</span>net<span class="token punctuation">)</span><span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span>start_epoch<span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># begin training</span>    _print<span class="token punctuation">(</span><span class="token string">'--'</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>    net<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> data <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>trainloader<span class="token punctuation">)</span><span class="token punctuation">:</span>        img<span class="token punctuation">,</span> label <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>        niter <span class="token operator">=</span> epoch <span class="token operator">*</span> len<span class="token punctuation">(</span>trainloader<span class="token punctuation">)</span> <span class="token operator">+</span> i        batch_size <span class="token operator">=</span> img<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        raw_optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        part_optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        concat_optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        partcls_optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># raw_logits为原图的分类特征向量，concat为原图和局部区域生成的特征向量，part_logits为局部区域的分类特征向量</span>        raw_logits<span class="token punctuation">,</span> concat_logits<span class="token punctuation">,</span> part_logits<span class="token punctuation">,</span> _<span class="token punctuation">,</span> top_n_prob <span class="token operator">=</span> net<span class="token punctuation">(</span>img<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#part_loss计算置信度</span>        part_loss <span class="token operator">=</span> model_cuda<span class="token punctuation">.</span>list_loss<span class="token punctuation">(</span>part_logits<span class="token punctuation">.</span>view<span class="token punctuation">(</span>batch_size <span class="token operator">*</span> PROPOSAL_NUM<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                         label<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>repeat<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> PROPOSAL_NUM<span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span>batch_size<span class="token punctuation">,</span> PROPOSAL_NUM<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#raw_loss是原图的特征分类向量与正确类别的交叉熵</span>        raw_loss <span class="token operator">=</span> creterion<span class="token punctuation">(</span>raw_logits<span class="token punctuation">,</span> label<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#是合并特征经全连接层输出的特征分类向量与正确类别的交叉熵</span>        concat_loss <span class="token operator">=</span> creterion<span class="token punctuation">(</span>concat_logits<span class="token punctuation">,</span> label<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#Scrutinizer损失值</span>        <span class="token comment" spellcheck="true">#top_n_prob为信息量，part_loss为置信度</span>        rank_loss <span class="token operator">=</span> model_cuda<span class="token punctuation">.</span>ranking_loss<span class="token punctuation">(</span>top_n_prob<span class="token punctuation">,</span> part_loss<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#navigator网络损失，比较信息度和置信度排序，计算损失值</span>        <span class="token comment" spellcheck="true">#为为局部区域的分类特征向量与正确类别的交叉熵</span>        partcls_loss <span class="token operator">=</span> creterion<span class="token punctuation">(</span>part_logits<span class="token punctuation">.</span>view<span class="token punctuation">(</span>batch_size <span class="token operator">*</span> PROPOSAL_NUM<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                 label<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>repeat<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> PROPOSAL_NUM<span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#局部区域的损失值，即Teacher网络=局部区域+整个图像</span>        total_loss <span class="token operator">=</span> raw_loss <span class="token operator">+</span> rank_loss <span class="token operator">+</span> concat_loss <span class="token operator">+</span> partcls_loss        total_loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>        raw_optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        part_optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        concat_optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        partcls_optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        writer1<span class="token punctuation">.</span>add_scalars<span class="token punctuation">(</span><span class="token string">'Train_loss'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'train_loss'</span><span class="token punctuation">:</span> total_loss<span class="token punctuation">.</span>data<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> niter<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#        progress_bar(i, len(trainloader), 'train')</span>    <span class="token comment" spellcheck="true">#调整学习率   </span>    <span class="token keyword">for</span> scheduler <span class="token keyword">in</span> schedulers<span class="token punctuation">:</span>        scheduler<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实验过程使用的预训练模型为RestNet-50，完整的代码可以去我的GitHub上<a href="https://github.com/zhulingang/NTS-Net" target="_blank" rel="noopener">NTS-Net</a>上查看。</p>]]></content>
      
      
      <categories>
          
          <category> 图像识别 </category>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 细粒度图像识别 </tag>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客部署Gitalk评论踩坑</title>
      <link href="/2021/05/17/hexo-gitalk/"/>
      <url>/2021/05/17/hexo-gitalk/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo博客部署Gitalk评论踩坑"><a href="#Hexo博客部署Gitalk评论踩坑" class="headerlink" title="Hexo博客部署Gitalk评论踩坑"></a>Hexo博客部署Gitalk评论踩坑</h1><p>算了算自己瞎折腾好久，查了好久的百度都没能解决，最后在Google和Github上找到了正确的方案。只能说Github yyds～</p><h2 id="在OAuth已搭建Gitalk"><a href="#在OAuth已搭建Gitalk" class="headerlink" title="在OAuth已搭建Gitalk"></a>在OAuth已搭建Gitalk</h2><p>搭建步骤可自行百度，主要搭建完毕之后的后续步骤坑较大</p><h2 id="起因：Request-failed-with-status-code-403"><a href="#起因：Request-failed-with-status-code-403" class="headerlink" title="起因：Request failed with status code 403"></a>起因：Request failed with status code 403</h2><p>一直不明白这个原因是怎么造成的<img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210517022318.jpg" alt="2211621189354_.pic"></p><p>最后参考了这篇博客<a href="https://cuiqingcai.com/30010.html" target="_blank" rel="noopener">Gitalk 评论登录 403 问题解决</a></p><p>原因是：主题模版中的cors-anywhere反向代理已不支持直接使用，Gitalk的默认proxy为</p><pre><code>Default: https://cors-anywhere.herokuapp.com/https://github.com/login/oauth/access_token.</code></pre><p>所以在代理访问Github时会直接forbidden。参考博客中，对403出现的原因做了详细说明</p><h2 id="解决403"><a href="#解决403" class="headerlink" title="解决403"></a>解决403</h2><p>博主的做法是：更换反向代理，直接白嫖别人代理。我也参照了博主的做法</p><p>我的博客主题是matery，所以在/thems/matery/_config.yml里添加自己定义的proxy</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">gitalk</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span>   <span class="token key atrule">owner</span><span class="token punctuation">:</span>   <span class="token key atrule">repo</span><span class="token punctuation">:</span>   <span class="token key atrule">oauth</span><span class="token punctuation">:</span>    <span class="token key atrule">clientId</span><span class="token punctuation">:</span>     <span class="token key atrule">clientSecret</span><span class="token punctuation">:</span>   <span class="token key atrule">admin</span><span class="token punctuation">:</span>   <span class="token key atrule">proxy</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//netnr<span class="token punctuation">-</span>proxy.cloudno.de/https<span class="token punctuation">:</span>//github.com/login/oauth/access_token<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="出先新问题429"><a href="#出先新问题429" class="headerlink" title="出先新问题429"></a>出先新问题429</h2><p>但是会出现新的问题，Code：429</p><p>429的含义是收到了太多的请求，一开始还没意识到白嫖代理的问题，一直在想429就该怎么解决。知道后来才恍然大悟，我会白嫖，许多人也会白嫖，这个代理很多人都会使用，但是使用次数有限制，就会造成过多的人使用请求。</p><p>最后在Github的<a href="https://github.com/gitalk/gitalk/issues/429" target="_blank" rel="noopener">Gitalk后出现403错误</a>讨论上搜到了比较简单的解决方案，自己部署反向代理。</p><h2 id="自己部署反向代理"><a href="#自己部署反向代理" class="headerlink" title="自己部署反向代理"></a>自己部署反向代理</h2><p>十分感谢Github上的问题讨论，为我提供了比较便捷的解决方案。虽然许多朋友都是白嫖别人代码的哈哈哈，我也想白嫖，但是我都耗在这个问题这么久了，不彻底解决不甘心啊。</p><p>于是参考了另一篇博客<a href="https://www.chenhanpeng.com/create-own-cors-anywhere-to-resolve-the-request-with-403/" target="_blank" rel="noopener">在cloudflare上创建一个免费的在线代理来解决gitalk授权登录报403问题</a></p><p>首先创建自己的一个ClOUDFLARE账号  点击<a href="https://dash.cloudflare.com/login" target="_blank" rel="noopener">CLOUDFLARE注册</a></p><p>选择Workers，创建免费的Workers</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210517025103.png" alt="image-20210517025101581"></p><p>免费版只有10w次请求，但是个人使用足以，填写二级域名后就可以创建完成。</p><p>随后：</p><ol><li><p>将脚本代码删除</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210517025939.png" alt="image-20210517025842965"></p></li></ol><ol start="2"><li><p>进入Zibri大佬的Github的repo中<a href="https://github.com/Zibri/cloudflare-cors-anywhere" target="_blank" rel="noopener">cloudflare-cors-anywhere</a>复制index.js的内容到脚本文件中</p><p>我看许多人的index.js都是参考他的，我是直接复制参考博主的index.js  指路<a href="https://github.com/Hanpeng-Chen/cloudflare-cors-anywhere" target="_blank" rel="noopener">博主仓库</a></p></li><li><p>保存并部署，复制自己的域名</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210517030725.png" alt="image-20210517030524711"></p></li></ol><ol start="4"><li><p>修改_config.yml里的proxy</p><p>将上述复制的值，作为proxy</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210517030720.png" alt="image-20210517030719157"></p><p>一定要注意连接的地方，要加?,不然会出现no access token的错误</p></li><li><p>最后重新部署博客，搞定</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210517030933.png" alt="image-20210517030931909"></p></li></ol><h2 id="出现Error-Validation-Failed"><a href="#出现Error-Validation-Failed" class="headerlink" title="出现Error: Validation Failed."></a>出现Error: Validation Failed.</h2><p>原因文章对应的 URL 过长，修改文件名长度，建议用英文，不然中文很容易太长</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210517033739.png" alt="image-20210517033737893"></p><p>Github真的yyds，上面有好多百度不到的问题解决方案，所以还是练好英文，多看看Google和Github吧～～终于解决问题了，可以睡个好觉了，现在是凌晨3：38.</p>]]></content>
      
      
      <categories>
          
          <category> 服务部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> Gitalk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>菊花细粒度识别模型可视化软件</title>
      <link href="/2021/05/13/chrysanthemum/"/>
      <url>/2021/05/13/chrysanthemum/</url>
      
        <content type="html"><![CDATA[<h1 id="菊花细粒度识别模型可视化软件"><a href="#菊花细粒度识别模型可视化软件" class="headerlink" title="菊花细粒度识别模型可视化软件"></a>菊花细粒度识别模型可视化软件</h1><h2 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h2><ul><li>Python==3.7</li><li>torch==1.7.0</li><li>Pyqt5 </li></ul><h2 id="软件使用"><a href="#软件使用" class="headerlink" title="软件使用"></a>软件使用</h2><ol><li><p>图片初始打开路径修改</p><p>由于系统原因，需要修改系统路径，在main.py中修改</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210514171323.png" alt="image-20210514171317547"></p></li></ol><ol start="2"><li><p>运行main.py</p><ul><li>选择图像</li></ul><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210514171528.png" alt="image-20210514171526587"></p><ul><li><p>选择识别模型</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210514171802.png" alt="image-20210514171647046"></p></li><li><p>开始识别</p></li><li><p>查看识别过程</p><p>识别过程图片会保存在当前目录的NTSfeautures和BCNNfeautures目录下</p></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 图像识别 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Es学习</title>
      <link href="/2020/11/12/es-study/"/>
      <url>/2020/11/12/es-study/</url>
      
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210514012832.png" alt="image-20201017094844293"></p><h1 id="ES查询"><a href="#ES查询" class="headerlink" title="ES查询"></a>ES查询</h1><h2 id="filter-DSL和query-DSL"><a href="#filter-DSL和query-DSL" class="headerlink" title="filter DSL和query DSL"></a>filter DSL和query DSL</h2><ul><li><p>filter DSL</p><p>在过滤器上下文中，查询会回答这个问题——“这个文档匹不匹配？”</p></li></ul><p>答案很简单，是或者不是。它不会去计算任何分值，也不会关心返回的排序问题，因此效率会高一点。</p><p>过滤上下文 是在使用filter参数时候的执行环境</p><ul><li><p>query DSL</p><p>在查询上下文中，查询会回答这个问题——“这个文档匹不匹配这个查询，它的相关度高么？”</p><p>如何验证匹配很好理解，如何计算相关度呢？ES中索引的数据都会存储一个_score分值，分值越高就代表越匹配。另外关于某个搜索的分值计算还是很复杂的，因此也需要一定的时间。</p></li></ul><h2 id="精确查找"><a href="#精确查找" class="headerlink" title="精确查找"></a>精确查找</h2><p>想要精确匹配一个字段,属性为keyword</p><ul><li><p>term方法</p><p>term是代表完全匹配，即不进行分词器分析，文档中必须包含整个搜索的词汇。主要用于精确匹配哪些值，比如数字，日期，布尔值或 not_analyzed 的字符串</p><p>term 必须对应 keyword的属性，不然查询不出，所谓keyword就是必须完全匹配，text可以模糊查询</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210514012843.png" alt="image-20201024141941130"></p><p>如果仅用s.value 查询不出，因为s.value是text属性，</p></li><li><p>match</p><p>match查询会先对搜索词进行分词,分词完毕后再逐个对分词结果进行匹配，因此相比于term的精确搜索.</p><p>match 是queryDSL</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210514012852.png" alt="image-20201024143455482"></p></li></ul><h2 id="term"><a href="#term" class="headerlink" title="term"></a>term</h2><p>term是代表完全匹配，即不进行分词器分析，文档中必须包含整个搜索的词汇。主要用于精确匹配哪些值，比如数字，日期，布尔值或 not_analyzed 的字符串</p><h2 id="terms"><a href="#terms" class="headerlink" title="terms"></a>terms</h2><p>terms 跟 term 有点类似，但 terms 允许指定多个匹配条件。 如果某个字段指定了多个值，那么文档需要一起去做匹配：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>“terms”<span class="token operator">:</span> <span class="token punctuation">{</span>“tag”<span class="token operator">:</span> <span class="token punctuation">[</span> “search”<span class="token punctuation">,</span> “full_text”<span class="token punctuation">,</span> “nosql” <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="range-过滤"><a href="#range-过滤" class="headerlink" title="range 过滤"></a>range 过滤</h2><p>ange过滤允许我们按照指定范围查找一批数据：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>“range”<span class="token operator">:</span> <span class="token punctuation">{</span>“age”<span class="token operator">:</span> <span class="token punctuation">{</span>“gte”<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>“lt”<span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>范围操作符包含：</p><p>gt :: 大于<br>gte:: 大于等于<br>lt :: 小于<br>lte:: 小于等于</p><h2 id="exists-和-missing-过滤"><a href="#exists-和-missing-过滤" class="headerlink" title="exists 和 missing 过滤"></a>exists 和 missing 过滤</h2><p>exists 和 missing 过滤可以用于查找文档中是否包含指定字段或没有某个字段，类似于SQL语句中的IS_NULL条件.这两个过滤只是针对已经查出一批数据来，但是想区分出某个字段是否存在的时候使用。</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>“exists”<span class="token operator">:</span> <span class="token punctuation">{</span>“field”<span class="token operator">:</span> “title”<span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="bool-过滤"><a href="#bool-过滤" class="headerlink" title="bool 过滤"></a>bool 过滤</h2><p>bool 过滤可以用来合并多个过滤条件查询结果的布尔逻辑，它包含一下操作符：</p><p>must :: 多个查询条件的完全匹配,相当于 and。<br>must_not :: 多个查询条件的相反匹配，相当于 not。<br>should :: 至少有一个查询条件匹配, 相当于 or。<br>这些参数可以分别继承一个过滤条件或者一个过滤条件的数组：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>“bool”<span class="token operator">:</span> <span class="token punctuation">{</span>“must”<span class="token operator">:</span> <span class="token punctuation">{</span> “term”<span class="token operator">:</span> <span class="token punctuation">{</span> “folder”<span class="token operator">:</span> “inbox” <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>“must_not”<span class="token operator">:</span> <span class="token punctuation">{</span> “term”<span class="token operator">:</span> <span class="token punctuation">{</span> “tag”<span class="token operator">:</span> “spam” <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>“should”<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> “term”<span class="token operator">:</span> <span class="token punctuation">{</span> “starred”<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span> “term”<span class="token operator">:</span> <span class="token punctuation">{</span> “unread”<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="match-all-查询"><a href="#match-all-查询" class="headerlink" title="match_all 查询"></a>match_all 查询</h2><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>“match_all”<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="match-查询"><a href="#match-查询" class="headerlink" title="match 查询"></a>match 查询</h2><p>match查询会先对搜索词进行分词,分词完毕后再逐个对分词结果进行匹配.它会在真正查询之前用分析器先分析match一下查询字符：</p><p>例如查询和”我的宝马多少马力”这个查询语句匹配的文档。</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"content"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"query"</span> <span class="token operator">:</span> <span class="token string">"我的宝马多少马力"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的查询匹配就会进行分词，比如”宝马多少马力”会被分词为”宝马 多少 马力”, 所有有关”宝马 多少 马力”, 那么所有包含这三个词中的一个或多个的文档就会被搜索出来。<br>并且根据lucene的评分机制(TF/IDF)来进行评分。</p><h2 id="multi-match-查询"><a href="#multi-match-查询" class="headerlink" title="multi_match 查询"></a>multi_match 查询</h2><p>如果我们希望两个字段进行匹配，其中一个字段有这个文档就满足的话，使用multi_match</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"multi_match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"query"</span> <span class="token operator">:</span> <span class="token string">"我的宝马多少马力"</span><span class="token punctuation">,</span>        <span class="token property">"fields"</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"title"</span><span class="token punctuation">,</span> <span class="token string">"content"</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="match-phrase"><a href="#match-phrase" class="headerlink" title="match_phrase"></a>match_phrase</h2><p>比如上面一个例子，一个文档”我的保时捷马力不错”也会被搜索出来，那么想要精确匹配所有同时包含”宝马 多少 马力”的文档怎么做？就要使用 match_phrase 了</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"match_phrase"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"content"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"query"</span> <span class="token operator">:</span> <span class="token string">"我的宝马多少马力"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完全匹配可能比较严，我们会希望有个可调节因子，少匹配一个也满足，那就需要使用到slop。</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"match_phrase"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"content"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"query"</span> <span class="token operator">:</span> <span class="token string">"我的宝马多少马力"</span><span class="token punctuation">,</span>            <span class="token property">"slop"</span> <span class="token operator">:</span> <span class="token number">1</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="通配符查询"><a href="#通配符查询" class="headerlink" title="通配符查询"></a>通配符查询</h2><ul><li><p>wildcards 查询</p><p>查询能够匹配包含W1F 7HW和W2F 8HW的文档：</p></li></ul><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>“query”<span class="token operator">:</span> <span class="token punctuation">{</span>“wildcard”<span class="token operator">:</span> <span class="token punctuation">{</span>“postcode”<span class="token operator">:</span> “W?F*HW”<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token punctuation">{</span>“query”<span class="token operator">:</span> <span class="token punctuation">{</span>“wildcard”<span class="token operator">:</span> <span class="token punctuation">{</span>“hostname”<span class="token operator">:</span> “wxopen*”<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>regexp 查询</li></ul><p>您只想匹配以W开头，紧跟着数字的邮政编码。使用regexp查询能够让你写下更复杂的模式：</p><pre class="line-numbers language-jsom"><code class="language-jsom">{“query”: {“regexp”: {“postcode”: “W[0-9].+”}}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所有以 wxopen 开头的正则</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>“query”<span class="token operator">:</span> <span class="token punctuation">{</span>“regexp”<span class="token operator">:</span> <span class="token punctuation">{</span>“hostname”<span class="token operator">:</span> “wxopen.*”<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Nested查询"><a href="#Nested查询" class="headerlink" title="Nested查询"></a>Nested查询</h2><p>结构</p><pre class="line-numbers language-json"><code class="language-json">PUT /blog_new<span class="token punctuation">{</span>  <span class="token property">"mappings"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"blog"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"title"</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"body"</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"tags"</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"published_on"</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"comments"</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"nested"</span><span class="token punctuation">,</span>          <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"comment"</span><span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"age"</span><span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"short"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"rating"</span><span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"short"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"commented_on"</span><span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询评论字段中评论姓名=William并且评论age=34的blog信息。</p><pre class="line-numbers language-json"><code class="language-json">GET /blog_new/_search?pretty<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"bool"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"must"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token property">"nested"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"comments"</span><span class="token punctuation">,</span>            <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token property">"bool"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"must"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                  <span class="token punctuation">{</span>                    <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                      <span class="token property">"comments.name"</span><span class="token operator">:</span> <span class="token string">"William"</span>                    <span class="token punctuation">}</span>                  <span class="token punctuation">}</span><span class="token punctuation">,</span>                  <span class="token punctuation">{</span>                    <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                      <span class="token property">"comments.age"</span><span class="token operator">:</span> <span class="token number">34</span>                    <span class="token punctuation">}</span>                  <span class="token punctuation">}</span>                <span class="token punctuation">]</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="ES创建索引"><a href="#ES创建索引" class="headerlink" title="ES创建索引"></a>ES创建索引</h1><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210514012904.png" alt="image-20201024152731520"></p><p>Post 方法，tt3为index，zlg为类型_type</p><pre class="line-numbers language-json"><code class="language-json">POST /tt3/zlg<span class="token punctuation">{</span><span class="token property">"mappings"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"subj"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token property">"height"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"integer"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token property">"weight"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"integer"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token property">"po"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"nested"</span><span class="token punctuation">,</span><span class="token property">"properties"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"pred"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"keyword"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token property">"obj"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"keyword"</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>PUT方法</p><p>类型为_doc</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210514012913.png" alt="image-20201024152930767"></p><pre class="line-numbers language-json"><code class="language-json">PUT /tt1<span class="token punctuation">{</span><span class="token property">"mappings"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"subj"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token property">"height"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"integer"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token property">"weight"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"integer"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token property">"po"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"nested"</span><span class="token punctuation">,</span><span class="token property">"properties"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"pred"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"keyword"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token property">"obj"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"keyword"</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="ES添加文档（数据）"><a href="#ES添加文档（数据）" class="headerlink" title="ES添加文档（数据）"></a>ES添加文档（数据）</h1><p>POST 或PUT</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210514012919.png" alt="image-20201024155701063"></p><p>demo1为index，_doc为类型，3位id，id可以省略（省略就系统自动生成)</p><pre class="line-numbers language-json"><code class="language-json">POST demo1/_doc/<span class="token number">3</span><span class="token punctuation">{</span>    <span class="token property">"subj"</span><span class="token operator">:</span> <span class="token string">"qj"</span><span class="token punctuation">,</span>    <span class="token property">"weight"</span><span class="token operator">:</span> <span class="token number">111</span><span class="token punctuation">,</span>    <span class="token property">"height"</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>    <span class="token property">"po"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>               <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"pred"</span><span class="token operator">:</span> <span class="token string">"爱好"</span><span class="token punctuation">,</span>                <span class="token property">"obj"</span><span class="token operator">:</span> <span class="token string">"tv"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"pred"</span><span class="token operator">:</span> <span class="token string">"性别"</span><span class="token punctuation">,</span>                <span class="token property">"obj"</span><span class="token operator">:</span> <span class="token string">"男"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>批量插入需要id，命令行使用_bulk命令</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210514012930.png" alt="image-20201024160402045"></p><p>/index/type/_bulk </p><p>跟上id，再跟里面的数据。</p><pre class="line-numbers language-json"><code class="language-json">POST /demo6/_doc/_bulk<span class="token punctuation">{</span><span class="token property">"index"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"_id"</span><span class="token operator">:</span><span class="token string">"20"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span> <span class="token property">"s"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"uri"</span><span class="token punctuation">,</span> <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"hnmb-01OrQN70"</span> <span class="token punctuation">}</span>  <span class="token punctuation">,</span> <span class="token property">"p"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"uri"</span><span class="token punctuation">,</span> <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"P1_1"</span> <span class="token punctuation">}</span>   <span class="token punctuation">,</span> <span class="token property">"o"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"literal"</span><span class="token punctuation">,</span> <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"浏阳古乐应鼓"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token property">"index"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"_id"</span><span class="token operator">:</span><span class="token string">"21"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span> <span class="token property">"s"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"uri"</span><span class="token punctuation">,</span> <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"hnmb-01OrQN70"</span> <span class="token punctuation">}</span>  <span class="token punctuation">,</span> <span class="token property">"p"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"uri"</span><span class="token punctuation">,</span> <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"P2_12"</span> <span class="token punctuation">}</span>  <span class="token punctuation">,</span> <span class="token property">"o"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"uri"</span><span class="token punctuation">,</span> <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"文物"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>python 批量插入，读取每行的json数据，处理后构建插入的数据_source，然后自动生成id，组成action</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> os<span class="token keyword">from</span> elasticsearch <span class="token keyword">import</span> Elasticsearch<span class="token keyword">from</span> elasticsearch <span class="token keyword">import</span> helpers<span class="token keyword">def</span> <span class="token function">get_files_to_import</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>    f_list <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    files_ <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> f_list<span class="token punctuation">:</span>        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>splitext<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.json'</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>            files_<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">return</span> files_<span class="token comment" spellcheck="true"># es = Elasticsearch('http://elastic:One4all4one@es-cn-mp90kb1bx0019j3cc.elasticsearch.aliyuncs.com:443')</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 默认不开启嗅探功能 es = Elasticsearch()</span>    es <span class="token operator">=</span> Elasticsearch<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># es = Elasticsearch(["***:9200", "***:9200"],</span>    <span class="token comment" spellcheck="true">#                    sniff_on_start=True,</span>    <span class="token comment" spellcheck="true">#                    sniff_on_connection_fail=True,</span>    <span class="token comment" spellcheck="true">#                    sniffer_timeout=60,</span>    <span class="token comment" spellcheck="true">#                    sniff_timeout=10</span>    <span class="token comment" spellcheck="true">#                    )</span>    actions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    workspace <span class="token operator">=</span> <span class="token string">'/Users/zhulingang/Desktop/json'</span>    files <span class="token operator">=</span> get_files_to_import<span class="token punctuation">(</span>workspace<span class="token punctuation">)</span>    id_num<span class="token punctuation">,</span> errors<span class="token punctuation">,</span> success <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>    <span class="token keyword">for</span> json <span class="token keyword">in</span> files<span class="token punctuation">:</span>        json <span class="token operator">=</span> workspace <span class="token operator">+</span> <span class="token string">'/'</span><span class="token operator">+</span>json        <span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%y-%m-%d %H:%M:%S'</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        this_file <span class="token operator">=</span> open<span class="token punctuation">(</span>json<span class="token punctuation">)</span>        <span class="token keyword">for</span> line <span class="token keyword">in</span> this_file<span class="token punctuation">:</span>            <span class="token keyword">if</span> line<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">',\n'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true">#读取的数据处理 假如每行最后有一个, 把逗号字符去除</span>                line<span class="token operator">=</span>line<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span>            action <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token string">"_index"</span><span class="token punctuation">:</span> <span class="token string">"test"</span><span class="token punctuation">,</span>                <span class="token string">"_type"</span><span class="token punctuation">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token string">"_id"</span><span class="token punctuation">:</span> id_num<span class="token punctuation">,</span>                <span class="token string">"_source"</span><span class="token punctuation">:</span> line            <span class="token punctuation">}</span>            id_num <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token comment" spellcheck="true"># if id_num == 900000:</span>            <span class="token comment" spellcheck="true">#     print("++++++++++++++++++++++")</span>            actions<span class="token punctuation">.</span>append<span class="token punctuation">(</span>action<span class="token punctuation">)</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>actions<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2000</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># print("======================")</span>                err<span class="token punctuation">,</span> suc <span class="token operator">=</span> helpers<span class="token punctuation">.</span>bulk<span class="token punctuation">(</span>es<span class="token punctuation">,</span> actions<span class="token punctuation">,</span> chunk_size<span class="token operator">=</span><span class="token number">2000</span><span class="token punctuation">,</span> raise_on_error<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> stats_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>                errors <span class="token operator">+=</span> err                success <span class="token operator">+=</span> suc                <span class="token keyword">del</span> actions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>len<span class="token punctuation">(</span>actions<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>actions<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            suc<span class="token punctuation">,</span> err <span class="token operator">=</span> helpers<span class="token punctuation">.</span>bulk<span class="token punctuation">(</span>es<span class="token punctuation">,</span> actions<span class="token punctuation">,</span> chunk_size<span class="token operator">=</span><span class="token number">2000</span><span class="token punctuation">,</span> raise_on_error<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> stats_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>            errors <span class="token operator">+=</span> err            success <span class="token operator">+=</span> suc            <span class="token keyword">del</span> actions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>len<span class="token punctuation">(</span>actions<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"finish process file:%s"</span> <span class="token operator">%</span> json<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">" down!\n success_num:\t %d"</span> <span class="token operator">%</span> success <span class="token operator">+</span> <span class="token string">" \n errors_num:\t %d"</span> <span class="token operator">%</span> errors<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="ES查看数据"><a href="#ES查看数据" class="headerlink" title="ES查看数据"></a>ES查看数据</h1><p>GET 索引名/文档类型/文档id</p><pre class="line-numbers language-json"><code class="language-json">GET /demo6/_doc/<span class="token number">20</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210514012944.png" alt="image-20201024161227999"></p><h1 id="ES数据修改"><a href="#ES数据修改" class="headerlink" title="ES数据修改"></a>ES数据修改</h1><p>put方式修改</p><pre class="line-numbers language-json"><code class="language-json">put /索引名/文档类型/文档Id<span class="token punctuation">{</span>  <span class="token property">"age"</span><span class="token operator">:</span><span class="token number">19</span><span class="token punctuation">,</span>(修改的新值<span class="token punctuation">)</span>  <span class="token property">"content"</span><span class="token operator">:</span><span class="token string">"1"</span>(修改的新值<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210514012959.png" alt="image-20201024161804421"></p><pre class="line-numbers language-json"><code class="language-json">PUT /demo6/_doc/<span class="token number">20</span><span class="token punctuation">{</span>  <span class="token property">"s.type"</span><span class="token operator">:</span><span class="token string">"uri"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>要注意的是，当只修改一个属性的时候，如果只填这个属性，其他属性的值会消失。</p><p>如</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210514013008.png" alt="image-20201024162138531"></p><p>s.value p.value 等属性消失。</p><p>Post 方式修改，当只修改一个属性，不会让其他属性消失。</p><pre class="line-numbers language-json"><code class="language-json">POST /索引名/文档类型/文档Id/_update<span class="token punctuation">{</span>    <span class="token property">"doc"</span><span class="token operator">:</span><span class="token punctuation">{</span>   <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"张三的名字叫李四"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210514013016.png" alt="image-20201024164249470"></p><pre class="line-numbers language-json"><code class="language-json">POST /demo6/_doc/<span class="token number">6</span>/_update<span class="token punctuation">{</span><span class="token property">"doc"</span><span class="token operator">:</span><span class="token punctuation">{</span>  <span class="token property">"s"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"u1u1"</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>POST /demo1/_doc/<span class="token number">1</span>/_update/<span class="token punctuation">{</span> <span class="token property">"doc"</span><span class="token operator">:</span><span class="token punctuation">{</span>  <span class="token property">"subj"</span><span class="token operator">:</span><span class="token string">"sas"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>假如属性值不存在 则会追加这个属性</p><h1 id="删除文档-amp-索引"><a href="#删除文档-amp-索引" class="headerlink" title="删除文档&amp;索引"></a>删除文档&amp;索引</h1><p><strong>删除索引</strong>：delete 索引名</p><p><strong>删除文档</strong>：delete 索引名/文档类型/文档id</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210514013024.png" alt="image-20201024164459110"></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
