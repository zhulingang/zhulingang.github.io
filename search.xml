<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Mybatis-Plus增删查改操作</title>
      <link href="/2021/06/29/mybatis-plus/"/>
      <url>/2021/06/29/mybatis-plus/</url>
      
        <content type="html"><![CDATA[<h1 id="Mybatis-Plus增删查改操作"><a href="#Mybatis-Plus增删查改操作" class="headerlink" title="Mybatis-Plus增删查改操作"></a>Mybatis-Plus增删查改操作</h1><h2 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h2><p>增加操作由于Mybatis-plus已经封装好了，所以直接可以调用service层的save函数,或者mapper层的insert函数</p><h3 id="service层"><a href="#service层" class="headerlink" title="service层"></a>service层</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//service层包装了几个方法</span>    <span class="token keyword">boolean</span> <span class="token function">save</span><span class="token punctuation">(</span>T entity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//保存一个</span>      <span class="token keyword">boolean</span> <span class="token function">saveOrUpdate</span><span class="token punctuation">(</span>T entity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//更新或者插入，有主键存在就执行更新，如果没有主键就执行插入，批量</span>    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>        rollbackFor <span class="token operator">=</span> <span class="token punctuation">{</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span>    <span class="token punctuation">)</span>    <span class="token keyword">default</span> <span class="token keyword">boolean</span> <span class="token function">saveBatch</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span>T<span class="token operator">></span> entityList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//保存多个，传入List，默认的batchSize为1000</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">saveBatch</span><span class="token punctuation">(</span>entityList<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">boolean</span> <span class="token function">saveBatch</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span>T<span class="token operator">></span> entityList<span class="token punctuation">,</span> <span class="token keyword">int</span> batchSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//存多个，传入List，可以指定batchSize大小</span>    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>        rollbackFor <span class="token operator">=</span> <span class="token punctuation">{</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span>    <span class="token punctuation">)</span>    <span class="token keyword">default</span> <span class="token keyword">boolean</span> <span class="token function">saveOrUpdateBatch</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span>T<span class="token operator">></span> entityList<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//批量更新或者插入，有主键存在就执行更新，如果没有主键就执行插入</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">saveOrUpdateBatch</span><span class="token punctuation">(</span>entityList<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">boolean</span> <span class="token function">saveOrUpdateBatch</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span>T<span class="token operator">></span> entityList<span class="token punctuation">,</span> <span class="token keyword">int</span> batchSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//同上，可以指定batchsize大小</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="mapper层"><a href="#mapper层" class="headerlink" title="mapper层"></a>mapper层</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">int</span> <span class="token function">insert</span><span class="token punctuation">(</span>T entity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用时插入对象</span>        userMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          user<span class="token punctuation">.</span><span class="token function">setPaswword</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1.使用service新增</span>        userService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.使用mapper 新增</span>        userMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><h3 id="service层-1"><a href="#service层-1" class="headerlink" title="service层"></a>service层</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//service层中包含了4个方法</span>    <span class="token keyword">boolean</span> <span class="token function">removeById</span><span class="token punctuation">(</span>Serializable id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过id来删除</span>    <span class="token keyword">boolean</span> <span class="token function">removeByMap</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> columnMap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Map里存放条件</span>    <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span>Wrapper<span class="token operator">&lt;</span>T<span class="token operator">></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用Wrapper语句</span>    <span class="token keyword">boolean</span> <span class="token function">removeByIds</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Serializable</span><span class="token operator">></span> idList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过id批量删除</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="mapper层-1"><a href="#mapper层-1" class="headerlink" title="mapper层"></a>mapper层</h3><p>可以发现，与service层其实是一一对应的，不用看源码就可以知道，mybatis-plus的封装service层用了mapper的函数。</p><pre class="line-numbers language-java"><code class="language-java">         <span class="token keyword">int</span> <span class="token function">deleteById</span><span class="token punctuation">(</span>Serializable id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过id删除</span>    <span class="token keyword">int</span> <span class="token function">deleteByMap</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"cm"</span><span class="token punctuation">)</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> columnMap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过mapper属性来删除，mapper可以放多个条件属性</span>    <span class="token keyword">int</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"ew"</span><span class="token punctuation">)</span> Wrapper<span class="token operator">&lt;</span>T<span class="token operator">></span> wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过wrapper语句来删除</span>    <span class="token keyword">int</span> <span class="token function">deleteBatchIds</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"coll"</span><span class="token punctuation">)</span> Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Serializable</span><span class="token operator">></span> idList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过批量id来批量删除</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><pre class="line-numbers language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//根据 id 删除</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    userMapper<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>1278951504018575369L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//根据 id 批量删除</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDeleteBatchIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    userMapper<span class="token punctuation">.</span><span class="token function">deleteBatchIds</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>1278951504018575367L<span class="token punctuation">,</span>1278951504018575368L<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//使用 map 删除</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDeleteByMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userMapper<span class="token punctuation">.</span><span class="token function">deleteByMap</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//使用wapper语句</span>QueryWrapper<span class="token operator">&lt;</span>User<span class="token operator">></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queryWrapper        <span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">ge</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">isNotNull</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">int</span> result <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回删除的数量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Mybatis中的逻辑删除"><a href="#Mybatis中的逻辑删除" class="headerlink" title="Mybatis中的逻辑删除"></a>Mybatis中的逻辑删除</h3><p>物理删除：从数据库中直接删除数据<br>逻辑删除：并没有在数据库中直接删除数据，而是通过一个变量，让这个数据失效<br>逻辑删除目的：防止数据的丢失，管理员可以看见删除的数</p><ol><li><p>首先修改数据库，增加 deleted 字段，默认为 0</p></li><li><p>修改实体类，并添加注释</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@TableLogic</span><span class="token keyword">private</span> Integer deleted<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>配置 properties</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">mybatis-plus.global-config.db-config.logic-not-delete-value</span><span class="token punctuation">=</span><span class="token attr-value">0</span><span class="token attr-name">mybatis-plus.global-config.db-config.logic-delete-value</span><span class="token punctuation">=</span><span class="token attr-value">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>测试</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//逻辑删除</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLogicDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    userMapper<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>1L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210629161254.png" alt="image-20210629161252634"></p><p>可以看到走的是更新操作：</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210629161337.png" alt="image-20210629161336069"></p><p>同样，我们假如对逻辑表的查询和更新操作，会自动帮我们加上deleted=0的属性值，</p><p>如查询：</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210629161530.png" alt="image-20210629161529207"></p><p>deleted=1的已经删除的记录，查询不出</p></li></ol><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><h3 id="service层-2"><a href="#service层-2" class="headerlink" title="service层"></a>service层</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">boolean</span> <span class="token function">updateById</span><span class="token punctuation">(</span>T entity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过id来更新，传入的是实体，实体中包含了id，entity有什么属性就更新什么属性</span>    <span class="token keyword">boolean</span> <span class="token function">update</span><span class="token punctuation">(</span>T entity<span class="token punctuation">,</span> Wrapper<span class="token operator">&lt;</span>T<span class="token operator">></span> updateWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//entity为需要更新的值，wrapper语句为条件条件，entity有什么属性就更新什么属性</span>    <span class="token keyword">default</span> <span class="token keyword">boolean</span> <span class="token function">update</span><span class="token punctuation">(</span>Wrapper<span class="token operator">&lt;</span>T<span class="token operator">></span> updateWrapper<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//默认第一个传入null,需要更新的属性的值，可以在wrapper语句中设置</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Object<span class="token punctuation">)</span>null<span class="token punctuation">,</span> updateWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>        rollbackFor <span class="token operator">=</span> <span class="token punctuation">{</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span>    <span class="token punctuation">)</span>    <span class="token keyword">default</span> <span class="token keyword">boolean</span> <span class="token function">updateBatchById</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span>T<span class="token operator">></span> entityList<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//批量更新，传入一个List，默认的batchSize为1000</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateBatchById</span><span class="token punctuation">(</span>entityList<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">boolean</span> <span class="token function">updateBatchById</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span>T<span class="token operator">></span> entityList<span class="token punctuation">,</span> <span class="token keyword">int</span> batchSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//批量更新，可以指定batchSize大小</span>    <span class="token keyword">boolean</span> <span class="token function">saveOrUpdate</span><span class="token punctuation">(</span>T entity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//批量更新或者插入，有主键存在就执行更新，如果没有主键就执行插入</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="mapper层-2"><a href="#mapper层-2" class="headerlink" title="mapper层"></a>mapper层</h3><pre class="line-numbers language-java"><code class="language-java">        <span class="token keyword">int</span> <span class="token function">updateById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"et"</span><span class="token punctuation">)</span> T entity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//传入entity，entity自带id 属性，entity有什么属性就更新什么属性</span>    <span class="token keyword">int</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"et"</span><span class="token punctuation">)</span> T entity<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"ew"</span><span class="token punctuation">)</span> Wrapper<span class="token operator">&lt;</span>T<span class="token operator">></span> updateWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//传入entity为更新的值，wrapper为条件语句，entity有什么属性就更新什么属性</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"344"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"test333"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UpdateWrapper<span class="token operator">&lt;</span>User<span class="token operator">></span> updateWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UpdateWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        updateWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1.user 中封装修改的属性值， updateWrapper 中封装修改的条件参数值</span>        userService<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span>updateWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.根据条件修改对应的参数属性值,下语句对应，set name 2 where age= 23</span>        userService<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>Wrappers<span class="token punctuation">.</span>&lt;User<span class="token operator">></span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>User<span class="token operator">:</span><span class="token operator">:</span>getName<span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>User<span class="token operator">:</span><span class="token operator">:</span>getAge<span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　　　　　　　　 <span class="token comment" spellcheck="true">// 3.判断参数是否为空,并进行修改</span>　　　　 String name <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">;</span>　　　　 userService<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>Wrappers<span class="token punctuation">.</span>&lt;User<span class="token operator">></span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span>User<span class="token operator">:</span><span class="token operator">:</span>getName<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>User<span class="token operator">:</span><span class="token operator">:</span>getAge<span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//    4.不实用lamda表达式</span>      <span class="token comment" spellcheck="true">//修改值</span>      User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"Andy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//修改条件</span>    UpdateWrapper<span class="token operator">&lt;</span>User<span class="token operator">></span> userUpdateWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UpdateWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userUpdateWrapper<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"h"</span><span class="token punctuation">)</span>                     <span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                     <span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*相当于              UPDATE user      SET name=?, age=?, update_time=?      WHERE deleted=0 AND name LIKE ? OR age BETWEEN ? AND ?      */</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> userUpdateWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 5.</span>       <span class="token comment" spellcheck="true">//修改值</span>    User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//修改条件</span>    UpdateWrapper<span class="token operator">&lt;</span>User<span class="token operator">></span> userUpdateWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UpdateWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userUpdateWrapper<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"h"</span><span class="token punctuation">)</span>                     <span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"老李头"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//除了可以查询还可以使用set设置修改的字段</span>                     <span class="token punctuation">.</span><span class="token function">setSql</span><span class="token punctuation">(</span><span class="token string">" email = '123@qq.com'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可以有子查询</span>     <span class="token comment" spellcheck="true">/*             UPDATE user        SET age=? name=?, email = ‘123@qq.com’        WHERE deleted=0 AND name LIKE ?     */</span>      <span class="token keyword">int</span> result <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> userUpdateWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><h3 id="service层-3"><a href="#service层-3" class="headerlink" title="service层"></a>service层</h3><pre class="line-numbers language-java"><code class="language-java">         T <span class="token function">getById</span><span class="token punctuation">(</span>Serializable id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过id查询</span>    Collection<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">listByIds</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Serializable</span><span class="token operator">></span> idList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过多个id查询多个id</span>    Collection<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">listByMap</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> columnMap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过map属性键对值查询</span>    <span class="token keyword">default</span> T <span class="token function">getOne</span><span class="token punctuation">(</span>Wrapper<span class="token operator">&lt;</span>T<span class="token operator">></span> queryWrapper<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//通过wrapper语句查询一条记录，默认抛出异常，</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getOne</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    T <span class="token function">getOne</span><span class="token punctuation">(</span>Wrapper<span class="token operator">&lt;</span>T<span class="token operator">></span> queryWrapper<span class="token punctuation">,</span> <span class="token keyword">boolean</span> throwEx<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过wrapper语句查询一条记录，可以指定throwEx</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">getMap</span><span class="token punctuation">(</span>Wrapper<span class="token operator">&lt;</span>T<span class="token operator">></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过wrapper语句，查询一条记录，返回的形式是map</span>    <span class="token keyword">int</span> <span class="token function">count</span><span class="token punctuation">(</span>Wrapper<span class="token operator">&lt;</span>T<span class="token operator">></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//查询符合条件的数量</span>    <span class="token keyword">default</span> <span class="token keyword">int</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>Wrappers<span class="token punctuation">.</span><span class="token function">emptyWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//默认是0条</span>    <span class="token punctuation">}</span>    List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">list</span><span class="token punctuation">(</span>Wrapper<span class="token operator">&lt;</span>T<span class="token operator">></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过wrapper语句查询，返回对象的list</span>    <span class="token keyword">default</span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//默认空查询，即返回空</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>Wrappers<span class="token punctuation">.</span><span class="token function">emptyWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    IPage<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">page</span><span class="token punctuation">(</span>IPage<span class="token operator">&lt;</span>T<span class="token operator">></span> page<span class="token punctuation">,</span> Wrapper<span class="token operator">&lt;</span>T<span class="token operator">></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//  翻页查询</span>    <span class="token keyword">default</span> IPage<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">page</span><span class="token punctuation">(</span>IPage<span class="token operator">&lt;</span>T<span class="token operator">></span> page<span class="token punctuation">)</span> <span class="token punctuation">{</span>                             <span class="token comment" spellcheck="true">//  翻页查询，默认空查询</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> Wrappers<span class="token punctuation">.</span><span class="token function">emptyWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> <span class="token function">listMaps</span><span class="token punctuation">(</span>Wrapper<span class="token operator">&lt;</span>T<span class="token operator">></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 查询列表，返回map 的List</span>    <span class="token keyword">default</span> List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> <span class="token function">listMaps</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">listMaps</span><span class="token punctuation">(</span>Wrappers<span class="token punctuation">.</span><span class="token function">emptyWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="mapper层-3"><a href="#mapper层-3" class="headerlink" title="mapper层"></a>mapper层</h3><pre class="line-numbers language-java"><code class="language-java">    T <span class="token function">selectById</span><span class="token punctuation">(</span>Serializable id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过id查询</span>    List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">selectBatchIds</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"coll"</span><span class="token punctuation">)</span> Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Serializable</span><span class="token operator">></span> idList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过多个id的List查询多条记录</span>    List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">selectByMap</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"cm"</span><span class="token punctuation">)</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> columnMap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过Map键值对来查询记录</span>    T <span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"ew"</span><span class="token punctuation">)</span> Wrapper<span class="token operator">&lt;</span>T<span class="token operator">></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//查询一条记录</span>    Integer <span class="token function">selectCount</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"ew"</span><span class="token punctuation">)</span> Wrapper<span class="token operator">&lt;</span>T<span class="token operator">></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//条件符合的记录数量</span>    List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">selectList</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"ew"</span><span class="token punctuation">)</span> Wrapper<span class="token operator">&lt;</span>T<span class="token operator">></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过Wrapper来查询记录</span>    List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> <span class="token function">selectMaps</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"ew"</span><span class="token punctuation">)</span> Wrapper<span class="token operator">&lt;</span>T<span class="token operator">></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过Wrapper来查询记录，返回的是Map属性对的List</span>    List<span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token function">selectObjs</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"ew"</span><span class="token punctuation">)</span> Wrapper<span class="token operator">&lt;</span>T<span class="token operator">></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过Wrapper查询，返回Object的List</span>    IPage<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">selectPage</span><span class="token punctuation">(</span>IPage<span class="token operator">&lt;</span>T<span class="token operator">></span> page<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"ew"</span><span class="token punctuation">)</span> Wrapper<span class="token operator">&lt;</span>T<span class="token operator">></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//分页查询</span>    IPage<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> <span class="token function">selectMapsPage</span><span class="token punctuation">(</span>IPage<span class="token operator">&lt;</span>T<span class="token operator">></span> page<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"ew"</span><span class="token punctuation">)</span> Wrapper<span class="token operator">&lt;</span>T<span class="token operator">></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//分页查询</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><ol><li><p>在配置类中增加配置</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//分页插件</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> PaginationInterceptor <span class="token function">paginationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PaginationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Page 中的参数有两个：long current、long size。current 表示了当前页数，size 表示了每页数据个数</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//分页插件</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//selectPage(IPage&lt;T> var1，Page 是 Ipage的实现类</span>    <span class="token comment" spellcheck="true">// Page的参数有两个，long current, long size</span>    <span class="token comment" spellcheck="true">// 第一个是当前页，</span>    <span class="token comment" spellcheck="true">// 第二个是每页显示数据的个数</span>    Page<span class="token operator">&lt;</span>User<span class="token operator">></span> userPage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userMapper<span class="token punctuation">.</span><span class="token function">selectPage</span><span class="token punctuation">(</span>userPage<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    userPage<span class="token punctuation">.</span><span class="token function">getRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userPage<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//数据的总数</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userPage<span class="token punctuation">.</span><span class="token function">getCurrent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//当前页数</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实际上，MyBatisPlus 的分页底层采用的还是 limit</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210629180726.png" alt="image-20210629180725582"></p></li></ol><h3 id="使用-3"><a href="#使用-3" class="headerlink" title="使用"></a>使用</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//下面是许多查询操作</span><span class="token annotation punctuation">@Test</span><span class="token comment" spellcheck="true">//通过id查询</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectById</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    User user <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>1L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//批量查询用户</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectBatchIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectBatchIds</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//按条件查询，使用 map 查询</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectByMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//map 里放的是查询的条件 查询名字是 Czx 的人的信息</span>    hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"Czx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//条件可以拼接，往进 put 一个，就是一个条件 WHERE name = ? AND age =</span>    hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span>200L<span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectByMap</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">)</span><span class="token punctuation">;</span>    users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//</span>QueryWrapper<span class="token operator">&lt;</span>User<span class="token operator">></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queryWrapper<span class="token punctuation">.</span><span class="token function">notLike</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"e"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">likeRight</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">,</span> <span class="token string">"t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//返回值是Map列表</span>    List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> maps <span class="token operator">=</span>                     userMapper<span class="token punctuation">.</span><span class="token function">selectMaps</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    maps<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Wrapper构造器"><a href="#Wrapper构造器" class="headerlink" title="Wrapper构造器"></a>Wrapper构造器</h2><h3 id="Wrapper类的结构"><a href="#Wrapper类的结构" class="headerlink" title="Wrapper类的结构"></a>Wrapper类的结构</h3><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210629190144.png" alt="image-20210629190142779"></p><ol><li>AbstractWrapper: 用于查询条件封装，生成sql的where条件</li><li>AbstractLambdaWrapper: Lambda语法使用Wrapper统一处理解析lambda获取column</li><li>QueryWrapper: Entity 对象封装操作类，不是用lambda</li><li>UpdateWrapper: Update条件封装，用于Entity对象更新操作</li></ol><p>常用的为QueryWrapper&amp;UpdateWrapper</p><h3 id="常见用法"><a href="#常见用法" class="headerlink" title="常见用法"></a>常见用法</h3><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210629190619.png" alt="函数"></p><ul><li>allEq：全部eq(或个别isNull)    <pre><code> 例1: allEq({id:1,name:&quot;老王&quot;,age:null})---&gt;id = 1 and name = &#39;老王&#39; and age is null 例2: allEq({id:1,name:&quot;老王&quot;,age:null}, false)---&gt;id = 1 and name = &#39;老王&#39;</code></pre></li><li>eq：等于 =<pre><code> 例1: allEq((k,v) -&gt; k.indexOf(&quot;a&quot;) &gt; 0, {id:1,name:&quot;老王&quot;,age:null})---&gt;name = &#39;老王&#39; and age is null 例2: allEq((k,v) -&gt; k.indexOf(&quot;a&quot;) &gt; 0, {id:1,name:&quot;老王&quot;,age:null}, false)---&gt;name = &#39;老王&#39;</code></pre></li><li>ne：不等于 &lt;&gt;<pre><code> 例: ne(&quot;name&quot;, &quot;老王&quot;)---&gt;name &lt;&gt; &#39;老王&#39;</code></pre></li><li>gt：大于 &gt;<pre><code> 例: gt(&quot;age&quot;, 18)---&gt;age &gt; 18</code></pre></li><li>ge：大于等于 &gt;=<pre><code> 例: ge(&quot;age&quot;, 18)---&gt;age &gt;= 18</code></pre></li><li>lt：小于 &lt;<pre><code> 例: lt(&quot;age&quot;, 18)---&gt;age &lt; 18</code></pre></li><li>le：小于等于 &lt;=<pre><code> 例: le(&quot;age&quot;, 18)---&gt;age &lt;= 18</code></pre></li><li>between：BETWEEN 值1 AND 值2<pre><code> 例: between(&quot;age&quot;, 18, 30)---&gt;age between 18 and 30</code></pre></li><li>notBetween：NOT BETWEEN 值1 AND 值2<pre><code> 例: notBetween(&quot;age&quot;, 18, 30)---&gt;age not between 18 and 30</code></pre></li><li>like：LIKE ‘%值%’<pre><code>  例: like(&quot;name&quot;, &quot;王&quot;)---&gt;name like &#39;%王%&#39;</code></pre></li><li>notLike：NOT LIKE ‘%值%’<pre><code>  例: notLike(&quot;name&quot;, &quot;王&quot;)---&gt;name not like &#39;%王%&#39;</code></pre></li><li>likeLeft：LIKE ‘%值’<pre><code>  例: likeLeft(&quot;name&quot;, &quot;王&quot;)---&gt;name like &#39;%王&#39;</code></pre></li><li>likeRight：LIKE ‘值%’<pre><code>  例: likeRight(&quot;name&quot;, &quot;王&quot;)---&gt;name like &#39;王%&#39;</code></pre></li><li>isNull：字段 IS NULL<pre><code>  例: isNull(&quot;name&quot;)---&gt;name is null</code></pre></li><li>isNotNull：字段 IS NULL<pre><code>  例: isNotNull(&quot;name&quot;)---&gt;name is not null</code></pre></li><li>in：字段 IN (value.get(0), value.get(1), …)<pre><code>  例: in(&quot;age&quot;,{1,2,3})---&gt;age in (1,2,3)</code></pre></li><li>notIn：字段 IN (value.get(0), value.get(1), …)<pre><code>  例: notIn(&quot;age&quot;,{1,2,3})---&gt;age not in (1,2,3)</code></pre></li><li>inSql：字段 IN ( sql语句 )<pre><code>  例: inSql(&quot;age&quot;, &quot;1,2,3,4,5,6&quot;)---&gt;age in (1,2,3,4,5,6)  例: inSql(&quot;id&quot;, &quot;select id from table where id &lt; 3&quot;)---&gt;id in (select id from table where id &lt; 3)</code></pre></li><li>notInSql：字段 NOT IN ( sql语句 )<pre><code>  例: notInSql(&quot;age&quot;, &quot;1,2,3,4,5,6&quot;)---&gt;age not in (1,2,3,4,5,6)  例: notInSql(&quot;id&quot;, &quot;select id from table where id &lt; 3&quot;)---&gt;age not in (select id from table where id &lt; 3)</code></pre></li><li>groupBy：分组：GROUP BY 字段, …<pre><code>  例: groupBy(&quot;id&quot;, &quot;name&quot;)---&gt;group by id,name</code></pre></li><li>orderByAsc：排序：ORDER BY 字段, … ASC<pre><code>  例: orderByAsc(&quot;id&quot;, &quot;name&quot;)---&gt;order by id ASC,name ASC</code></pre></li><li>orderByDesc：排序：ORDER BY 字段, … DESC<pre><code>  例: orderByDesc(&quot;id&quot;, &quot;name&quot;)---&gt;order by id DESC,name DESC</code></pre></li><li>orderBy：排序：ORDER BY 字段, …<pre><code>  例: orderBy(true, true, &quot;id&quot;, &quot;name&quot;)---&gt;order by id ASC,name ASC</code></pre></li><li>having：HAVING ( sql语句 )<pre><code>  例: having(&quot;sum(age) &gt; 10&quot;)---&gt;having sum(age) &gt; 10  例: having(&quot;sum(age) &gt; {0}&quot;, 11)---&gt;having sum(age) &gt; 11</code></pre></li><li>or：拼接 OR 。注意事项:主动调用or表示紧接着下一个方法不是用and连接!(不调用or则默认为使用and连接)<pre><code>  例: eq(&quot;id&quot;,1).or().eq(&quot;name&quot;,&quot;老王&quot;)---&gt;id = 1 or name = &#39;老王&#39;  例: or(i -&gt; i.eq(&quot;name&quot;, &quot;李白&quot;).ne(&quot;status&quot;, &quot;活着&quot;))---&gt;or (name = &#39;李白&#39; and status &lt;&gt; &#39;活着&#39;)</code></pre></li><li>and：AND 嵌套<pre><code>  例: and(i -&gt; i.eq(&quot;name&quot;, &quot;李白&quot;).ne(&quot;status&quot;, &quot;活着&quot;))---&gt;and (name = &#39;李白&#39; and status &lt;&gt; &#39;活着&#39;)</code></pre>apply：拼接 sql 。 注意事项:该方法可用于数据库函数 动态入参的params对应前面sqlHaving内部的{index}部分.这样是不会有sql注入风险的,反之会有!<pre><code> 例: apply(&quot;id = 1&quot;)---&gt;having sum(age) &gt; 10 例: apply(&quot;date_format(dateColumn,&#39;%Y-%m-%d&#39;) = &#39;2008-08-08&#39;&quot;)---&gt;date_format(dateColumn,&#39;%Y-%m-%d&#39;) = &#39;2008-08-08&#39;&quot;) 例: apply(&quot;date_format(dateColumn,&#39;%Y-%m-%d&#39;) = {0}&quot;, &quot;2008-08-08&quot;)---&gt;date_format(dateColumn,&#39;%Y-%m-%d&#39;) = &#39;2008-08-08&#39;&quot;)</code></pre></li><li>last：无视优化规则直接拼接到 sql 的最后。注意事项:只能调用一次,多次调用以最后一次为准 有sql注入的风险,请谨慎使用<pre><code> 例: last(&quot;limit 1&quot;)</code></pre></li><li>exists：拼接 EXISTS ( sql语句 )<pre><code> 例: exists(&quot;select id from table where age = 1&quot;)---&gt;exists (select id from table where age = 1)</code></pre></li><li>notExists：拼接 NOT EXISTS ( sql语句 )<pre><code> 例: notExists(&quot;select id from table where age = 1&quot;)---&gt;not exists (select id from table where age = 1)</code></pre></li><li>nested：正常嵌套 不带 AND 或者 OR<pre><code> 例: nested(i -&gt; i.eq(&quot;name&quot;, &quot;李白&quot;).ne(&quot;status&quot;, &quot;活着&quot;))---&gt;(name = &#39;李白&#39; and status &lt;&gt; &#39;活着&#39;)</code></pre></li></ul><h2 id="构建复杂的数据库操作"><a href="#构建复杂的数据库操作" class="headerlink" title="构建复杂的数据库操作"></a>构建复杂的数据库操作</h2><ol><li><p>先构造Wrapper语句，可以直接在service层上构造wrapper语句。</p></li><li><p>在service层上封装函数，构造wrapper语句 使用mapper的方法，在service层上封装成一个函数，这样controller可以直接传参调用service层的函数。</p></li><li><p>mapper接口文件中定义好方法，然后在对应的xml文件中，编写对应的SQL就好，最后还是要在service层上将mapper的函数进行封装。</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210629191356.png" alt></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210629191304.png" alt></p></li></ol><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210629192918.png" alt="image-20210629192917135"></p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 开发 </tag>
            
            <tag> Mybatis </tag>
            
            <tag> 后端 </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕业啦</title>
      <link href="/2021/06/24/graduation/"/>
      <url>/2021/06/24/graduation/</url>
      
        <content type="html"><![CDATA[<h1 id="毕业啦"><a href="#毕业啦" class="headerlink" title="毕业啦"></a>毕业啦</h1><p>毕业一直都很忙碌很仓促，所以没有时间停下来记录。</p><p>2017.9-2021.6时间真的过得好快，从刚来学校的嫌弃没有独卫、大澡堂，到现在的不想离开，我想不是我认识到了南农有多好，而是遇到了你们这群有趣的小伙伴。</p><p>拿到毕业证书的时候激动又紧张、差点忘记让校长翻麦穗了。</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210624140653.JPG" alt></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210624140914.JPG" alt></p><p>​        首先是我最最亲爱的舍友们，四年来非常感谢你们的照顾，对于我来说你们就是我的家人，会容忍我的小脾气，会安慰鼓励我，祝愿你们能变得更好，早点喝上大家的喜酒，虽然毕业了，我还是228的爸爸。我们的照片虽然很少，那是因为每天一起生活，出去吃饭都懒得拍了哈哈。</p><p><img src="/Users/zhulingang/Downloads/IMG_5520(20210603-013654).JPG" alt></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210624141252.JPG" alt></p><p>这三个是让我又爱又恨的人，小午，cd，大臀，和你们在一起很开心，一起王者，一起捣蛋，一起洗澡，永远都会记得这份难能可贵的友情，虽然有时候你们真的很狗，但这就是快乐的源泉哈哈哈。祝我的狗儿子们一路向前冲，早日暴富</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210624142606.JPG" alt></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210624142139.JPG" alt></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210624142226.JPG" alt></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210624142334.JPG" alt></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210624142431.JPG" alt></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210624142507.JPG" alt></p><p>宋哥三哥希望你们之后一切都好，早日找到对的她，你们对小猪的好，我一直都记得。</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210624142834.JPG" alt></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210624143039.JPG" alt></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210624143158.JPG" alt></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210624143215.JPG" alt></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210624143232.JPG" alt></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210624143318.JPG" alt></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210624143337.JPG" alt></p><p>还有我最最爱的男篮和女篮，就像家一般温暖，和你们在一起训练、吃饭的日子也很难忘，虽然我们没拿过冠军，但是我们在场上一起拼搏战斗，我们是最好的信息院。</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210624144256.JPG" alt></p><p>虽然玩狼人杀的时间很少，但是也很高兴能认识你们，下马坊狼王们，下次我们再杀。</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210624144429.JPG" alt></p><p>还有就是生活部和外联，从不后悔加入学生会，在这里与你们一起工作，一起团建真的很开心，虽然再也没有信息院学生会了，但是它一直在我心里。</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210624144852.jpg" alt="信息院学生会总结大会"></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210624144938.jpg" alt="生活部"></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210624145010.jpg" alt="生活部"></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210624145048.jpg" alt="外联"></p><p>非常幸运能成为计科182和192的班助，遇到了一群可爱的同学，你们给我的惊喜，对我的好我都还收藏着呢，生日卡片，圣诞祝福都藏在收纳箱里，真心祝愿你们前程似锦，加油～</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210624145325.jpg" alt="计科182"></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210624145419.jpg" alt="计科192"></p><p>也遇到了难能可贵的朋友们，夏姐、蕊蕊、家齐、小二、达达…还有一个非常欣赏的人，和你们的回忆都在心里，祝你们变得更好～</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210624150516.jpg" alt></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210624150535.jpg" alt></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210624150604.jpg" alt></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210624150706.jpg" alt></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210624150734.jpg" alt></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210624150826.jpg" alt></p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210624150851.jpg" alt></p><p>四年真的过得好快，这是一段美好难忘的旅程，再见啦大家，我们一定会再见。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>细粒度识别模型-BCNN模型详解</title>
      <link href="/2021/06/10/bcnn/"/>
      <url>/2021/06/10/bcnn/</url>
      
        <content type="html"><![CDATA[<h1 id="细粒度识别模型-BCNN模型详解"><a href="#细粒度识别模型-BCNN模型详解" class="headerlink" title="细粒度识别模型-BCNN模型详解"></a>细粒度识别模型-BCNN模型详解</h1><p>Lin等提出的双线性卷积神经网络(Bilinear CNN，BCNN)，BCNN 网络将两个特征提取网络提取的特征进行双线性融合操作，相比于一般的网络模型直接将特征送入全连接层，BCNN 多了双线性融合操作。</p><p>下图为B-CNN网络结构图</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210609221727.png" alt="BCNN网络结构图"></p><p>我在项目中使用的是对称的网络结构：</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210609222149.png" alt="BCNN对称网络结构"></p><p>对于双线性融合操作可以这么理解：</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210609222311.png" alt="双线性融合操作"></p><p>对于特征图的相同位置做外积操作，然后对所有位置的进行全局池化，即相加所有位置的外积结果，总共可以得到P*P个，即为双线性融合特征。</p><p>对得到的双线性融合特征需要做开方和归一化操作，最后送入全连接层分类，得到分类结果。</p><p>BCNN网络结构代码：bilinear_model.py</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torchvision<span class="token keyword">import</span> torch<span class="token punctuation">.</span>optim <span class="token keyword">as</span> optim<span class="token keyword">import</span> torchvision<span class="token punctuation">.</span>transforms <span class="token keyword">as</span> transforms<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F<span class="token comment" spellcheck="true"># vgg16 = torchvision.models.vgg16(pretrained=True)</span><span class="token comment" spellcheck="true"># import os</span><span class="token comment" spellcheck="true"># os.environ["CUDA_VISIBLE_DEVICES"] = "2"</span>num_class<span class="token operator">=</span><span class="token number">115</span><span class="token keyword">class</span> <span class="token class-name">Net</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>Net<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>features <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true"># nn.BatchNorm2d(64),</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true"># nn.BatchNorm2d(128),</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true"># nn.BatchNorm2d(256),</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true"># nn.BatchNorm2d(512),</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true"># nn.MaxPool2d(kernel_size=2, stride=2, padding=0),</span>        <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>classifiers <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">512</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">,</span> num_class<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>features<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        batch_size <span class="token operator">=</span> x<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> x<span class="token punctuation">.</span>view<span class="token punctuation">(</span>batch_size<span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">28</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#将（batch_size,channel ,h,w）变为（batch_size,channel,h*w）维度的</span>        x <span class="token operator">=</span> <span class="token punctuation">(</span>torch<span class="token punctuation">.</span>bmm<span class="token punctuation">(</span>x<span class="token punctuation">,</span> torch<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">28</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#torch.transpose(x, 1, 2))转置矩阵，将维度1和2的转置</span>        <span class="token comment" spellcheck="true"># torch.bmm做外积 torch.bmm(a,b),tensor a 的size为(b,h,w),tensor b的size为(b,w,h),注意两个tensor的维度必须为3. 得到(batch_szie,512,512)</span>        <span class="token comment" spellcheck="true"># / 28 ** 2平均池化</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>        x<span class="token operator">=</span>x<span class="token punctuation">.</span>view<span class="token punctuation">(</span>batch_size<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># view(batch_size, -1)变成一维的张量</span>        <span class="token comment" spellcheck="true">#normalize标准化,开方和归一化操作</span>        x <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional<span class="token punctuation">.</span>normalize<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>sign<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">*</span> torch<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>abs<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1e</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># feature = feature.view(feature.size(0), -1)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>classifiers<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>训练过程分为两步：</p><p>由于特征提取网络使用的是预训练的VGG-16，特征提取能力较强，所以可以只训练全连接层，对所有层的参数进行微调可以进一步提高准确率</p><p>第一步：固定特征提取网络参数，只训练全连接层</p><p>train_last.py</p><pre class="line-numbers language-python"><code class="language-python">model <span class="token operator">=</span> bilinear_model<span class="token punctuation">.</span>Net<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>model<span class="token punctuation">)</span>model<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>pretrained <span class="token operator">=</span> <span class="token boolean">True</span><span class="token keyword">if</span> pretrained<span class="token punctuation">:</span>    pre_dic <span class="token operator">=</span> torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"./vgg16-397923af.pth"</span><span class="token punctuation">)</span>    Low_rankmodel_dic <span class="token operator">=</span> model<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span>    pre_dic <span class="token operator">=</span> <span class="token punctuation">{</span>k<span class="token punctuation">:</span> v <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> pre_dic<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> k <span class="token keyword">in</span> Low_rankmodel_dic<span class="token punctuation">}</span>    Low_rankmodel_dic<span class="token punctuation">.</span>update<span class="token punctuation">(</span>pre_dic<span class="token punctuation">)</span>    model<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>Low_rankmodel_dic<span class="token punctuation">)</span>criterion <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#特征提取网络所有的输入都不需要保存梯度，那么输出的requires_grad会自动设置为False。既然没有了相关的梯度值，自然进行反向传播时会将这部分子图从计算中剔除</span>model<span class="token punctuation">.</span>features<span class="token punctuation">.</span>requires_grad <span class="token operator">=</span> <span class="token boolean">False</span>optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span><span class="token punctuation">[</span>                       <span class="token punctuation">{</span><span class="token string">'params'</span><span class="token punctuation">:</span> model<span class="token punctuation">.</span>classifiers<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'lr'</span><span class="token punctuation">:</span> <span class="token number">1.0</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> momentum<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span> weight_decay<span class="token operator">=</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>epoch<span class="token punctuation">)</span><span class="token punctuation">:</span>    model<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> batch_idx<span class="token punctuation">,</span> <span class="token punctuation">(</span>data<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>trainloader<span class="token punctuation">)</span><span class="token punctuation">:</span>        data<span class="token punctuation">,</span> target <span class="token operator">=</span> data<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> target<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        output <span class="token operator">=</span> model<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        loss <span class="token operator">=</span> criterion<span class="token punctuation">(</span>output<span class="token punctuation">,</span> target<span class="token punctuation">)</span>        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> batch_idx <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Train Epoch: {} [{}/{} ({:.0f}%)]\tLoss: {:.6f}\tLR: {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>                epoch<span class="token punctuation">,</span> batch_idx <span class="token operator">*</span> len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>trainloader<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span><span class="token punctuation">,</span>                       <span class="token number">100</span><span class="token punctuation">.</span> <span class="token operator">*</span> batch_idx <span class="token operator">/</span> len<span class="token punctuation">(</span>trainloader<span class="token punctuation">)</span><span class="token punctuation">,</span> loss<span class="token punctuation">.</span>data<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                optimizer<span class="token punctuation">.</span>param_groups<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'lr'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">###</span><span class="token comment" spellcheck="true">###</span><span class="token comment" spellcheck="true">###省略代码</span>torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>model<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'bcnn_lastlayer.pth'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将第一步训练的参数保存，在第二步中加载</p><p>第二步：加载第一步的预训练参数,对所有层的参数进行微调</p><p>train_fintune.py</p><pre class="line-numbers language-python"><code class="language-python">model <span class="token operator">=</span> bilinear_model<span class="token punctuation">.</span>Net<span class="token punctuation">(</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>pretrained <span class="token operator">=</span> <span class="token boolean">True</span><span class="token keyword">if</span> pretrained<span class="token punctuation">:</span>    pre_dic <span class="token operator">=</span> torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'bcnn_lastlayer.pth'</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>pre_dic<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> m <span class="token keyword">in</span> model<span class="token punctuation">.</span>modules<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>m<span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">)</span><span class="token punctuation">:</span>            n <span class="token operator">=</span> m<span class="token punctuation">.</span>kernel_size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> m<span class="token punctuation">.</span>kernel_size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> m<span class="token punctuation">.</span>out_channels            m<span class="token punctuation">.</span>weight<span class="token punctuation">.</span>data<span class="token punctuation">.</span>normal_<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">.</span> <span class="token operator">/</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> isinstance<span class="token punctuation">(</span>m<span class="token punctuation">,</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">)</span><span class="token punctuation">:</span>            m<span class="token punctuation">.</span>weight<span class="token punctuation">.</span>data<span class="token punctuation">.</span>fill_<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            m<span class="token punctuation">.</span>bias<span class="token punctuation">.</span>data<span class="token punctuation">.</span>zero_<span class="token punctuation">(</span><span class="token punctuation">)</span>criterion <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">,</span> momentum<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span> weight_decay<span class="token operator">=</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>epoch<span class="token punctuation">)</span><span class="token punctuation">:</span>    model<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> batch_idx<span class="token punctuation">,</span> <span class="token punctuation">(</span>data<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>trainloader<span class="token punctuation">)</span><span class="token punctuation">:</span>        data<span class="token punctuation">,</span> target <span class="token operator">=</span> data<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> target<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        output <span class="token operator">=</span> model<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        loss <span class="token operator">=</span> criterion<span class="token punctuation">(</span>output<span class="token punctuation">,</span> target<span class="token punctuation">)</span>        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> batch_idx <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Train Epoch: {} [{}/{} ({:.0f}%)]\tLoss: {:.6f}\tLR: {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>                epoch<span class="token punctuation">,</span> batch_idx <span class="token operator">*</span> len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>trainloader<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span><span class="token punctuation">,</span>                       <span class="token number">100</span><span class="token punctuation">.</span> <span class="token operator">*</span> batch_idx <span class="token operator">/</span> len<span class="token punctuation">(</span>trainloader<span class="token punctuation">)</span><span class="token punctuation">,</span> loss<span class="token punctuation">.</span>data<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                optimizer<span class="token punctuation">.</span>param_groups<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'lr'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">###省略代码</span>torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>model<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'bcnn_alllayer.pth'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完整代码可上Github上<a href="https://github.com/zhulingang/BCNN" target="_blank" rel="noopener">BCNN</a>浏览，经过实验，微调参数确实比直接训练全连接层准确率高。</p>]]></content>
      
      
      <categories>
          
          <category> 图像识别 </category>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 细粒度图像识别 </tag>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>菊花细粒度识别——NTS-Net模型详解</title>
      <link href="/2021/06/09/nts-net/"/>
      <url>/2021/06/09/nts-net/</url>
      
        <content type="html"><![CDATA[<h1 id="菊花细粒度识别——NTS-Net模型详解"><a href="#菊花细粒度识别——NTS-Net模型详解" class="headerlink" title="菊花细粒度识别——NTS-Net模型详解"></a>菊花细粒度识别——NTS-Net模型详解</h1><p>​    Nts-Net(Navigator-Teacher-Scrutinizer Network,Nts-Net)应用于细粒度图像识别中。NTS-Net 将整张图像以及那些具有能强烈表示类别特征的区域所提取 的特征进行融合，有利于细粒度图像识别。所以，NTS-Net 进行识别的关键是如何定位最具有语义信息的局部区域。</p><p>​    如NTS-Net的名字所示，模型主要由三个网络部分组成：Navigator、Teacher、Scrutinizer网络。</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210608210935.png" alt></p><p>​    Navigator 的作用是让整个模型关注最具判别性的区域，Navigator 通过预测图像各个区域的信息量，提取出最具判别性的局部区域。当图像输入 Navigator 网络后，Navigator 网络会根据不同的比例和尺寸产生一系列矩形信息区域，并根据信息丰富度 排序。最后取其中信息度最大的 <em>M</em> 个区域，随后从完整的图像中映射对应的区域，把它们按照规定的尺寸，提取特征并送入到 Teacher 网络中，得到这 <em>M</em> 个区域的置信度并排序。局部区域的信息度反映的是对物体细粒度分类的表征能力，如果对 Teacher网络中的置信度进行排序，区域置信度的排序应与信息度的排序一致。所以，我们可以计算区域信息度和置信度的一致性的损失值，来对 Navigator 网络进行训练和优化。</p><p>​    下图是Teacher网络和Navigator网络自监督机制示意图：</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210608211044.png" alt="自监督机制示意图"></p><p>​    需要注意的是：局部区域经过特征提取网络提取特征后送入Teacher网络，经Teacher网络的全连接层得到菊花分类向量，再与标签进行交叉熵得到置信度。</p><p>​    Navigator网络将信息度最大的K个区域送往Scrutinizer网络，Scrutinizer网络提取这些局部区域的特征，然后将全局图像的特征和局部区域的特征拼接，最后送入全连接层分类。</p><p>​    下图是NTS-Net的检测过程：</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210608211445.png" alt="NTS-Net的检测过程"></p><p>需要注意的是：局部区域是根据特征图与全局图像的映射关系上采样得到的。</p><h2 id="核心代码理解："><a href="#核心代码理解：" class="headerlink" title="核心代码理解："></a>核心代码理解：</h2><h3 id="NTS-Net的网络代码：model-py"><a href="#NTS-Net的网络代码：model-py" class="headerlink" title="NTS-Net的网络代码：model.py"></a>NTS-Net的网络代码：model.py</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F<span class="token keyword">from</span> torch<span class="token punctuation">.</span>autograd <span class="token keyword">import</span> Variable<span class="token keyword">from</span> core <span class="token keyword">import</span> resnet<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> core<span class="token punctuation">.</span>anchors <span class="token keyword">import</span> generate_default_anchor_maps<span class="token punctuation">,</span> hard_nms<span class="token keyword">from</span> config <span class="token keyword">import</span> CAT_NUM<span class="token punctuation">,</span> PROPOSAL_NUMnum_class<span class="token operator">=</span><span class="token number">115</span><span class="token keyword">class</span> <span class="token class-name">ProposalNet</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#不同尺寸的特征图要在不同大小的特征图上采样，。Navigator 网络在不同尺度的全局特征图上抠取不同尺寸的候选框的局部特征图。尺度为48、96、192的局部区域应该分别在大小为14</span>    <span class="token comment" spellcheck="true"># ×14、7×7、4×4的特征图上抠取局部特征图</span>    <span class="token comment" spellcheck="true">#ProposalNet得到不同尺度的特征图</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>ProposalNet<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>down1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>down2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>down3 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>ReLU <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>tidy1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>tidy2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>tidy3 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        batch_size <span class="token operator">=</span> x<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        d1 <span class="token operator">=</span> self<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>self<span class="token punctuation">.</span>down1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        d2 <span class="token operator">=</span> self<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>self<span class="token punctuation">.</span>down2<span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">)</span>        d3 <span class="token operator">=</span> self<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>self<span class="token punctuation">.</span>down3<span class="token punctuation">(</span>d2<span class="token punctuation">)</span><span class="token punctuation">)</span>        t1 <span class="token operator">=</span> self<span class="token punctuation">.</span>tidy1<span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span>batch_size<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        t2 <span class="token operator">=</span> self<span class="token punctuation">.</span>tidy2<span class="token punctuation">(</span>d2<span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span>batch_size<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        t3 <span class="token operator">=</span> self<span class="token punctuation">.</span>tidy3<span class="token punctuation">(</span>d3<span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span>batch_size<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span> t2<span class="token punctuation">,</span> t3<span class="token punctuation">)</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">attention_net</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> topN<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>attention_net<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pretrained_model <span class="token operator">=</span> resnet<span class="token punctuation">.</span>resnet50<span class="token punctuation">(</span>pretrained<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#特征提取网络、使用的是预训练网络RestNet-50</span>        self<span class="token punctuation">.</span>pretrained_model<span class="token punctuation">.</span>avgpool <span class="token operator">=</span> nn<span class="token punctuation">.</span>AdaptiveAvgPool2d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pretrained_model<span class="token punctuation">.</span>fc <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">512</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">,</span> num_class<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>proposal_net <span class="token operator">=</span> ProposalNet<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>topN <span class="token operator">=</span> topN <span class="token comment" spellcheck="true">#topN为送往Teacher网络的局部区域数量</span>        self<span class="token punctuation">.</span>concat_net <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">2048</span> <span class="token operator">*</span> <span class="token punctuation">(</span>CAT_NUM <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> num_class<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#concat_net为Scrutinizer的全连接层，</span>                                                                    <span class="token comment" spellcheck="true"># 输入的是拼接后局部特征向量和全局向量的特征向量 输出菊花各个种类的概率</span>        self<span class="token punctuation">.</span>partcls_net <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">512</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">,</span> num_class<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#Teacher网络中的全连接层，输入经特征提取网络的局部区域的特征图，输出菊花分类向量</span>        _<span class="token punctuation">,</span> edge_anchors<span class="token punctuation">,</span> _ <span class="token operator">=</span> generate_default_anchor_maps<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pad_side <span class="token operator">=</span> <span class="token number">224</span>        self<span class="token punctuation">.</span>edge_anchors <span class="token operator">=</span> <span class="token punctuation">(</span>edge_anchors <span class="token operator">+</span> <span class="token number">224</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>int<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#产生候选框</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        resnet_out<span class="token punctuation">,</span> rpn_feature<span class="token punctuation">,</span> feature <span class="token operator">=</span> self<span class="token punctuation">.</span>pretrained_model<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#第一步先得到全局图像的特征图</span>        x_pad <span class="token operator">=</span> F<span class="token punctuation">.</span>pad<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>pad_side<span class="token punctuation">,</span> self<span class="token punctuation">.</span>pad_side<span class="token punctuation">,</span> self<span class="token punctuation">.</span>pad_side<span class="token punctuation">,</span> self<span class="token punctuation">.</span>pad_side<span class="token punctuation">)</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">'constant'</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>        batch <span class="token operator">=</span> x<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># we will reshape rpn to shape: batch * nb_anchor</span>        rpn_score <span class="token operator">=</span> self<span class="token punctuation">.</span>proposal_net<span class="token punctuation">(</span>rpn_feature<span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#继续下采样得到不同尺寸的特征图</span>        all_cdds <span class="token operator">=</span> <span class="token punctuation">[</span>            np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>edge_anchors<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> x <span class="token keyword">in</span> rpn_score<span class="token punctuation">.</span>data<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        top_n_cdds <span class="token operator">=</span> <span class="token punctuation">[</span>hard_nms<span class="token punctuation">(</span>x<span class="token punctuation">,</span> topn<span class="token operator">=</span>self<span class="token punctuation">.</span>topN<span class="token punctuation">,</span> iou_thresh<span class="token operator">=</span><span class="token number">0.25</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> all_cdds<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#候选框极大值抑制，保留topN个候选框</span>        top_n_cdds <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>top_n_cdds<span class="token punctuation">)</span>        top_n_index <span class="token operator">=</span> top_n_cdds<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>int<span class="token punctuation">)</span>        top_n_index <span class="token operator">=</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>top_n_index<span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>        top_n_index<span class="token operator">=</span>top_n_index<span class="token punctuation">.</span>long<span class="token punctuation">(</span><span class="token punctuation">)</span>        top_n_prob <span class="token operator">=</span> torch<span class="token punctuation">.</span>gather<span class="token punctuation">(</span>rpn_score<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> index<span class="token operator">=</span>top_n_index<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#top_n_prob为信息量</span>        part_imgs <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">[</span>batch<span class="token punctuation">,</span> self<span class="token punctuation">.</span>topN<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>batch<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>self<span class="token punctuation">.</span>topN<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token punctuation">[</span>y0<span class="token punctuation">,</span> x0<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x1<span class="token punctuation">]</span> <span class="token operator">=</span> top_n_cdds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>int<span class="token punctuation">)</span>                part_imgs<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> F<span class="token punctuation">.</span>interpolate<span class="token punctuation">(</span>x_pad<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> y0<span class="token punctuation">:</span>y1<span class="token punctuation">,</span> x0<span class="token punctuation">:</span>x1<span class="token punctuation">]</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">224</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">'bilinear'</span><span class="token punctuation">,</span>                                                      align_corners<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#上采样得到局部区域图像</span>        part_imgs <span class="token operator">=</span> part_imgs<span class="token punctuation">.</span>view<span class="token punctuation">(</span>batch <span class="token operator">*</span> self<span class="token punctuation">.</span>topN<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#part_imgs为所有局部区域图像</span>        _<span class="token punctuation">,</span> _<span class="token punctuation">,</span> part_features <span class="token operator">=</span> self<span class="token punctuation">.</span>pretrained_model<span class="token punctuation">(</span>part_imgs<span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#part_feartures为所有局部区域图的特征图</span>        part_feature <span class="token operator">=</span> part_features<span class="token punctuation">.</span>view<span class="token punctuation">(</span>batch<span class="token punctuation">,</span> self<span class="token punctuation">.</span>topN<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#变换维度</span>        part_feature <span class="token operator">=</span> part_feature<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span>CAT_NUM<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">.</span>contiguous<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#根据信息量选择前几个</span>        part_feature <span class="token operator">=</span> part_feature<span class="token punctuation">.</span>view<span class="token punctuation">(</span>batch<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#转换维度</span>        <span class="token comment" spellcheck="true"># concat_logits have the shape: B*200</span>        concat_out <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">[</span>part_feature<span class="token punctuation">,</span> feature<span class="token punctuation">]</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#将局部特征图与全局特征图进行拼接</span>        concat_logits <span class="token operator">=</span> self<span class="token punctuation">.</span>concat_net<span class="token punctuation">(</span>concat_out<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#concat_logits为全局和局部拼接后的特征分类向量</span>        raw_logits <span class="token operator">=</span> resnet_out        <span class="token comment" spellcheck="true"># part_logits have the shape: B*N*200</span>        part_logits <span class="token operator">=</span> self<span class="token punctuation">.</span>partcls_net<span class="token punctuation">(</span>part_features<span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span>batch<span class="token punctuation">,</span> self<span class="token punctuation">.</span>topN<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#raw_logits为原图的特征向量，concat为原图和局部区域生成的特征分类向量，part_logits为所有局部区域的分类特征向量</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>raw_logits<span class="token punctuation">,</span> concat_logits<span class="token punctuation">,</span> part_logits<span class="token punctuation">,</span> top_n_index<span class="token punctuation">,</span> top_n_prob<span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">list_loss</span><span class="token punctuation">(</span>logits<span class="token punctuation">,</span> targets<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#输入的是part_logits为局部区域的分类特征向量，targets为标签</span>    <span class="token comment" spellcheck="true">#TODO 计算置信度</span>    temp <span class="token operator">=</span> F<span class="token punctuation">.</span>log_softmax<span class="token punctuation">(</span>logits<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#softmax，相当于将相加总和1。log再对每个进行log计算，方便计算交叉熵</span>    loss <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>targets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>logits<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#计算交叉熵</span>    <span class="token keyword">return</span> torch<span class="token punctuation">.</span>stack<span class="token punctuation">(</span>loss<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#将loss中每个batch的loss拼接在一起</span><span class="token keyword">def</span> <span class="token function">ranking_loss</span><span class="token punctuation">(</span>score<span class="token punctuation">,</span> targets<span class="token punctuation">,</span> proposal_num<span class="token operator">=</span>PROPOSAL_NUM<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#输入score为top_n_prob，targets为part_loss</span>    <span class="token comment" spellcheck="true">#计算信息度和置信度的排序是否一致、Navigator的损失函数</span>    loss <span class="token operator">=</span> Variable<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    batch_size <span class="token operator">=</span> score<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>proposal_num<span class="token punctuation">)</span><span class="token punctuation">:</span>        targets_p <span class="token operator">=</span> <span class="token punctuation">(</span>targets <span class="token operator">></span> targets<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> i<span class="token punctuation">]</span><span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>type<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>FloatTensor<span class="token punctuation">)</span>        pivot <span class="token operator">=</span> score<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> i<span class="token punctuation">]</span><span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        loss_p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> pivot <span class="token operator">+</span> score<span class="token punctuation">)</span> <span class="token operator">*</span> targets_p        loss_p <span class="token operator">=</span> torch<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>loss_p<span class="token punctuation">)</span><span class="token punctuation">)</span>        loss <span class="token operator">+=</span> loss_p    <span class="token keyword">return</span> loss <span class="token operator">/</span> batch_size<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="训练过程：train-py"><a href="#训练过程：train-py" class="headerlink" title="训练过程：train.py"></a>训练过程：train.py</h3><pre class="line-numbers language-python"><code class="language-python">trainset <span class="token operator">=</span> data<span class="token punctuation">.</span>MyDataset<span class="token punctuation">(</span><span class="token string">'./CUB200/new_train.txt'</span><span class="token punctuation">,</span> transform<span class="token operator">=</span>transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>                                                transforms<span class="token punctuation">.</span>Resize<span class="token punctuation">(</span><span class="token number">448</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                                transforms<span class="token punctuation">.</span>RandomHorizontalFlip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                                transforms<span class="token punctuation">.</span>CenterCrop<span class="token punctuation">(</span><span class="token number">448</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                                transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                                transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span>mean<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0.485</span><span class="token punctuation">,</span> <span class="token number">0.456</span><span class="token punctuation">,</span> <span class="token number">0.406</span><span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0.229</span><span class="token punctuation">,</span> <span class="token number">0.224</span><span class="token punctuation">,</span> <span class="token number">0.225</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                                <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>trainloader <span class="token operator">=</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>trainset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">,</span>                                          shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> num_workers<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>testset <span class="token operator">=</span> data<span class="token punctuation">.</span>MyDataset<span class="token punctuation">(</span><span class="token string">'./CUB200/test.txt'</span><span class="token punctuation">,</span> transform<span class="token operator">=</span>transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>                                                transforms<span class="token punctuation">.</span>Resize<span class="token punctuation">(</span><span class="token number">448</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                                transforms<span class="token punctuation">.</span>CenterCrop<span class="token punctuation">(</span><span class="token number">448</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                                transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                                transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span>mean<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0.485</span><span class="token punctuation">,</span> <span class="token number">0.456</span><span class="token punctuation">,</span> <span class="token number">0.406</span><span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0.229</span><span class="token punctuation">,</span> <span class="token number">0.224</span><span class="token punctuation">,</span> <span class="token number">0.225</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                                <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>testloader <span class="token operator">=</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>testset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">,</span>                                         shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> num_workers<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># define model</span>net <span class="token operator">=</span> model_cuda<span class="token punctuation">.</span>attention_net<span class="token punctuation">(</span>topN<span class="token operator">=</span>PROPOSAL_NUM<span class="token punctuation">)</span><span class="token keyword">if</span> resume<span class="token punctuation">:</span>    ckpt <span class="token operator">=</span> torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span>resume<span class="token punctuation">)</span>    net<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>ckpt<span class="token punctuation">[</span><span class="token string">'net_state_dict'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    start_epoch <span class="token operator">=</span> ckpt<span class="token punctuation">[</span><span class="token string">'epoch'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>creterion <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># define optimizers</span>raw_parameters <span class="token operator">=</span> list<span class="token punctuation">(</span>net<span class="token punctuation">.</span>pretrained_model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>part_parameters <span class="token operator">=</span> list<span class="token punctuation">(</span>net<span class="token punctuation">.</span>proposal_net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>concat_parameters <span class="token operator">=</span> list<span class="token punctuation">(</span>net<span class="token punctuation">.</span>concat_net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>partcls_parameters <span class="token operator">=</span> list<span class="token punctuation">(</span>net<span class="token punctuation">.</span>partcls_net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>raw_optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>raw_parameters<span class="token punctuation">,</span> lr<span class="token operator">=</span>LR<span class="token punctuation">,</span> momentum<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span> weight_decay<span class="token operator">=</span>WD<span class="token punctuation">)</span>concat_optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>concat_parameters<span class="token punctuation">,</span> lr<span class="token operator">=</span>LR<span class="token punctuation">,</span> momentum<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span> weight_decay<span class="token operator">=</span>WD<span class="token punctuation">)</span>part_optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>part_parameters<span class="token punctuation">,</span> lr<span class="token operator">=</span>LR<span class="token punctuation">,</span> momentum<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span> weight_decay<span class="token operator">=</span>WD<span class="token punctuation">)</span>partcls_optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>partcls_parameters<span class="token punctuation">,</span> lr<span class="token operator">=</span>LR<span class="token punctuation">,</span> momentum<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span> weight_decay<span class="token operator">=</span>WD<span class="token punctuation">)</span>schedulers <span class="token operator">=</span> <span class="token punctuation">[</span>MultiStepLR<span class="token punctuation">(</span>raw_optimizer<span class="token punctuation">,</span> milestones<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">,</span> gamma<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              MultiStepLR<span class="token punctuation">(</span>concat_optimizer<span class="token punctuation">,</span> milestones<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">,</span> gamma<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              MultiStepLR<span class="token punctuation">(</span>part_optimizer<span class="token punctuation">,</span> milestones<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">,</span> gamma<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              MultiStepLR<span class="token punctuation">(</span>partcls_optimizer<span class="token punctuation">,</span> milestones<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">,</span> gamma<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>net <span class="token operator">=</span> net<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>net <span class="token operator">=</span> DataParallel<span class="token punctuation">(</span>net<span class="token punctuation">)</span><span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span>start_epoch<span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># begin training</span>    _print<span class="token punctuation">(</span><span class="token string">'--'</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>    net<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> data <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>trainloader<span class="token punctuation">)</span><span class="token punctuation">:</span>        img<span class="token punctuation">,</span> label <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>        niter <span class="token operator">=</span> epoch <span class="token operator">*</span> len<span class="token punctuation">(</span>trainloader<span class="token punctuation">)</span> <span class="token operator">+</span> i        batch_size <span class="token operator">=</span> img<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        raw_optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        part_optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        concat_optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        partcls_optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># raw_logits为原图的分类特征向量，concat为原图和局部区域生成的特征向量，part_logits为局部区域的分类特征向量</span>        raw_logits<span class="token punctuation">,</span> concat_logits<span class="token punctuation">,</span> part_logits<span class="token punctuation">,</span> _<span class="token punctuation">,</span> top_n_prob <span class="token operator">=</span> net<span class="token punctuation">(</span>img<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#part_loss计算置信度</span>        part_loss <span class="token operator">=</span> model_cuda<span class="token punctuation">.</span>list_loss<span class="token punctuation">(</span>part_logits<span class="token punctuation">.</span>view<span class="token punctuation">(</span>batch_size <span class="token operator">*</span> PROPOSAL_NUM<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                         label<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>repeat<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> PROPOSAL_NUM<span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span>batch_size<span class="token punctuation">,</span> PROPOSAL_NUM<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#raw_loss是原图的特征分类向量与正确类别的交叉熵</span>        raw_loss <span class="token operator">=</span> creterion<span class="token punctuation">(</span>raw_logits<span class="token punctuation">,</span> label<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#是合并特征经全连接层输出的特征分类向量与正确类别的交叉熵</span>        concat_loss <span class="token operator">=</span> creterion<span class="token punctuation">(</span>concat_logits<span class="token punctuation">,</span> label<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#Scrutinizer损失值</span>        <span class="token comment" spellcheck="true">#top_n_prob为信息量，part_loss为置信度</span>        rank_loss <span class="token operator">=</span> model_cuda<span class="token punctuation">.</span>ranking_loss<span class="token punctuation">(</span>top_n_prob<span class="token punctuation">,</span> part_loss<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#navigator网络损失，比较信息度和置信度排序，计算损失值</span>        <span class="token comment" spellcheck="true">#为为局部区域的分类特征向量与正确类别的交叉熵</span>        partcls_loss <span class="token operator">=</span> creterion<span class="token punctuation">(</span>part_logits<span class="token punctuation">.</span>view<span class="token punctuation">(</span>batch_size <span class="token operator">*</span> PROPOSAL_NUM<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                 label<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>repeat<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> PROPOSAL_NUM<span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#局部区域的损失值，即Teacher网络=局部区域+整个图像</span>        total_loss <span class="token operator">=</span> raw_loss <span class="token operator">+</span> rank_loss <span class="token operator">+</span> concat_loss <span class="token operator">+</span> partcls_loss        total_loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>        raw_optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        part_optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        concat_optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        partcls_optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        writer1<span class="token punctuation">.</span>add_scalars<span class="token punctuation">(</span><span class="token string">'Train_loss'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'train_loss'</span><span class="token punctuation">:</span> total_loss<span class="token punctuation">.</span>data<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> niter<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#        progress_bar(i, len(trainloader), 'train')</span>    <span class="token comment" spellcheck="true">#调整学习率   </span>    <span class="token keyword">for</span> scheduler <span class="token keyword">in</span> schedulers<span class="token punctuation">:</span>        scheduler<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实验过程使用的预训练模型为RestNet-50，完整的代码可以去我的GitHub上<a href="https://github.com/zhulingang/NTS-Net" target="_blank" rel="noopener">NTS-Net</a>上查看。</p>]]></content>
      
      
      <categories>
          
          <category> 图像识别 </category>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 细粒度图像识别 </tag>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客部署Gitalk评论踩坑</title>
      <link href="/2021/05/17/hexo-gitalk/"/>
      <url>/2021/05/17/hexo-gitalk/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo博客部署Gitalk评论踩坑"><a href="#Hexo博客部署Gitalk评论踩坑" class="headerlink" title="Hexo博客部署Gitalk评论踩坑"></a>Hexo博客部署Gitalk评论踩坑</h1><p>算了算自己瞎折腾好久，查了好久的百度都没能解决，最后在Google和Github上找到了正确的方案。只能说Github yyds～</p><h2 id="在OAuth已搭建Gitalk"><a href="#在OAuth已搭建Gitalk" class="headerlink" title="在OAuth已搭建Gitalk"></a>在OAuth已搭建Gitalk</h2><p>搭建步骤可自行百度，主要搭建完毕之后的后续步骤坑较大</p><h2 id="起因：Request-failed-with-status-code-403"><a href="#起因：Request-failed-with-status-code-403" class="headerlink" title="起因：Request failed with status code 403"></a>起因：Request failed with status code 403</h2><p>一直不明白这个原因是怎么造成的<img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210517022318.jpg" alt></p><p>最后参考了这篇博客<a href="https://cuiqingcai.com/30010.html" target="_blank" rel="noopener">Gitalk 评论登录 403 问题解决</a></p><p>原因是：主题模版中的cors-anywhere反向代理已不支持直接使用，Gitalk的默认proxy为</p><pre><code>Default: https://cors-anywhere.herokuapp.com/https://github.com/login/oauth/access_token.</code></pre><p>所以在代理访问Github时会直接forbidden。参考博客中，对403出现的原因做了详细说明</p><h2 id="解决403"><a href="#解决403" class="headerlink" title="解决403"></a>解决403</h2><p>博主的做法是：更换反向代理，直接白嫖别人代理。我也参照了博主的做法</p><p>我的博客主题是matery，所以在/thems/matery/_config.yml里添加自己定义的proxy</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">gitalk</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span>   <span class="token key atrule">owner</span><span class="token punctuation">:</span>   <span class="token key atrule">repo</span><span class="token punctuation">:</span>   <span class="token key atrule">oauth</span><span class="token punctuation">:</span>    <span class="token key atrule">clientId</span><span class="token punctuation">:</span>     <span class="token key atrule">clientSecret</span><span class="token punctuation">:</span>   <span class="token key atrule">admin</span><span class="token punctuation">:</span>   <span class="token key atrule">proxy</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//netnr<span class="token punctuation">-</span>proxy.cloudno.de/https<span class="token punctuation">:</span>//github.com/login/oauth/access_token<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="出先新问题429"><a href="#出先新问题429" class="headerlink" title="出先新问题429"></a>出先新问题429</h2><p>但是会出现新的问题，Code：429</p><p>429的含义是收到了太多的请求，一开始还没意识到白嫖代理的问题，一直在想429就该怎么解决。知道后来才恍然大悟，我会白嫖，许多人也会白嫖，这个代理很多人都会使用，但是使用次数有限制，就会造成过多的人使用请求。</p><p>最后在Github的<a href="https://github.com/gitalk/gitalk/issues/429" target="_blank" rel="noopener">Gitalk后出现403错误</a>讨论上搜到了比较简单的解决方案，自己部署反向代理。</p><h2 id="自己部署反向代理"><a href="#自己部署反向代理" class="headerlink" title="自己部署反向代理"></a>自己部署反向代理</h2><p>十分感谢Github上的问题讨论，为我提供了比较便捷的解决方案。虽然许多朋友都是白嫖别人代码的哈哈哈，我也想白嫖，但是我都耗在这个问题这么久了，不彻底解决不甘心啊。</p><p>于是参考了另一篇博客<a href="https://www.chenhanpeng.com/create-own-cors-anywhere-to-resolve-the-request-with-403/" target="_blank" rel="noopener">在cloudflare上创建一个免费的在线代理来解决gitalk授权登录报403问题</a></p><p>首先创建自己的一个ClOUDFLARE账号  点击<a href="https://dash.cloudflare.com/login" target="_blank" rel="noopener">CLOUDFLARE注册</a></p><p>选择Workers，创建免费的Workers</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210517025103.png" alt></p><p>免费版只有10w次请求，但是个人使用足以，填写二级域名后就可以创建完成。</p><p>随后：</p><ol><li><p>将脚本代码删除</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210517025939.png" alt></p></li></ol><ol start="2"><li><p>进入Zibri大佬的Github的repo中<a href="https://github.com/Zibri/cloudflare-cors-anywhere" target="_blank" rel="noopener">cloudflare-cors-anywhere</a>复制index.js的内容到脚本文件中</p><p>我看许多人的index.js都是参考他的，我是直接复制参考博主的index.js  指路<a href="https://github.com/Hanpeng-Chen/cloudflare-cors-anywhere" target="_blank" rel="noopener">博主仓库</a></p></li><li><p>保存并部署，复制自己的域名</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210517030725.png" alt></p></li></ol><ol start="4"><li><p>修改_config.yml里的proxy</p><p>将上述复制的值，作为proxy</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210517030720.png" alt></p><p>一定要注意连接的地方，要加?,不然会出现no access token的错误</p></li><li><p>最后重新部署博客，搞定</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210517030933.png" alt></p></li></ol><h2 id="出现Error-Validation-Failed"><a href="#出现Error-Validation-Failed" class="headerlink" title="出现Error: Validation Failed."></a>出现Error: Validation Failed.</h2><p>原因文章对应的 URL 过长，修改文件名长度，建议用英文，不然中文很容易太长</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210517033739.png" alt></p><p>Github真的yyds，上面有好多百度不到的问题解决方案，所以还是练好英文，多看看Google和Github吧～～终于解决问题了，可以睡个好觉了，现在是凌晨3：38.</p>]]></content>
      
      
      <categories>
          
          <category> 服务部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> Gitalk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>菊花细粒度识别模型可视化软件</title>
      <link href="/2021/05/13/chrysanthemum/"/>
      <url>/2021/05/13/chrysanthemum/</url>
      
        <content type="html"><![CDATA[<h1 id="菊花细粒度识别模型可视化软件"><a href="#菊花细粒度识别模型可视化软件" class="headerlink" title="菊花细粒度识别模型可视化软件"></a>菊花细粒度识别模型可视化软件</h1><h2 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h2><ul><li>Python==3.7</li><li>torch==1.7.0</li><li>Pyqt5 </li></ul><h2 id="软件使用"><a href="#软件使用" class="headerlink" title="软件使用"></a>软件使用</h2><ol><li><p>图片初始打开路径修改</p><p>由于系统原因，需要修改系统路径，在main.py中修改</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210514171323.png" alt></p></li></ol><ol start="2"><li><p>运行main.py</p><ul><li>选择图像</li></ul><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210514171528.png" alt></p><ul><li><p>选择识别模型</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210514171802.png" alt></p></li><li><p>开始识别</p></li><li><p>查看识别过程</p><p>识别过程图片会保存在当前目录的NTSfeautures和BCNNfeautures目录下</p></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 图像识别 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Es学习</title>
      <link href="/2020/11/12/es-study/"/>
      <url>/2020/11/12/es-study/</url>
      
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210514012832.png" alt></p><h1 id="ES查询"><a href="#ES查询" class="headerlink" title="ES查询"></a>ES查询</h1><h2 id="filter-DSL和query-DSL"><a href="#filter-DSL和query-DSL" class="headerlink" title="filter DSL和query DSL"></a>filter DSL和query DSL</h2><ul><li><p>filter DSL</p><p>在过滤器上下文中，查询会回答这个问题——“这个文档匹不匹配？”</p></li></ul><p>答案很简单，是或者不是。它不会去计算任何分值，也不会关心返回的排序问题，因此效率会高一点。</p><p>过滤上下文 是在使用filter参数时候的执行环境</p><ul><li><p>query DSL</p><p>在查询上下文中，查询会回答这个问题——“这个文档匹不匹配这个查询，它的相关度高么？”</p><p>如何验证匹配很好理解，如何计算相关度呢？ES中索引的数据都会存储一个_score分值，分值越高就代表越匹配。另外关于某个搜索的分值计算还是很复杂的，因此也需要一定的时间。</p></li></ul><h2 id="精确查找"><a href="#精确查找" class="headerlink" title="精确查找"></a>精确查找</h2><p>想要精确匹配一个字段,属性为keyword</p><ul><li><p>term方法</p><p>term是代表完全匹配，即不进行分词器分析，文档中必须包含整个搜索的词汇。主要用于精确匹配哪些值，比如数字，日期，布尔值或 not_analyzed 的字符串</p><p>term 必须对应 keyword的属性，不然查询不出，所谓keyword就是必须完全匹配，text可以模糊查询</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210514012843.png" alt></p><p>如果仅用s.value 查询不出，因为s.value是text属性，</p></li><li><p>match</p><p>match查询会先对搜索词进行分词,分词完毕后再逐个对分词结果进行匹配，因此相比于term的精确搜索.</p><p>match 是queryDSL</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210514012852.png" alt></p></li></ul><h2 id="term"><a href="#term" class="headerlink" title="term"></a>term</h2><p>term是代表完全匹配，即不进行分词器分析，文档中必须包含整个搜索的词汇。主要用于精确匹配哪些值，比如数字，日期，布尔值或 not_analyzed 的字符串</p><h2 id="terms"><a href="#terms" class="headerlink" title="terms"></a>terms</h2><p>terms 跟 term 有点类似，但 terms 允许指定多个匹配条件。 如果某个字段指定了多个值，那么文档需要一起去做匹配：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>“terms”<span class="token operator">:</span> <span class="token punctuation">{</span>“tag”<span class="token operator">:</span> <span class="token punctuation">[</span> “search”<span class="token punctuation">,</span> “full_text”<span class="token punctuation">,</span> “nosql” <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="range-过滤"><a href="#range-过滤" class="headerlink" title="range 过滤"></a>range 过滤</h2><p>ange过滤允许我们按照指定范围查找一批数据：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>“range”<span class="token operator">:</span> <span class="token punctuation">{</span>“age”<span class="token operator">:</span> <span class="token punctuation">{</span>“gte”<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>“lt”<span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>范围操作符包含：</p><p>gt :: 大于<br>gte:: 大于等于<br>lt :: 小于<br>lte:: 小于等于</p><h2 id="exists-和-missing-过滤"><a href="#exists-和-missing-过滤" class="headerlink" title="exists 和 missing 过滤"></a>exists 和 missing 过滤</h2><p>exists 和 missing 过滤可以用于查找文档中是否包含指定字段或没有某个字段，类似于SQL语句中的IS_NULL条件.这两个过滤只是针对已经查出一批数据来，但是想区分出某个字段是否存在的时候使用。</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>“exists”<span class="token operator">:</span> <span class="token punctuation">{</span>“field”<span class="token operator">:</span> “title”<span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="bool-过滤"><a href="#bool-过滤" class="headerlink" title="bool 过滤"></a>bool 过滤</h2><p>bool 过滤可以用来合并多个过滤条件查询结果的布尔逻辑，它包含一下操作符：</p><p>must :: 多个查询条件的完全匹配,相当于 and。<br>must_not :: 多个查询条件的相反匹配，相当于 not。<br>should :: 至少有一个查询条件匹配, 相当于 or。<br>这些参数可以分别继承一个过滤条件或者一个过滤条件的数组：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>“bool”<span class="token operator">:</span> <span class="token punctuation">{</span>“must”<span class="token operator">:</span> <span class="token punctuation">{</span> “term”<span class="token operator">:</span> <span class="token punctuation">{</span> “folder”<span class="token operator">:</span> “inbox” <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>“must_not”<span class="token operator">:</span> <span class="token punctuation">{</span> “term”<span class="token operator">:</span> <span class="token punctuation">{</span> “tag”<span class="token operator">:</span> “spam” <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>“should”<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> “term”<span class="token operator">:</span> <span class="token punctuation">{</span> “starred”<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span> “term”<span class="token operator">:</span> <span class="token punctuation">{</span> “unread”<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="match-all-查询"><a href="#match-all-查询" class="headerlink" title="match_all 查询"></a>match_all 查询</h2><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>“match_all”<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="match-查询"><a href="#match-查询" class="headerlink" title="match 查询"></a>match 查询</h2><p>match查询会先对搜索词进行分词,分词完毕后再逐个对分词结果进行匹配.它会在真正查询之前用分析器先分析match一下查询字符：</p><p>例如查询和”我的宝马多少马力”这个查询语句匹配的文档。</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"content"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"query"</span> <span class="token operator">:</span> <span class="token string">"我的宝马多少马力"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的查询匹配就会进行分词，比如”宝马多少马力”会被分词为”宝马 多少 马力”, 所有有关”宝马 多少 马力”, 那么所有包含这三个词中的一个或多个的文档就会被搜索出来。<br>并且根据lucene的评分机制(TF/IDF)来进行评分。</p><h2 id="multi-match-查询"><a href="#multi-match-查询" class="headerlink" title="multi_match 查询"></a>multi_match 查询</h2><p>如果我们希望两个字段进行匹配，其中一个字段有这个文档就满足的话，使用multi_match</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"multi_match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"query"</span> <span class="token operator">:</span> <span class="token string">"我的宝马多少马力"</span><span class="token punctuation">,</span>        <span class="token property">"fields"</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"title"</span><span class="token punctuation">,</span> <span class="token string">"content"</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="match-phrase"><a href="#match-phrase" class="headerlink" title="match_phrase"></a>match_phrase</h2><p>比如上面一个例子，一个文档”我的保时捷马力不错”也会被搜索出来，那么想要精确匹配所有同时包含”宝马 多少 马力”的文档怎么做？就要使用 match_phrase 了</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"match_phrase"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"content"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"query"</span> <span class="token operator">:</span> <span class="token string">"我的宝马多少马力"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完全匹配可能比较严，我们会希望有个可调节因子，少匹配一个也满足，那就需要使用到slop。</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"match_phrase"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"content"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"query"</span> <span class="token operator">:</span> <span class="token string">"我的宝马多少马力"</span><span class="token punctuation">,</span>            <span class="token property">"slop"</span> <span class="token operator">:</span> <span class="token number">1</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="通配符查询"><a href="#通配符查询" class="headerlink" title="通配符查询"></a>通配符查询</h2><ul><li><p>wildcards 查询</p><p>查询能够匹配包含W1F 7HW和W2F 8HW的文档：</p></li></ul><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>“query”<span class="token operator">:</span> <span class="token punctuation">{</span>“wildcard”<span class="token operator">:</span> <span class="token punctuation">{</span>“postcode”<span class="token operator">:</span> “W?F*HW”<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token punctuation">{</span>“query”<span class="token operator">:</span> <span class="token punctuation">{</span>“wildcard”<span class="token operator">:</span> <span class="token punctuation">{</span>“hostname”<span class="token operator">:</span> “wxopen*”<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>regexp 查询</li></ul><p>您只想匹配以W开头，紧跟着数字的邮政编码。使用regexp查询能够让你写下更复杂的模式：</p><pre class="line-numbers language-jsom"><code class="language-jsom">{“query”: {“regexp”: {“postcode”: “W[0-9].+”}}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所有以 wxopen 开头的正则</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>“query”<span class="token operator">:</span> <span class="token punctuation">{</span>“regexp”<span class="token operator">:</span> <span class="token punctuation">{</span>“hostname”<span class="token operator">:</span> “wxopen.*”<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Nested查询"><a href="#Nested查询" class="headerlink" title="Nested查询"></a>Nested查询</h2><p>结构</p><pre class="line-numbers language-json"><code class="language-json">PUT /blog_new<span class="token punctuation">{</span>  <span class="token property">"mappings"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"blog"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"title"</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"body"</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"tags"</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"published_on"</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"comments"</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"nested"</span><span class="token punctuation">,</span>          <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"comment"</span><span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"age"</span><span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"short"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"rating"</span><span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"short"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"commented_on"</span><span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询评论字段中评论姓名=William并且评论age=34的blog信息。</p><pre class="line-numbers language-json"><code class="language-json">GET /blog_new/_search?pretty<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"bool"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"must"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token property">"nested"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"comments"</span><span class="token punctuation">,</span>            <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token property">"bool"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"must"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                  <span class="token punctuation">{</span>                    <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                      <span class="token property">"comments.name"</span><span class="token operator">:</span> <span class="token string">"William"</span>                    <span class="token punctuation">}</span>                  <span class="token punctuation">}</span><span class="token punctuation">,</span>                  <span class="token punctuation">{</span>                    <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                      <span class="token property">"comments.age"</span><span class="token operator">:</span> <span class="token number">34</span>                    <span class="token punctuation">}</span>                  <span class="token punctuation">}</span>                <span class="token punctuation">]</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="ES创建索引"><a href="#ES创建索引" class="headerlink" title="ES创建索引"></a>ES创建索引</h1><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210514012904.png" alt="image-20201024152731520"></p><p>Post 方法，tt3为index，zlg为类型_type</p><pre class="line-numbers language-json"><code class="language-json">POST /tt3/zlg<span class="token punctuation">{</span><span class="token property">"mappings"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"subj"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token property">"height"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"integer"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token property">"weight"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"integer"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token property">"po"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"nested"</span><span class="token punctuation">,</span><span class="token property">"properties"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"pred"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"keyword"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token property">"obj"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"keyword"</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>PUT方法</p><p>类型为_doc</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210514012913.png" alt="image-20201024152930767"></p><pre class="line-numbers language-json"><code class="language-json">PUT /tt1<span class="token punctuation">{</span><span class="token property">"mappings"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"subj"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token property">"height"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"integer"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token property">"weight"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"integer"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token property">"po"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"nested"</span><span class="token punctuation">,</span><span class="token property">"properties"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"pred"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"keyword"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token property">"obj"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"keyword"</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="ES添加文档（数据）"><a href="#ES添加文档（数据）" class="headerlink" title="ES添加文档（数据）"></a>ES添加文档（数据）</h1><p>POST 或PUT</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210514012919.png" alt></p><p>demo1为index，_doc为类型，3位id，id可以省略（省略就系统自动生成)</p><pre class="line-numbers language-json"><code class="language-json">POST demo1/_doc/<span class="token number">3</span><span class="token punctuation">{</span>    <span class="token property">"subj"</span><span class="token operator">:</span> <span class="token string">"qj"</span><span class="token punctuation">,</span>    <span class="token property">"weight"</span><span class="token operator">:</span> <span class="token number">111</span><span class="token punctuation">,</span>    <span class="token property">"height"</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>    <span class="token property">"po"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>               <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"pred"</span><span class="token operator">:</span> <span class="token string">"爱好"</span><span class="token punctuation">,</span>                <span class="token property">"obj"</span><span class="token operator">:</span> <span class="token string">"tv"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"pred"</span><span class="token operator">:</span> <span class="token string">"性别"</span><span class="token punctuation">,</span>                <span class="token property">"obj"</span><span class="token operator">:</span> <span class="token string">"男"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>批量插入需要id，命令行使用_bulk命令</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210514012930.png" alt></p><p>/index/type/_bulk </p><p>跟上id，再跟里面的数据。</p><pre class="line-numbers language-json"><code class="language-json">POST /demo6/_doc/_bulk<span class="token punctuation">{</span><span class="token property">"index"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"_id"</span><span class="token operator">:</span><span class="token string">"20"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span> <span class="token property">"s"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"uri"</span><span class="token punctuation">,</span> <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"hnmb-01OrQN70"</span> <span class="token punctuation">}</span>  <span class="token punctuation">,</span> <span class="token property">"p"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"uri"</span><span class="token punctuation">,</span> <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"P1_1"</span> <span class="token punctuation">}</span>   <span class="token punctuation">,</span> <span class="token property">"o"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"literal"</span><span class="token punctuation">,</span> <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"浏阳古乐应鼓"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token property">"index"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"_id"</span><span class="token operator">:</span><span class="token string">"21"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span> <span class="token property">"s"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"uri"</span><span class="token punctuation">,</span> <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"hnmb-01OrQN70"</span> <span class="token punctuation">}</span>  <span class="token punctuation">,</span> <span class="token property">"p"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"uri"</span><span class="token punctuation">,</span> <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"P2_12"</span> <span class="token punctuation">}</span>  <span class="token punctuation">,</span> <span class="token property">"o"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"uri"</span><span class="token punctuation">,</span> <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"文物"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>python 批量插入，读取每行的json数据，处理后构建插入的数据_source，然后自动生成id，组成action</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> os<span class="token keyword">from</span> elasticsearch <span class="token keyword">import</span> Elasticsearch<span class="token keyword">from</span> elasticsearch <span class="token keyword">import</span> helpers<span class="token keyword">def</span> <span class="token function">get_files_to_import</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>    f_list <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    files_ <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> f_list<span class="token punctuation">:</span>        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>splitext<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.json'</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>            files_<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">return</span> files_<span class="token comment" spellcheck="true"># es = Elasticsearch('http://elastic:One4all4one@es-cn-mp90kb1bx0019j3cc.elasticsearch.aliyuncs.com:443')</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 默认不开启嗅探功能 es = Elasticsearch()</span>    es <span class="token operator">=</span> Elasticsearch<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># es = Elasticsearch(["***:9200", "***:9200"],</span>    <span class="token comment" spellcheck="true">#                    sniff_on_start=True,</span>    <span class="token comment" spellcheck="true">#                    sniff_on_connection_fail=True,</span>    <span class="token comment" spellcheck="true">#                    sniffer_timeout=60,</span>    <span class="token comment" spellcheck="true">#                    sniff_timeout=10</span>    <span class="token comment" spellcheck="true">#                    )</span>    actions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    workspace <span class="token operator">=</span> <span class="token string">'/Users/zhulingang/Desktop/json'</span>    files <span class="token operator">=</span> get_files_to_import<span class="token punctuation">(</span>workspace<span class="token punctuation">)</span>    id_num<span class="token punctuation">,</span> errors<span class="token punctuation">,</span> success <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>    <span class="token keyword">for</span> json <span class="token keyword">in</span> files<span class="token punctuation">:</span>        json <span class="token operator">=</span> workspace <span class="token operator">+</span> <span class="token string">'/'</span><span class="token operator">+</span>json        <span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%y-%m-%d %H:%M:%S'</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        this_file <span class="token operator">=</span> open<span class="token punctuation">(</span>json<span class="token punctuation">)</span>        <span class="token keyword">for</span> line <span class="token keyword">in</span> this_file<span class="token punctuation">:</span>            <span class="token keyword">if</span> line<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">',\n'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true">#读取的数据处理 假如每行最后有一个, 把逗号字符去除</span>                line<span class="token operator">=</span>line<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span>            action <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token string">"_index"</span><span class="token punctuation">:</span> <span class="token string">"test"</span><span class="token punctuation">,</span>                <span class="token string">"_type"</span><span class="token punctuation">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token string">"_id"</span><span class="token punctuation">:</span> id_num<span class="token punctuation">,</span>                <span class="token string">"_source"</span><span class="token punctuation">:</span> line            <span class="token punctuation">}</span>            id_num <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token comment" spellcheck="true"># if id_num == 900000:</span>            <span class="token comment" spellcheck="true">#     print("++++++++++++++++++++++")</span>            actions<span class="token punctuation">.</span>append<span class="token punctuation">(</span>action<span class="token punctuation">)</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>actions<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2000</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># print("======================")</span>                err<span class="token punctuation">,</span> suc <span class="token operator">=</span> helpers<span class="token punctuation">.</span>bulk<span class="token punctuation">(</span>es<span class="token punctuation">,</span> actions<span class="token punctuation">,</span> chunk_size<span class="token operator">=</span><span class="token number">2000</span><span class="token punctuation">,</span> raise_on_error<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> stats_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>                errors <span class="token operator">+=</span> err                success <span class="token operator">+=</span> suc                <span class="token keyword">del</span> actions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>len<span class="token punctuation">(</span>actions<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>actions<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            suc<span class="token punctuation">,</span> err <span class="token operator">=</span> helpers<span class="token punctuation">.</span>bulk<span class="token punctuation">(</span>es<span class="token punctuation">,</span> actions<span class="token punctuation">,</span> chunk_size<span class="token operator">=</span><span class="token number">2000</span><span class="token punctuation">,</span> raise_on_error<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> stats_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>            errors <span class="token operator">+=</span> err            success <span class="token operator">+=</span> suc            <span class="token keyword">del</span> actions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>len<span class="token punctuation">(</span>actions<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"finish process file:%s"</span> <span class="token operator">%</span> json<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">" down!\n success_num:\t %d"</span> <span class="token operator">%</span> success <span class="token operator">+</span> <span class="token string">" \n errors_num:\t %d"</span> <span class="token operator">%</span> errors<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="ES查看数据"><a href="#ES查看数据" class="headerlink" title="ES查看数据"></a>ES查看数据</h1><p>GET 索引名/文档类型/文档id</p><pre class="line-numbers language-json"><code class="language-json">GET /demo6/_doc/<span class="token number">20</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210514012944.png" alt></p><h1 id="ES数据修改"><a href="#ES数据修改" class="headerlink" title="ES数据修改"></a>ES数据修改</h1><p>put方式修改</p><pre class="line-numbers language-json"><code class="language-json">put /索引名/文档类型/文档Id<span class="token punctuation">{</span>  <span class="token property">"age"</span><span class="token operator">:</span><span class="token number">19</span><span class="token punctuation">,</span>(修改的新值<span class="token punctuation">)</span>  <span class="token property">"content"</span><span class="token operator">:</span><span class="token string">"1"</span>(修改的新值<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210514012959.png" alt></p><pre class="line-numbers language-json"><code class="language-json">PUT /demo6/_doc/<span class="token number">20</span><span class="token punctuation">{</span>  <span class="token property">"s.type"</span><span class="token operator">:</span><span class="token string">"uri"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>要注意的是，当只修改一个属性的时候，如果只填这个属性，其他属性的值会消失。</p><p>如</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210514013008.png" alt></p><p>s.value p.value 等属性消失。</p><p>Post 方式修改，当只修改一个属性，不会让其他属性消失。</p><pre class="line-numbers language-json"><code class="language-json">POST /索引名/文档类型/文档Id/_update<span class="token punctuation">{</span>    <span class="token property">"doc"</span><span class="token operator">:</span><span class="token punctuation">{</span>   <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"张三的名字叫李四"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210514013016.png" alt></p><pre class="line-numbers language-json"><code class="language-json">POST /demo6/_doc/<span class="token number">6</span>/_update<span class="token punctuation">{</span><span class="token property">"doc"</span><span class="token operator">:</span><span class="token punctuation">{</span>  <span class="token property">"s"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"u1u1"</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>POST /demo1/_doc/<span class="token number">1</span>/_update/<span class="token punctuation">{</span> <span class="token property">"doc"</span><span class="token operator">:</span><span class="token punctuation">{</span>  <span class="token property">"subj"</span><span class="token operator">:</span><span class="token string">"sas"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>假如属性值不存在 则会追加这个属性</p><h1 id="删除文档-amp-索引"><a href="#删除文档-amp-索引" class="headerlink" title="删除文档&amp;索引"></a>删除文档&amp;索引</h1><p><strong>删除索引</strong>：delete 索引名</p><p><strong>删除文档</strong>：delete 索引名/文档类型/文档id</p><p><img src="https://raw.githubusercontent.com/zhulingang/BlogImage/main/images/20210514013024.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
